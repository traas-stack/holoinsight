/*
 * Copyright 2022 Holoinsight Project Authors. Licensed under Apache-2.0.
 */
// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: opentelemetry/proto/metrics/v1/metrics.proto

package io.opentelemetry.proto.metrics.v1;

/**
 * <pre>
 * SummaryDataPoint is a single data point in a timeseries that describes the
 * time-varying values of a Summary metric.
 * </pre>
 *
 * Protobuf type {@code opentelemetry.proto.metrics.v1.SummaryDataPoint}
 */
public final class SummaryDataPoint extends com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:opentelemetry.proto.metrics.v1.SummaryDataPoint)
    SummaryDataPointOrBuilder {
  private static final long serialVersionUID = 0L;

  // Use SummaryDataPoint.newBuilder() to construct.
  private SummaryDataPoint(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }

  private SummaryDataPoint() {
    attributes_ = java.util.Collections.emptyList();
    quantileValues_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
    return new SummaryDataPoint();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet getUnknownFields() {
    return this.unknownFields;
  }

  private SummaryDataPoint(com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 17: {

            startTimeUnixNano_ = input.readFixed64();
            break;
          }
          case 25: {

            timeUnixNano_ = input.readFixed64();
            break;
          }
          case 33: {

            count_ = input.readFixed64();
            break;
          }
          case 41: {

            sum_ = input.readDouble();
            break;
          }
          case 50: {
            if (!((mutable_bitField0_ & 0x00000002) != 0)) {
              quantileValues_ =
                  new java.util.ArrayList<io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile>();
              mutable_bitField0_ |= 0x00000002;
            }
            quantileValues_.add(input.readMessage(
                io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.parser(),
                extensionRegistry));
            break;
          }
          case 58: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              attributes_ = new java.util.ArrayList<io.opentelemetry.proto.common.v1.KeyValue>();
              mutable_bitField0_ |= 0x00000001;
            }
            attributes_.add(input.readMessage(io.opentelemetry.proto.common.v1.KeyValue.parser(),
                extensionRegistry));
            break;
          }
          case 64: {

            flags_ = input.readUInt32();
            break;
          }
          default: {
            if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000002) != 0)) {
        quantileValues_ = java.util.Collections.unmodifiableList(quantileValues_);
      }
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        attributes_ = java.util.Collections.unmodifiableList(attributes_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }

  public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
    return io.opentelemetry.proto.metrics.v1.MetricsProto.internal_static_opentelemetry_proto_metrics_v1_SummaryDataPoint_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
    return io.opentelemetry.proto.metrics.v1.MetricsProto.internal_static_opentelemetry_proto_metrics_v1_SummaryDataPoint_fieldAccessorTable
        .ensureFieldAccessorsInitialized(io.opentelemetry.proto.metrics.v1.SummaryDataPoint.class,
            io.opentelemetry.proto.metrics.v1.SummaryDataPoint.Builder.class);
  }

  public interface ValueAtQuantileOrBuilder extends
      // @@protoc_insertion_point(interface_extends:opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The quantile of a distribution. Must be in the interval
     * [0.0, 1.0].
     * </pre>
     *
     * <code>double quantile = 1;</code>
     */
    double getQuantile();

    /**
     * <pre>
     * The value at the given quantile of a distribution.
     * Quantile values must NOT be negative.
     * </pre>
     *
     * <code>double value = 2;</code>
     */
    double getValue();
  }
  /**
   * <pre>
   * Represents the value at a given quantile of a distribution.
   * To record Min and Max values following conventions are used:
   * - The 1.0 quantile is equivalent to the maximum value observed.
   * - The 0.0 quantile is equivalent to the minimum value observed.
   * See the following issue for more context:
   * https://github.com/open-telemetry/opentelemetry-proto/issues/125
   * </pre>
   *
   * Protobuf type {@code opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile}
   */
  public static final class ValueAtQuantile extends com.google.protobuf.GeneratedMessageV3
      implements
      // @@protoc_insertion_point(message_implements:opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile)
      ValueAtQuantileOrBuilder {
    private static final long serialVersionUID = 0L;

    // Use ValueAtQuantile.newBuilder() to construct.
    private ValueAtQuantile(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }

    private ValueAtQuantile() {}

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
      return new ValueAtQuantile();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet getUnknownFields() {
      return this.unknownFields;
    }

    private ValueAtQuantile(com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 9: {

              quantile_ = input.readDouble();
              break;
            }
            case 17: {

              value_ = input.readDouble();
              break;
            }
            default: {
              if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }

    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return io.opentelemetry.proto.metrics.v1.MetricsProto.internal_static_opentelemetry_proto_metrics_v1_SummaryDataPoint_ValueAtQuantile_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
      return io.opentelemetry.proto.metrics.v1.MetricsProto.internal_static_opentelemetry_proto_metrics_v1_SummaryDataPoint_ValueAtQuantile_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.class,
              io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.Builder.class);
    }

    public static final int QUANTILE_FIELD_NUMBER = 1;
    private double quantile_;

    /**
     * <pre>
     * The quantile of a distribution. Must be in the interval
     * [0.0, 1.0].
     * </pre>
     *
     * <code>double quantile = 1;</code>
     */
    public double getQuantile() {
      return quantile_;
    }

    public static final int VALUE_FIELD_NUMBER = 2;
    private double value_;

    /**
     * <pre>
     * The value at the given quantile of a distribution.
     * Quantile values must NOT be negative.
     * </pre>
     *
     * <code>double value = 2;</code>
     */
    public double getValue() {
      return value_;
    }

    private byte memoizedIsInitialized = -1;

    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1)
        return true;
      if (isInitialized == 0)
        return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
      if (quantile_ != 0D) {
        output.writeDouble(1, quantile_);
      }
      if (value_ != 0D) {
        output.writeDouble(2, value_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1)
        return size;

      size = 0;
      if (quantile_ != 0D) {
        size += com.google.protobuf.CodedOutputStream.computeDoubleSize(1, quantile_);
      }
      if (value_ != 0D) {
        size += com.google.protobuf.CodedOutputStream.computeDoubleSize(2, value_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
        return true;
      }
      if (!(obj instanceof io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile)) {
        return super.equals(obj);
      }
      io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile other =
          (io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile) obj;

      if (java.lang.Double.doubleToLongBits(getQuantile()) != java.lang.Double
          .doubleToLongBits(other.getQuantile()))
        return false;
      if (java.lang.Double.doubleToLongBits(getValue()) != java.lang.Double
          .doubleToLongBits(other.getValue()))
        return false;
      if (!unknownFields.equals(other.unknownFields))
        return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + QUANTILE_FIELD_NUMBER;
      hash = (53 * hash)
          + com.google.protobuf.Internal.hashLong(java.lang.Double.doubleToLongBits(getQuantile()));
      hash = (37 * hash) + VALUE_FIELD_NUMBER;
      hash = (53 * hash)
          + com.google.protobuf.Internal.hashLong(java.lang.Double.doubleToLongBits(getValue()));
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile parseFrom(
        java.nio.ByteBuffer data) throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile parseFrom(
        java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile parseFrom(
        byte[] data) throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile parseFrom(
        byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile parseFrom(
        java.io.InputStream input) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
    }

    public static io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile parseFrom(
        java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input,
          extensionRegistry);
    }

    public static io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile parseDelimitedFrom(
        java.io.InputStream input) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
    }

    public static io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile parseDelimitedFrom(
        java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input,
          extensionRegistry);
    }

    public static io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile parseFrom(
        com.google.protobuf.CodedInputStream input) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
    }

    public static io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input,
          extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() {
      return newBuilder();
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }

    public static Builder newBuilder(
        io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }

    /**
     * <pre>
     * Represents the value at a given quantile of a distribution.
     * To record Min and Max values following conventions are used:
     * - The 1.0 quantile is equivalent to the maximum value observed.
     * - The 0.0 quantile is equivalent to the minimum value observed.
     * See the following issue for more context:
     * https://github.com/open-telemetry/opentelemetry-proto/issues/125
     * </pre>
     *
     * Protobuf type {@code opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile}
     */
    public static final class Builder
        extends com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile)
        io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantileOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
        return io.opentelemetry.proto.metrics.v1.MetricsProto.internal_static_opentelemetry_proto_metrics_v1_SummaryDataPoint_ValueAtQuantile_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
        return io.opentelemetry.proto.metrics.v1.MetricsProto.internal_static_opentelemetry_proto_metrics_v1_SummaryDataPoint_ValueAtQuantile_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.class,
                io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.Builder.class);
      }

      // Construct using
      // io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
        }
      }

      @java.lang.Override
      public Builder clear() {
        super.clear();
        quantile_ = 0D;

        value_ = 0D;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
        return io.opentelemetry.proto.metrics.v1.MetricsProto.internal_static_opentelemetry_proto_metrics_v1_SummaryDataPoint_ValueAtQuantile_descriptor;
      }

      @java.lang.Override
      public io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile getDefaultInstanceForType() {
        return io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile
            .getDefaultInstance();
      }

      @java.lang.Override
      public io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile build() {
        io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile buildPartial() {
        io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile result =
            new io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile(this);
        result.quantile_ = quantile_;
        result.value_ = value_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }

      @java.lang.Override
      public Builder setField(com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }

      @java.lang.Override
      public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }

      @java.lang.Override
      public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }

      @java.lang.Override
      public Builder setRepeatedField(com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }

      @java.lang.Override
      public Builder addRepeatedField(com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile) {
          return mergeFrom(
              (io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile) other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(
          io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile other) {
        if (other == io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile
            .getDefaultInstance())
          return this;
        if (other.getQuantile() != 0D) {
          setQuantile(other.getQuantile());
        }
        if (other.getValue() != 0D) {
          setValue(other.getValue());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
        io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile) e
              .getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private double quantile_;

      /**
       * <pre>
       * The quantile of a distribution. Must be in the interval
       * [0.0, 1.0].
       * </pre>
       *
       * <code>double quantile = 1;</code>
       */
      public double getQuantile() {
        return quantile_;
      }

      /**
       * <pre>
       * The quantile of a distribution. Must be in the interval
       * [0.0, 1.0].
       * </pre>
       *
       * <code>double quantile = 1;</code>
       */
      public Builder setQuantile(double value) {

        quantile_ = value;
        onChanged();
        return this;
      }

      /**
       * <pre>
       * The quantile of a distribution. Must be in the interval
       * [0.0, 1.0].
       * </pre>
       *
       * <code>double quantile = 1;</code>
       */
      public Builder clearQuantile() {

        quantile_ = 0D;
        onChanged();
        return this;
      }

      private double value_;

      /**
       * <pre>
       * The value at the given quantile of a distribution.
       * Quantile values must NOT be negative.
       * </pre>
       *
       * <code>double value = 2;</code>
       */
      public double getValue() {
        return value_;
      }

      /**
       * <pre>
       * The value at the given quantile of a distribution.
       * Quantile values must NOT be negative.
       * </pre>
       *
       * <code>double value = 2;</code>
       */
      public Builder setValue(double value) {

        value_ = value;
        onChanged();
        return this;
      }

      /**
       * <pre>
       * The value at the given quantile of a distribution.
       * Quantile values must NOT be negative.
       * </pre>
       *
       * <code>double value = 2;</code>
       */
      public Builder clearValue() {

        value_ = 0D;
        onChanged();
        return this;
      }

      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile)
    }

    // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile)
    private static final io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile();
    }

    public static io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ValueAtQuantile> PARSER =
        new com.google.protobuf.AbstractParser<ValueAtQuantile>() {
          @java.lang.Override
          public ValueAtQuantile parsePartialFrom(com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return new ValueAtQuantile(input, extensionRegistry);
          }
        };

    public static com.google.protobuf.Parser<ValueAtQuantile> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ValueAtQuantile> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public static final int ATTRIBUTES_FIELD_NUMBER = 7;
  private java.util.List<io.opentelemetry.proto.common.v1.KeyValue> attributes_;

  /**
   * <pre>
   * The set of key/value pairs that uniquely identify the timeseries from
   * where this point belongs. The list may be empty (may contain 0 elements).
   * Attribute keys MUST be unique (it is not allowed to have more than one
   * attribute with the same key).
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;</code>
   */
  public java.util.List<io.opentelemetry.proto.common.v1.KeyValue> getAttributesList() {
    return attributes_;
  }

  /**
   * <pre>
   * The set of key/value pairs that uniquely identify the timeseries from
   * where this point belongs. The list may be empty (may contain 0 elements).
   * Attribute keys MUST be unique (it is not allowed to have more than one
   * attribute with the same key).
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;</code>
   */
  public java.util.List<? extends io.opentelemetry.proto.common.v1.KeyValueOrBuilder> getAttributesOrBuilderList() {
    return attributes_;
  }

  /**
   * <pre>
   * The set of key/value pairs that uniquely identify the timeseries from
   * where this point belongs. The list may be empty (may contain 0 elements).
   * Attribute keys MUST be unique (it is not allowed to have more than one
   * attribute with the same key).
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;</code>
   */
  public int getAttributesCount() {
    return attributes_.size();
  }

  /**
   * <pre>
   * The set of key/value pairs that uniquely identify the timeseries from
   * where this point belongs. The list may be empty (may contain 0 elements).
   * Attribute keys MUST be unique (it is not allowed to have more than one
   * attribute with the same key).
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;</code>
   */
  public io.opentelemetry.proto.common.v1.KeyValue getAttributes(int index) {
    return attributes_.get(index);
  }

  /**
   * <pre>
   * The set of key/value pairs that uniquely identify the timeseries from
   * where this point belongs. The list may be empty (may contain 0 elements).
   * Attribute keys MUST be unique (it is not allowed to have more than one
   * attribute with the same key).
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;</code>
   */
  public io.opentelemetry.proto.common.v1.KeyValueOrBuilder getAttributesOrBuilder(int index) {
    return attributes_.get(index);
  }

  public static final int START_TIME_UNIX_NANO_FIELD_NUMBER = 2;
  private long startTimeUnixNano_;

  /**
   * <pre>
   * StartTimeUnixNano is optional but strongly encouraged, see the
   * the detailed comments above Metric.
   * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
   * 1970.
   * </pre>
   *
   * <code>fixed64 start_time_unix_nano = 2;</code>
   */
  public long getStartTimeUnixNano() {
    return startTimeUnixNano_;
  }

  public static final int TIME_UNIX_NANO_FIELD_NUMBER = 3;
  private long timeUnixNano_;

  /**
   * <pre>
   * TimeUnixNano is required, see the detailed comments above Metric.
   * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
   * 1970.
   * </pre>
   *
   * <code>fixed64 time_unix_nano = 3;</code>
   */
  public long getTimeUnixNano() {
    return timeUnixNano_;
  }

  public static final int COUNT_FIELD_NUMBER = 4;
  private long count_;

  /**
   * <pre>
   * count is the number of values in the population. Must be non-negative.
   * </pre>
   *
   * <code>fixed64 count = 4;</code>
   */
  public long getCount() {
    return count_;
  }

  public static final int SUM_FIELD_NUMBER = 5;
  private double sum_;

  /**
   * <pre>
   * sum of the values in the population. If count is zero then this field
   * must be zero.
   * Note: Sum should only be filled out when measuring non-negative discrete
   * events, and is assumed to be monotonic over the values of these events.
   * Negative events *can* be recorded, but sum should not be filled out when
   * doing so.  This is specifically to enforce compatibility w/ OpenMetrics,
   * see: https://github.com/OpenObservability/OpenMetrics/blob/main/specification/OpenMetrics.md#summary
   * </pre>
   *
   * <code>double sum = 5;</code>
   */
  public double getSum() {
    return sum_;
  }

  public static final int QUANTILE_VALUES_FIELD_NUMBER = 6;
  private java.util.List<io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile> quantileValues_;

  /**
   * <pre>
   * (Optional) list of values at different quantiles of the distribution calculated
   * from the current snapshot. The quantiles must be strictly increasing.
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile quantile_values = 6;</code>
   */
  public java.util.List<io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile> getQuantileValuesList() {
    return quantileValues_;
  }

  /**
   * <pre>
   * (Optional) list of values at different quantiles of the distribution calculated
   * from the current snapshot. The quantiles must be strictly increasing.
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile quantile_values = 6;</code>
   */
  public java.util.List<? extends io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantileOrBuilder> getQuantileValuesOrBuilderList() {
    return quantileValues_;
  }

  /**
   * <pre>
   * (Optional) list of values at different quantiles of the distribution calculated
   * from the current snapshot. The quantiles must be strictly increasing.
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile quantile_values = 6;</code>
   */
  public int getQuantileValuesCount() {
    return quantileValues_.size();
  }

  /**
   * <pre>
   * (Optional) list of values at different quantiles of the distribution calculated
   * from the current snapshot. The quantiles must be strictly increasing.
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile quantile_values = 6;</code>
   */
  public io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile getQuantileValues(
      int index) {
    return quantileValues_.get(index);
  }

  /**
   * <pre>
   * (Optional) list of values at different quantiles of the distribution calculated
   * from the current snapshot. The quantiles must be strictly increasing.
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile quantile_values = 6;</code>
   */
  public io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantileOrBuilder getQuantileValuesOrBuilder(
      int index) {
    return quantileValues_.get(index);
  }

  public static final int FLAGS_FIELD_NUMBER = 8;
  private int flags_;

  /**
   * <pre>
   * Flags that apply to this specific data point.  See DataPointFlags
   * for the available flags and their meaning.
   * </pre>
   *
   * <code>uint32 flags = 8;</code>
   */
  public int getFlags() {
    return flags_;
  }

  private byte memoizedIsInitialized = -1;

  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1)
      return true;
    if (isInitialized == 0)
      return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
    if (startTimeUnixNano_ != 0L) {
      output.writeFixed64(2, startTimeUnixNano_);
    }
    if (timeUnixNano_ != 0L) {
      output.writeFixed64(3, timeUnixNano_);
    }
    if (count_ != 0L) {
      output.writeFixed64(4, count_);
    }
    if (sum_ != 0D) {
      output.writeDouble(5, sum_);
    }
    for (int i = 0; i < quantileValues_.size(); i++) {
      output.writeMessage(6, quantileValues_.get(i));
    }
    for (int i = 0; i < attributes_.size(); i++) {
      output.writeMessage(7, attributes_.get(i));
    }
    if (flags_ != 0) {
      output.writeUInt32(8, flags_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1)
      return size;

    size = 0;
    if (startTimeUnixNano_ != 0L) {
      size += com.google.protobuf.CodedOutputStream.computeFixed64Size(2, startTimeUnixNano_);
    }
    if (timeUnixNano_ != 0L) {
      size += com.google.protobuf.CodedOutputStream.computeFixed64Size(3, timeUnixNano_);
    }
    if (count_ != 0L) {
      size += com.google.protobuf.CodedOutputStream.computeFixed64Size(4, count_);
    }
    if (sum_ != 0D) {
      size += com.google.protobuf.CodedOutputStream.computeDoubleSize(5, sum_);
    }
    for (int i = 0; i < quantileValues_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(6, quantileValues_.get(i));
    }
    for (int i = 0; i < attributes_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(7, attributes_.get(i));
    }
    if (flags_ != 0) {
      size += com.google.protobuf.CodedOutputStream.computeUInt32Size(8, flags_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
      return true;
    }
    if (!(obj instanceof io.opentelemetry.proto.metrics.v1.SummaryDataPoint)) {
      return super.equals(obj);
    }
    io.opentelemetry.proto.metrics.v1.SummaryDataPoint other =
        (io.opentelemetry.proto.metrics.v1.SummaryDataPoint) obj;

    if (!getAttributesList().equals(other.getAttributesList()))
      return false;
    if (getStartTimeUnixNano() != other.getStartTimeUnixNano())
      return false;
    if (getTimeUnixNano() != other.getTimeUnixNano())
      return false;
    if (getCount() != other.getCount())
      return false;
    if (java.lang.Double.doubleToLongBits(getSum()) != java.lang.Double
        .doubleToLongBits(other.getSum()))
      return false;
    if (!getQuantileValuesList().equals(other.getQuantileValuesList()))
      return false;
    if (getFlags() != other.getFlags())
      return false;
    if (!unknownFields.equals(other.unknownFields))
      return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getAttributesCount() > 0) {
      hash = (37 * hash) + ATTRIBUTES_FIELD_NUMBER;
      hash = (53 * hash) + getAttributesList().hashCode();
    }
    hash = (37 * hash) + START_TIME_UNIX_NANO_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(getStartTimeUnixNano());
    hash = (37 * hash) + TIME_UNIX_NANO_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(getTimeUnixNano());
    hash = (37 * hash) + COUNT_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(getCount());
    hash = (37 * hash) + SUM_FIELD_NUMBER;
    hash = (53 * hash)
        + com.google.protobuf.Internal.hashLong(java.lang.Double.doubleToLongBits(getSum()));
    if (getQuantileValuesCount() > 0) {
      hash = (37 * hash) + QUANTILE_VALUES_FIELD_NUMBER;
      hash = (53 * hash) + getQuantileValuesList().hashCode();
    }
    hash = (37 * hash) + FLAGS_FIELD_NUMBER;
    hash = (53 * hash) + getFlags();
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.opentelemetry.proto.metrics.v1.SummaryDataPoint parseFrom(
      java.nio.ByteBuffer data) throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static io.opentelemetry.proto.metrics.v1.SummaryDataPoint parseFrom(
      java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static io.opentelemetry.proto.metrics.v1.SummaryDataPoint parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static io.opentelemetry.proto.metrics.v1.SummaryDataPoint parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static io.opentelemetry.proto.metrics.v1.SummaryDataPoint parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static io.opentelemetry.proto.metrics.v1.SummaryDataPoint parseFrom(byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static io.opentelemetry.proto.metrics.v1.SummaryDataPoint parseFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static io.opentelemetry.proto.metrics.v1.SummaryDataPoint parseFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input,
        extensionRegistry);
  }

  public static io.opentelemetry.proto.metrics.v1.SummaryDataPoint parseDelimitedFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
  }

  public static io.opentelemetry.proto.metrics.v1.SummaryDataPoint parseDelimitedFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input,
        extensionRegistry);
  }

  public static io.opentelemetry.proto.metrics.v1.SummaryDataPoint parseFrom(
      com.google.protobuf.CodedInputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static io.opentelemetry.proto.metrics.v1.SummaryDataPoint parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input,
        extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() {
    return newBuilder();
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }

  public static Builder newBuilder(io.opentelemetry.proto.metrics.v1.SummaryDataPoint prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }

  /**
   * <pre>
   * SummaryDataPoint is a single data point in a timeseries that describes the
   * time-varying values of a Summary metric.
   * </pre>
   *
   * Protobuf type {@code opentelemetry.proto.metrics.v1.SummaryDataPoint}
   */
  public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
      implements
      // @@protoc_insertion_point(builder_implements:opentelemetry.proto.metrics.v1.SummaryDataPoint)
      io.opentelemetry.proto.metrics.v1.SummaryDataPointOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return io.opentelemetry.proto.metrics.v1.MetricsProto.internal_static_opentelemetry_proto_metrics_v1_SummaryDataPoint_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
      return io.opentelemetry.proto.metrics.v1.MetricsProto.internal_static_opentelemetry_proto_metrics_v1_SummaryDataPoint_fieldAccessorTable
          .ensureFieldAccessorsInitialized(io.opentelemetry.proto.metrics.v1.SummaryDataPoint.class,
              io.opentelemetry.proto.metrics.v1.SummaryDataPoint.Builder.class);
    }

    // Construct using io.opentelemetry.proto.metrics.v1.SummaryDataPoint.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }

    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
        getAttributesFieldBuilder();
        getQuantileValuesFieldBuilder();
      }
    }

    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (attributesBuilder_ == null) {
        attributes_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        attributesBuilder_.clear();
      }
      startTimeUnixNano_ = 0L;

      timeUnixNano_ = 0L;

      count_ = 0L;

      sum_ = 0D;

      if (quantileValuesBuilder_ == null) {
        quantileValues_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
      } else {
        quantileValuesBuilder_.clear();
      }
      flags_ = 0;

      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
      return io.opentelemetry.proto.metrics.v1.MetricsProto.internal_static_opentelemetry_proto_metrics_v1_SummaryDataPoint_descriptor;
    }

    @java.lang.Override
    public io.opentelemetry.proto.metrics.v1.SummaryDataPoint getDefaultInstanceForType() {
      return io.opentelemetry.proto.metrics.v1.SummaryDataPoint.getDefaultInstance();
    }

    @java.lang.Override
    public io.opentelemetry.proto.metrics.v1.SummaryDataPoint build() {
      io.opentelemetry.proto.metrics.v1.SummaryDataPoint result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.opentelemetry.proto.metrics.v1.SummaryDataPoint buildPartial() {
      io.opentelemetry.proto.metrics.v1.SummaryDataPoint result =
          new io.opentelemetry.proto.metrics.v1.SummaryDataPoint(this);
      int from_bitField0_ = bitField0_;
      if (attributesBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          attributes_ = java.util.Collections.unmodifiableList(attributes_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.attributes_ = attributes_;
      } else {
        result.attributes_ = attributesBuilder_.build();
      }
      result.startTimeUnixNano_ = startTimeUnixNano_;
      result.timeUnixNano_ = timeUnixNano_;
      result.count_ = count_;
      result.sum_ = sum_;
      if (quantileValuesBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)) {
          quantileValues_ = java.util.Collections.unmodifiableList(quantileValues_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.quantileValues_ = quantileValues_;
      } else {
        result.quantileValues_ = quantileValuesBuilder_.build();
      }
      result.flags_ = flags_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }

    @java.lang.Override
    public Builder setField(com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }

    @java.lang.Override
    public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }

    @java.lang.Override
    public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }

    @java.lang.Override
    public Builder setRepeatedField(com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }

    @java.lang.Override
    public Builder addRepeatedField(com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.opentelemetry.proto.metrics.v1.SummaryDataPoint) {
        return mergeFrom((io.opentelemetry.proto.metrics.v1.SummaryDataPoint) other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.opentelemetry.proto.metrics.v1.SummaryDataPoint other) {
      if (other == io.opentelemetry.proto.metrics.v1.SummaryDataPoint.getDefaultInstance())
        return this;
      if (attributesBuilder_ == null) {
        if (!other.attributes_.isEmpty()) {
          if (attributes_.isEmpty()) {
            attributes_ = other.attributes_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureAttributesIsMutable();
            attributes_.addAll(other.attributes_);
          }
          onChanged();
        }
      } else {
        if (!other.attributes_.isEmpty()) {
          if (attributesBuilder_.isEmpty()) {
            attributesBuilder_.dispose();
            attributesBuilder_ = null;
            attributes_ = other.attributes_;
            bitField0_ = (bitField0_ & ~0x00000001);
            attributesBuilder_ = com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders
                ? getAttributesFieldBuilder()
                : null;
          } else {
            attributesBuilder_.addAllMessages(other.attributes_);
          }
        }
      }
      if (other.getStartTimeUnixNano() != 0L) {
        setStartTimeUnixNano(other.getStartTimeUnixNano());
      }
      if (other.getTimeUnixNano() != 0L) {
        setTimeUnixNano(other.getTimeUnixNano());
      }
      if (other.getCount() != 0L) {
        setCount(other.getCount());
      }
      if (other.getSum() != 0D) {
        setSum(other.getSum());
      }
      if (quantileValuesBuilder_ == null) {
        if (!other.quantileValues_.isEmpty()) {
          if (quantileValues_.isEmpty()) {
            quantileValues_ = other.quantileValues_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureQuantileValuesIsMutable();
            quantileValues_.addAll(other.quantileValues_);
          }
          onChanged();
        }
      } else {
        if (!other.quantileValues_.isEmpty()) {
          if (quantileValuesBuilder_.isEmpty()) {
            quantileValuesBuilder_.dispose();
            quantileValuesBuilder_ = null;
            quantileValues_ = other.quantileValues_;
            bitField0_ = (bitField0_ & ~0x00000002);
            quantileValuesBuilder_ = com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders
                ? getQuantileValuesFieldBuilder()
                : null;
          } else {
            quantileValuesBuilder_.addAllMessages(other.quantileValues_);
          }
        }
      }
      if (other.getFlags() != 0) {
        setFlags(other.getFlags());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
      io.opentelemetry.proto.metrics.v1.SummaryDataPoint parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage =
            (io.opentelemetry.proto.metrics.v1.SummaryDataPoint) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private int bitField0_;

    private java.util.List<io.opentelemetry.proto.common.v1.KeyValue> attributes_ =
        java.util.Collections.emptyList();

    private void ensureAttributesIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        attributes_ =
            new java.util.ArrayList<io.opentelemetry.proto.common.v1.KeyValue>(attributes_);
        bitField0_ |= 0x00000001;
      }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<io.opentelemetry.proto.common.v1.KeyValue, io.opentelemetry.proto.common.v1.KeyValue.Builder, io.opentelemetry.proto.common.v1.KeyValueOrBuilder> attributesBuilder_;

    /**
     * <pre>
     * The set of key/value pairs that uniquely identify the timeseries from
     * where this point belongs. The list may be empty (may contain 0 elements).
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;</code>
     */
    public java.util.List<io.opentelemetry.proto.common.v1.KeyValue> getAttributesList() {
      if (attributesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(attributes_);
      } else {
        return attributesBuilder_.getMessageList();
      }
    }

    /**
     * <pre>
     * The set of key/value pairs that uniquely identify the timeseries from
     * where this point belongs. The list may be empty (may contain 0 elements).
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;</code>
     */
    public int getAttributesCount() {
      if (attributesBuilder_ == null) {
        return attributes_.size();
      } else {
        return attributesBuilder_.getCount();
      }
    }

    /**
     * <pre>
     * The set of key/value pairs that uniquely identify the timeseries from
     * where this point belongs. The list may be empty (may contain 0 elements).
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;</code>
     */
    public io.opentelemetry.proto.common.v1.KeyValue getAttributes(int index) {
      if (attributesBuilder_ == null) {
        return attributes_.get(index);
      } else {
        return attributesBuilder_.getMessage(index);
      }
    }

    /**
     * <pre>
     * The set of key/value pairs that uniquely identify the timeseries from
     * where this point belongs. The list may be empty (may contain 0 elements).
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;</code>
     */
    public Builder setAttributes(int index, io.opentelemetry.proto.common.v1.KeyValue value) {
      if (attributesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAttributesIsMutable();
        attributes_.set(index, value);
        onChanged();
      } else {
        attributesBuilder_.setMessage(index, value);
      }
      return this;
    }

    /**
     * <pre>
     * The set of key/value pairs that uniquely identify the timeseries from
     * where this point belongs. The list may be empty (may contain 0 elements).
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;</code>
     */
    public Builder setAttributes(int index,
        io.opentelemetry.proto.common.v1.KeyValue.Builder builderForValue) {
      if (attributesBuilder_ == null) {
        ensureAttributesIsMutable();
        attributes_.set(index, builderForValue.build());
        onChanged();
      } else {
        attributesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }

    /**
     * <pre>
     * The set of key/value pairs that uniquely identify the timeseries from
     * where this point belongs. The list may be empty (may contain 0 elements).
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;</code>
     */
    public Builder addAttributes(io.opentelemetry.proto.common.v1.KeyValue value) {
      if (attributesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAttributesIsMutable();
        attributes_.add(value);
        onChanged();
      } else {
        attributesBuilder_.addMessage(value);
      }
      return this;
    }

    /**
     * <pre>
     * The set of key/value pairs that uniquely identify the timeseries from
     * where this point belongs. The list may be empty (may contain 0 elements).
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;</code>
     */
    public Builder addAttributes(int index, io.opentelemetry.proto.common.v1.KeyValue value) {
      if (attributesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAttributesIsMutable();
        attributes_.add(index, value);
        onChanged();
      } else {
        attributesBuilder_.addMessage(index, value);
      }
      return this;
    }

    /**
     * <pre>
     * The set of key/value pairs that uniquely identify the timeseries from
     * where this point belongs. The list may be empty (may contain 0 elements).
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;</code>
     */
    public Builder addAttributes(
        io.opentelemetry.proto.common.v1.KeyValue.Builder builderForValue) {
      if (attributesBuilder_ == null) {
        ensureAttributesIsMutable();
        attributes_.add(builderForValue.build());
        onChanged();
      } else {
        attributesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }

    /**
     * <pre>
     * The set of key/value pairs that uniquely identify the timeseries from
     * where this point belongs. The list may be empty (may contain 0 elements).
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;</code>
     */
    public Builder addAttributes(int index,
        io.opentelemetry.proto.common.v1.KeyValue.Builder builderForValue) {
      if (attributesBuilder_ == null) {
        ensureAttributesIsMutable();
        attributes_.add(index, builderForValue.build());
        onChanged();
      } else {
        attributesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }

    /**
     * <pre>
     * The set of key/value pairs that uniquely identify the timeseries from
     * where this point belongs. The list may be empty (may contain 0 elements).
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;</code>
     */
    public Builder addAllAttributes(
        java.lang.Iterable<? extends io.opentelemetry.proto.common.v1.KeyValue> values) {
      if (attributesBuilder_ == null) {
        ensureAttributesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(values, attributes_);
        onChanged();
      } else {
        attributesBuilder_.addAllMessages(values);
      }
      return this;
    }

    /**
     * <pre>
     * The set of key/value pairs that uniquely identify the timeseries from
     * where this point belongs. The list may be empty (may contain 0 elements).
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;</code>
     */
    public Builder clearAttributes() {
      if (attributesBuilder_ == null) {
        attributes_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        attributesBuilder_.clear();
      }
      return this;
    }

    /**
     * <pre>
     * The set of key/value pairs that uniquely identify the timeseries from
     * where this point belongs. The list may be empty (may contain 0 elements).
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;</code>
     */
    public Builder removeAttributes(int index) {
      if (attributesBuilder_ == null) {
        ensureAttributesIsMutable();
        attributes_.remove(index);
        onChanged();
      } else {
        attributesBuilder_.remove(index);
      }
      return this;
    }

    /**
     * <pre>
     * The set of key/value pairs that uniquely identify the timeseries from
     * where this point belongs. The list may be empty (may contain 0 elements).
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;</code>
     */
    public io.opentelemetry.proto.common.v1.KeyValue.Builder getAttributesBuilder(int index) {
      return getAttributesFieldBuilder().getBuilder(index);
    }

    /**
     * <pre>
     * The set of key/value pairs that uniquely identify the timeseries from
     * where this point belongs. The list may be empty (may contain 0 elements).
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;</code>
     */
    public io.opentelemetry.proto.common.v1.KeyValueOrBuilder getAttributesOrBuilder(int index) {
      if (attributesBuilder_ == null) {
        return attributes_.get(index);
      } else {
        return attributesBuilder_.getMessageOrBuilder(index);
      }
    }

    /**
     * <pre>
     * The set of key/value pairs that uniquely identify the timeseries from
     * where this point belongs. The list may be empty (may contain 0 elements).
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;</code>
     */
    public java.util.List<? extends io.opentelemetry.proto.common.v1.KeyValueOrBuilder> getAttributesOrBuilderList() {
      if (attributesBuilder_ != null) {
        return attributesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(attributes_);
      }
    }

    /**
     * <pre>
     * The set of key/value pairs that uniquely identify the timeseries from
     * where this point belongs. The list may be empty (may contain 0 elements).
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;</code>
     */
    public io.opentelemetry.proto.common.v1.KeyValue.Builder addAttributesBuilder() {
      return getAttributesFieldBuilder()
          .addBuilder(io.opentelemetry.proto.common.v1.KeyValue.getDefaultInstance());
    }

    /**
     * <pre>
     * The set of key/value pairs that uniquely identify the timeseries from
     * where this point belongs. The list may be empty (may contain 0 elements).
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;</code>
     */
    public io.opentelemetry.proto.common.v1.KeyValue.Builder addAttributesBuilder(int index) {
      return getAttributesFieldBuilder().addBuilder(index,
          io.opentelemetry.proto.common.v1.KeyValue.getDefaultInstance());
    }

    /**
     * <pre>
     * The set of key/value pairs that uniquely identify the timeseries from
     * where this point belongs. The list may be empty (may contain 0 elements).
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;</code>
     */
    public java.util.List<io.opentelemetry.proto.common.v1.KeyValue.Builder> getAttributesBuilderList() {
      return getAttributesFieldBuilder().getBuilderList();
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<io.opentelemetry.proto.common.v1.KeyValue, io.opentelemetry.proto.common.v1.KeyValue.Builder, io.opentelemetry.proto.common.v1.KeyValueOrBuilder> getAttributesFieldBuilder() {
      if (attributesBuilder_ == null) {
        attributesBuilder_ =
            new com.google.protobuf.RepeatedFieldBuilderV3<io.opentelemetry.proto.common.v1.KeyValue, io.opentelemetry.proto.common.v1.KeyValue.Builder, io.opentelemetry.proto.common.v1.KeyValueOrBuilder>(
                attributes_, ((bitField0_ & 0x00000001) != 0), getParentForChildren(), isClean());
        attributes_ = null;
      }
      return attributesBuilder_;
    }

    private long startTimeUnixNano_;

    /**
     * <pre>
     * StartTimeUnixNano is optional but strongly encouraged, see the
     * the detailed comments above Metric.
     * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
     * 1970.
     * </pre>
     *
     * <code>fixed64 start_time_unix_nano = 2;</code>
     */
    public long getStartTimeUnixNano() {
      return startTimeUnixNano_;
    }

    /**
     * <pre>
     * StartTimeUnixNano is optional but strongly encouraged, see the
     * the detailed comments above Metric.
     * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
     * 1970.
     * </pre>
     *
     * <code>fixed64 start_time_unix_nano = 2;</code>
     */
    public Builder setStartTimeUnixNano(long value) {

      startTimeUnixNano_ = value;
      onChanged();
      return this;
    }

    /**
     * <pre>
     * StartTimeUnixNano is optional but strongly encouraged, see the
     * the detailed comments above Metric.
     * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
     * 1970.
     * </pre>
     *
     * <code>fixed64 start_time_unix_nano = 2;</code>
     */
    public Builder clearStartTimeUnixNano() {

      startTimeUnixNano_ = 0L;
      onChanged();
      return this;
    }

    private long timeUnixNano_;

    /**
     * <pre>
     * TimeUnixNano is required, see the detailed comments above Metric.
     * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
     * 1970.
     * </pre>
     *
     * <code>fixed64 time_unix_nano = 3;</code>
     */
    public long getTimeUnixNano() {
      return timeUnixNano_;
    }

    /**
     * <pre>
     * TimeUnixNano is required, see the detailed comments above Metric.
     * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
     * 1970.
     * </pre>
     *
     * <code>fixed64 time_unix_nano = 3;</code>
     */
    public Builder setTimeUnixNano(long value) {

      timeUnixNano_ = value;
      onChanged();
      return this;
    }

    /**
     * <pre>
     * TimeUnixNano is required, see the detailed comments above Metric.
     * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
     * 1970.
     * </pre>
     *
     * <code>fixed64 time_unix_nano = 3;</code>
     */
    public Builder clearTimeUnixNano() {

      timeUnixNano_ = 0L;
      onChanged();
      return this;
    }

    private long count_;

    /**
     * <pre>
     * count is the number of values in the population. Must be non-negative.
     * </pre>
     *
     * <code>fixed64 count = 4;</code>
     */
    public long getCount() {
      return count_;
    }

    /**
     * <pre>
     * count is the number of values in the population. Must be non-negative.
     * </pre>
     *
     * <code>fixed64 count = 4;</code>
     */
    public Builder setCount(long value) {

      count_ = value;
      onChanged();
      return this;
    }

    /**
     * <pre>
     * count is the number of values in the population. Must be non-negative.
     * </pre>
     *
     * <code>fixed64 count = 4;</code>
     */
    public Builder clearCount() {

      count_ = 0L;
      onChanged();
      return this;
    }

    private double sum_;

    /**
     * <pre>
     * sum of the values in the population. If count is zero then this field
     * must be zero.
     * Note: Sum should only be filled out when measuring non-negative discrete
     * events, and is assumed to be monotonic over the values of these events.
     * Negative events *can* be recorded, but sum should not be filled out when
     * doing so.  This is specifically to enforce compatibility w/ OpenMetrics,
     * see: https://github.com/OpenObservability/OpenMetrics/blob/main/specification/OpenMetrics.md#summary
     * </pre>
     *
     * <code>double sum = 5;</code>
     */
    public double getSum() {
      return sum_;
    }

    /**
     * <pre>
     * sum of the values in the population. If count is zero then this field
     * must be zero.
     * Note: Sum should only be filled out when measuring non-negative discrete
     * events, and is assumed to be monotonic over the values of these events.
     * Negative events *can* be recorded, but sum should not be filled out when
     * doing so.  This is specifically to enforce compatibility w/ OpenMetrics,
     * see: https://github.com/OpenObservability/OpenMetrics/blob/main/specification/OpenMetrics.md#summary
     * </pre>
     *
     * <code>double sum = 5;</code>
     */
    public Builder setSum(double value) {

      sum_ = value;
      onChanged();
      return this;
    }

    /**
     * <pre>
     * sum of the values in the population. If count is zero then this field
     * must be zero.
     * Note: Sum should only be filled out when measuring non-negative discrete
     * events, and is assumed to be monotonic over the values of these events.
     * Negative events *can* be recorded, but sum should not be filled out when
     * doing so.  This is specifically to enforce compatibility w/ OpenMetrics,
     * see: https://github.com/OpenObservability/OpenMetrics/blob/main/specification/OpenMetrics.md#summary
     * </pre>
     *
     * <code>double sum = 5;</code>
     */
    public Builder clearSum() {

      sum_ = 0D;
      onChanged();
      return this;
    }

    private java.util.List<io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile> quantileValues_ =
        java.util.Collections.emptyList();

    private void ensureQuantileValuesIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        quantileValues_ =
            new java.util.ArrayList<io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile>(
                quantileValues_);
        bitField0_ |= 0x00000002;
      }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile, io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.Builder, io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantileOrBuilder> quantileValuesBuilder_;

    /**
     * <pre>
     * (Optional) list of values at different quantiles of the distribution calculated
     * from the current snapshot. The quantiles must be strictly increasing.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile quantile_values = 6;</code>
     */
    public java.util.List<io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile> getQuantileValuesList() {
      if (quantileValuesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(quantileValues_);
      } else {
        return quantileValuesBuilder_.getMessageList();
      }
    }

    /**
     * <pre>
     * (Optional) list of values at different quantiles of the distribution calculated
     * from the current snapshot. The quantiles must be strictly increasing.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile quantile_values = 6;</code>
     */
    public int getQuantileValuesCount() {
      if (quantileValuesBuilder_ == null) {
        return quantileValues_.size();
      } else {
        return quantileValuesBuilder_.getCount();
      }
    }

    /**
     * <pre>
     * (Optional) list of values at different quantiles of the distribution calculated
     * from the current snapshot. The quantiles must be strictly increasing.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile quantile_values = 6;</code>
     */
    public io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile getQuantileValues(
        int index) {
      if (quantileValuesBuilder_ == null) {
        return quantileValues_.get(index);
      } else {
        return quantileValuesBuilder_.getMessage(index);
      }
    }

    /**
     * <pre>
     * (Optional) list of values at different quantiles of the distribution calculated
     * from the current snapshot. The quantiles must be strictly increasing.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile quantile_values = 6;</code>
     */
    public Builder setQuantileValues(int index,
        io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile value) {
      if (quantileValuesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureQuantileValuesIsMutable();
        quantileValues_.set(index, value);
        onChanged();
      } else {
        quantileValuesBuilder_.setMessage(index, value);
      }
      return this;
    }

    /**
     * <pre>
     * (Optional) list of values at different quantiles of the distribution calculated
     * from the current snapshot. The quantiles must be strictly increasing.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile quantile_values = 6;</code>
     */
    public Builder setQuantileValues(int index,
        io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.Builder builderForValue) {
      if (quantileValuesBuilder_ == null) {
        ensureQuantileValuesIsMutable();
        quantileValues_.set(index, builderForValue.build());
        onChanged();
      } else {
        quantileValuesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }

    /**
     * <pre>
     * (Optional) list of values at different quantiles of the distribution calculated
     * from the current snapshot. The quantiles must be strictly increasing.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile quantile_values = 6;</code>
     */
    public Builder addQuantileValues(
        io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile value) {
      if (quantileValuesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureQuantileValuesIsMutable();
        quantileValues_.add(value);
        onChanged();
      } else {
        quantileValuesBuilder_.addMessage(value);
      }
      return this;
    }

    /**
     * <pre>
     * (Optional) list of values at different quantiles of the distribution calculated
     * from the current snapshot. The quantiles must be strictly increasing.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile quantile_values = 6;</code>
     */
    public Builder addQuantileValues(int index,
        io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile value) {
      if (quantileValuesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureQuantileValuesIsMutable();
        quantileValues_.add(index, value);
        onChanged();
      } else {
        quantileValuesBuilder_.addMessage(index, value);
      }
      return this;
    }

    /**
     * <pre>
     * (Optional) list of values at different quantiles of the distribution calculated
     * from the current snapshot. The quantiles must be strictly increasing.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile quantile_values = 6;</code>
     */
    public Builder addQuantileValues(
        io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.Builder builderForValue) {
      if (quantileValuesBuilder_ == null) {
        ensureQuantileValuesIsMutable();
        quantileValues_.add(builderForValue.build());
        onChanged();
      } else {
        quantileValuesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }

    /**
     * <pre>
     * (Optional) list of values at different quantiles of the distribution calculated
     * from the current snapshot. The quantiles must be strictly increasing.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile quantile_values = 6;</code>
     */
    public Builder addQuantileValues(int index,
        io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.Builder builderForValue) {
      if (quantileValuesBuilder_ == null) {
        ensureQuantileValuesIsMutable();
        quantileValues_.add(index, builderForValue.build());
        onChanged();
      } else {
        quantileValuesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }

    /**
     * <pre>
     * (Optional) list of values at different quantiles of the distribution calculated
     * from the current snapshot. The quantiles must be strictly increasing.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile quantile_values = 6;</code>
     */
    public Builder addAllQuantileValues(
        java.lang.Iterable<? extends io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile> values) {
      if (quantileValuesBuilder_ == null) {
        ensureQuantileValuesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(values, quantileValues_);
        onChanged();
      } else {
        quantileValuesBuilder_.addAllMessages(values);
      }
      return this;
    }

    /**
     * <pre>
     * (Optional) list of values at different quantiles of the distribution calculated
     * from the current snapshot. The quantiles must be strictly increasing.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile quantile_values = 6;</code>
     */
    public Builder clearQuantileValues() {
      if (quantileValuesBuilder_ == null) {
        quantileValues_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        quantileValuesBuilder_.clear();
      }
      return this;
    }

    /**
     * <pre>
     * (Optional) list of values at different quantiles of the distribution calculated
     * from the current snapshot. The quantiles must be strictly increasing.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile quantile_values = 6;</code>
     */
    public Builder removeQuantileValues(int index) {
      if (quantileValuesBuilder_ == null) {
        ensureQuantileValuesIsMutable();
        quantileValues_.remove(index);
        onChanged();
      } else {
        quantileValuesBuilder_.remove(index);
      }
      return this;
    }

    /**
     * <pre>
     * (Optional) list of values at different quantiles of the distribution calculated
     * from the current snapshot. The quantiles must be strictly increasing.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile quantile_values = 6;</code>
     */
    public io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.Builder getQuantileValuesBuilder(
        int index) {
      return getQuantileValuesFieldBuilder().getBuilder(index);
    }

    /**
     * <pre>
     * (Optional) list of values at different quantiles of the distribution calculated
     * from the current snapshot. The quantiles must be strictly increasing.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile quantile_values = 6;</code>
     */
    public io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantileOrBuilder getQuantileValuesOrBuilder(
        int index) {
      if (quantileValuesBuilder_ == null) {
        return quantileValues_.get(index);
      } else {
        return quantileValuesBuilder_.getMessageOrBuilder(index);
      }
    }

    /**
     * <pre>
     * (Optional) list of values at different quantiles of the distribution calculated
     * from the current snapshot. The quantiles must be strictly increasing.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile quantile_values = 6;</code>
     */
    public java.util.List<? extends io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantileOrBuilder> getQuantileValuesOrBuilderList() {
      if (quantileValuesBuilder_ != null) {
        return quantileValuesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(quantileValues_);
      }
    }

    /**
     * <pre>
     * (Optional) list of values at different quantiles of the distribution calculated
     * from the current snapshot. The quantiles must be strictly increasing.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile quantile_values = 6;</code>
     */
    public io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.Builder addQuantileValuesBuilder() {
      return getQuantileValuesFieldBuilder().addBuilder(
          io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.getDefaultInstance());
    }

    /**
     * <pre>
     * (Optional) list of values at different quantiles of the distribution calculated
     * from the current snapshot. The quantiles must be strictly increasing.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile quantile_values = 6;</code>
     */
    public io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.Builder addQuantileValuesBuilder(
        int index) {
      return getQuantileValuesFieldBuilder().addBuilder(index,
          io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.getDefaultInstance());
    }

    /**
     * <pre>
     * (Optional) list of values at different quantiles of the distribution calculated
     * from the current snapshot. The quantiles must be strictly increasing.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile quantile_values = 6;</code>
     */
    public java.util.List<io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.Builder> getQuantileValuesBuilderList() {
      return getQuantileValuesFieldBuilder().getBuilderList();
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile, io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.Builder, io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantileOrBuilder> getQuantileValuesFieldBuilder() {
      if (quantileValuesBuilder_ == null) {
        quantileValuesBuilder_ =
            new com.google.protobuf.RepeatedFieldBuilderV3<io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile, io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.Builder, io.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantileOrBuilder>(
                quantileValues_, ((bitField0_ & 0x00000002) != 0), getParentForChildren(),
                isClean());
        quantileValues_ = null;
      }
      return quantileValuesBuilder_;
    }

    private int flags_;

    /**
     * <pre>
     * Flags that apply to this specific data point.  See DataPointFlags
     * for the available flags and their meaning.
     * </pre>
     *
     * <code>uint32 flags = 8;</code>
     */
    public int getFlags() {
      return flags_;
    }

    /**
     * <pre>
     * Flags that apply to this specific data point.  See DataPointFlags
     * for the available flags and their meaning.
     * </pre>
     *
     * <code>uint32 flags = 8;</code>
     */
    public Builder setFlags(int value) {

      flags_ = value;
      onChanged();
      return this;
    }

    /**
     * <pre>
     * Flags that apply to this specific data point.  See DataPointFlags
     * for the available flags and their meaning.
     * </pre>
     *
     * <code>uint32 flags = 8;</code>
     */
    public Builder clearFlags() {

      flags_ = 0;
      onChanged();
      return this;
    }

    @java.lang.Override
    public final Builder setUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:opentelemetry.proto.metrics.v1.SummaryDataPoint)
  }

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.v1.SummaryDataPoint)
  private static final io.opentelemetry.proto.metrics.v1.SummaryDataPoint DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.opentelemetry.proto.metrics.v1.SummaryDataPoint();
  }

  public static io.opentelemetry.proto.metrics.v1.SummaryDataPoint getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<SummaryDataPoint> PARSER =
      new com.google.protobuf.AbstractParser<SummaryDataPoint>() {
        @java.lang.Override
        public SummaryDataPoint parsePartialFrom(com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new SummaryDataPoint(input, extensionRegistry);
        }
      };

  public static com.google.protobuf.Parser<SummaryDataPoint> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<SummaryDataPoint> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.opentelemetry.proto.metrics.v1.SummaryDataPoint getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

