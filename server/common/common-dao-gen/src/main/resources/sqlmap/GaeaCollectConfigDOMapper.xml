<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.holoinsight.server.common.dao.mapper.GaeaCollectConfigDOMapper">
  <resultMap id="BaseResultMap" type="io.holoinsight.server.common.dao.entity.GaeaCollectConfigDO">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="gmt_create" jdbcType="TIMESTAMP" property="gmtCreate" />
    <result column="gmt_modified" jdbcType="TIMESTAMP" property="gmtModified" />
    <result column="tenant" jdbcType="VARCHAR" property="tenant" />
    <result column="table_name" jdbcType="VARCHAR" property="tableName" />
    <result column="deleted" jdbcType="INTEGER" property="deleted" />
    <result column="version" jdbcType="BIGINT" property="version" />
    <result column="ref_id" jdbcType="VARCHAR" property="refId" />
    <result column="biz_tenant" jdbcType="VARCHAR" property="bizTenant" />
    <result column="type" jdbcType="VARCHAR" property="type" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="io.holoinsight.server.common.dao.entity.GaeaCollectConfigDO">
    <result column="json" jdbcType="LONGVARCHAR" property="json" />
    <result column="collect_range" jdbcType="LONGVARCHAR" property="collectRange" />
    <result column="executor_selector" jdbcType="LONGVARCHAR" property="executorSelector" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, gmt_create, gmt_modified, tenant, `table_name`, deleted, version, ref_id, biz_tenant, 
    `type`
  </sql>
  <sql id="Blob_Column_List">
    json, collect_range, executor_selector
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="io.holoinsight.server.common.dao.entity.GaeaCollectConfigDOExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from gaea_collect_config
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="rows != null">
      <if test="offset != null">
        limit ${offset}, ${rows}
      </if>
      <if test="offset == null">
        limit ${rows}
      </if>
    </if>
  </select>
  <select id="selectByExample" parameterType="io.holoinsight.server.common.dao.entity.GaeaCollectConfigDOExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from gaea_collect_config
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="rows != null">
      <if test="offset != null">
        limit ${offset}, ${rows}
      </if>
      <if test="offset == null">
        limit ${rows}
      </if>
    </if>
  </select>
  <select id="selectByExampleSelective" parameterType="map" resultMap="ResultMapWithBLOBs">
    select
    <if test="example != null and example.distinct">
      distinct
    </if>
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.aliasedEscapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <include refid="Base_Column_List" />
        ,
        <include refid="Blob_Column_List" />
      </otherwise>
    </choose>
    from gaea_collect_config
    <if test="example != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
    <if test="example != null and example.orderByClause != null">
      order by ${example.orderByClause}
    </if>
    <if test="example != null and example.rows != null">
      <if test="example.offset != null">
        limit ${example.offset}, ${example.rows}
      </if>
      <if test="example.offset == null">
        limit ${example.rows}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from gaea_collect_config
    where id = #{id,jdbcType=BIGINT}
  </select>
  <select id="selectByPrimaryKeySelective" parameterType="map" resultMap="ResultMapWithBLOBs">
    select
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.aliasedEscapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <include refid="Base_Column_List" />
        ,
        <include refid="Blob_Column_List" />
      </otherwise>
    </choose>
    from gaea_collect_config
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from gaea_collect_config
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="io.holoinsight.server.common.dao.entity.GaeaCollectConfigDOExample">
    delete from gaea_collect_config
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="io.holoinsight.server.common.dao.entity.GaeaCollectConfigDO" useGeneratedKeys="true">
    insert into gaea_collect_config (gmt_create, gmt_modified, tenant, 
      `table_name`, deleted, version, 
      ref_id, biz_tenant, `type`, 
      json, collect_range, executor_selector
      )
    values (#{gmtCreate,jdbcType=TIMESTAMP}, #{gmtModified,jdbcType=TIMESTAMP}, #{tenant,jdbcType=VARCHAR}, 
      #{tableName,jdbcType=VARCHAR}, #{deleted,jdbcType=INTEGER}, #{version,jdbcType=BIGINT}, 
      #{refId,jdbcType=VARCHAR}, #{bizTenant,jdbcType=VARCHAR}, #{type,jdbcType=VARCHAR}, 
      #{json,jdbcType=LONGVARCHAR}, #{collectRange,jdbcType=LONGVARCHAR}, #{executorSelector,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="record.id" parameterType="map" useGeneratedKeys="true">
    insert into gaea_collect_config
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          ${column.escapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.gmtCreate != null">
            gmt_create,
          </if>
          <if test="record.gmtModified != null">
            gmt_modified,
          </if>
          <if test="record.tenant != null">
            tenant,
          </if>
          <if test="record.tableName != null">
            `table_name`,
          </if>
          <if test="record.deleted != null">
            deleted,
          </if>
          <if test="record.version != null">
            version,
          </if>
          <if test="record.refId != null">
            ref_id,
          </if>
          <if test="record.bizTenant != null">
            biz_tenant,
          </if>
          <if test="record.type != null">
            `type`,
          </if>
          <if test="record.json != null">
            json,
          </if>
          <if test="record.collectRange != null">
            collect_range,
          </if>
          <if test="record.executorSelector != null">
            executor_selector,
          </if>
        </trim>
        <trim prefix="(" suffix=")" suffixOverrides="," />
      </otherwise>
    </choose>
    values
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.gmtCreate != null">
            #{record.gmtCreate,jdbcType=TIMESTAMP},
          </if>
          <if test="record.gmtModified != null">
            #{record.gmtModified,jdbcType=TIMESTAMP},
          </if>
          <if test="record.tenant != null">
            #{record.tenant,jdbcType=VARCHAR},
          </if>
          <if test="record.tableName != null">
            #{record.tableName,jdbcType=VARCHAR},
          </if>
          <if test="record.deleted != null">
            #{record.deleted,jdbcType=INTEGER},
          </if>
          <if test="record.version != null">
            #{record.version,jdbcType=BIGINT},
          </if>
          <if test="record.refId != null">
            #{record.refId,jdbcType=VARCHAR},
          </if>
          <if test="record.bizTenant != null">
            #{record.bizTenant,jdbcType=VARCHAR},
          </if>
          <if test="record.type != null">
            #{record.type,jdbcType=VARCHAR},
          </if>
          <if test="record.json != null">
            #{record.json,jdbcType=LONGVARCHAR},
          </if>
          <if test="record.collectRange != null">
            #{record.collectRange,jdbcType=LONGVARCHAR},
          </if>
          <if test="record.executorSelector != null">
            #{record.executorSelector,jdbcType=LONGVARCHAR},
          </if>
        </trim>
      </otherwise>
    </choose>
  </insert>
  <select id="countByExample" parameterType="io.holoinsight.server.common.dao.entity.GaeaCollectConfigDOExample" resultType="java.lang.Long">
    select count(*) from gaea_collect_config
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update gaea_collect_config
    SET
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.id != null">
            id = #{record.id,jdbcType=BIGINT},
          </if>
          <if test="record.gmtCreate != null">
            gmt_create = #{record.gmtCreate,jdbcType=TIMESTAMP},
          </if>
          <if test="record.gmtModified != null">
            gmt_modified = #{record.gmtModified,jdbcType=TIMESTAMP},
          </if>
          <if test="record.tenant != null">
            tenant = #{record.tenant,jdbcType=VARCHAR},
          </if>
          <if test="record.tableName != null">
            `table_name` = #{record.tableName,jdbcType=VARCHAR},
          </if>
          <if test="record.deleted != null">
            deleted = #{record.deleted,jdbcType=INTEGER},
          </if>
          <if test="record.version != null">
            version = #{record.version,jdbcType=BIGINT},
          </if>
          <if test="record.refId != null">
            ref_id = #{record.refId,jdbcType=VARCHAR},
          </if>
          <if test="record.bizTenant != null">
            biz_tenant = #{record.bizTenant,jdbcType=VARCHAR},
          </if>
          <if test="record.type != null">
            `type` = #{record.type,jdbcType=VARCHAR},
          </if>
          <if test="record.json != null">
            json = #{record.json,jdbcType=LONGVARCHAR},
          </if>
          <if test="record.collectRange != null">
            collect_range = #{record.collectRange,jdbcType=LONGVARCHAR},
          </if>
          <if test="record.executorSelector != null">
            executor_selector = #{record.executorSelector,jdbcType=LONGVARCHAR},
          </if>
        </trim>
      </otherwise>
    </choose>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update gaea_collect_config
    set id = #{record.id,jdbcType=BIGINT},
      gmt_create = #{record.gmtCreate,jdbcType=TIMESTAMP},
      gmt_modified = #{record.gmtModified,jdbcType=TIMESTAMP},
      tenant = #{record.tenant,jdbcType=VARCHAR},
      `table_name` = #{record.tableName,jdbcType=VARCHAR},
      deleted = #{record.deleted,jdbcType=INTEGER},
      version = #{record.version,jdbcType=BIGINT},
      ref_id = #{record.refId,jdbcType=VARCHAR},
      biz_tenant = #{record.bizTenant,jdbcType=VARCHAR},
      `type` = #{record.type,jdbcType=VARCHAR},
      json = #{record.json,jdbcType=LONGVARCHAR},
      collect_range = #{record.collectRange,jdbcType=LONGVARCHAR},
      executor_selector = #{record.executorSelector,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update gaea_collect_config
    set id = #{record.id,jdbcType=BIGINT},
      gmt_create = #{record.gmtCreate,jdbcType=TIMESTAMP},
      gmt_modified = #{record.gmtModified,jdbcType=TIMESTAMP},
      tenant = #{record.tenant,jdbcType=VARCHAR},
      `table_name` = #{record.tableName,jdbcType=VARCHAR},
      deleted = #{record.deleted,jdbcType=INTEGER},
      version = #{record.version,jdbcType=BIGINT},
      ref_id = #{record.refId,jdbcType=VARCHAR},
      biz_tenant = #{record.bizTenant,jdbcType=VARCHAR},
      `type` = #{record.type,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="map">
    update gaea_collect_config
    SET
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.gmtCreate != null">
            gmt_create = #{record.gmtCreate,jdbcType=TIMESTAMP},
          </if>
          <if test="record.gmtModified != null">
            gmt_modified = #{record.gmtModified,jdbcType=TIMESTAMP},
          </if>
          <if test="record.tenant != null">
            tenant = #{record.tenant,jdbcType=VARCHAR},
          </if>
          <if test="record.tableName != null">
            `table_name` = #{record.tableName,jdbcType=VARCHAR},
          </if>
          <if test="record.deleted != null">
            deleted = #{record.deleted,jdbcType=INTEGER},
          </if>
          <if test="record.version != null">
            version = #{record.version,jdbcType=BIGINT},
          </if>
          <if test="record.refId != null">
            ref_id = #{record.refId,jdbcType=VARCHAR},
          </if>
          <if test="record.bizTenant != null">
            biz_tenant = #{record.bizTenant,jdbcType=VARCHAR},
          </if>
          <if test="record.type != null">
            `type` = #{record.type,jdbcType=VARCHAR},
          </if>
          <if test="record.json != null">
            json = #{record.json,jdbcType=LONGVARCHAR},
          </if>
          <if test="record.collectRange != null">
            collect_range = #{record.collectRange,jdbcType=LONGVARCHAR},
          </if>
          <if test="record.executorSelector != null">
            executor_selector = #{record.executorSelector,jdbcType=LONGVARCHAR},
          </if>
        </trim>
      </otherwise>
    </choose>
    where id = #{record.id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="io.holoinsight.server.common.dao.entity.GaeaCollectConfigDO">
    update gaea_collect_config
    set gmt_create = #{gmtCreate,jdbcType=TIMESTAMP},
      gmt_modified = #{gmtModified,jdbcType=TIMESTAMP},
      tenant = #{tenant,jdbcType=VARCHAR},
      `table_name` = #{tableName,jdbcType=VARCHAR},
      deleted = #{deleted,jdbcType=INTEGER},
      version = #{version,jdbcType=BIGINT},
      ref_id = #{refId,jdbcType=VARCHAR},
      biz_tenant = #{bizTenant,jdbcType=VARCHAR},
      `type` = #{type,jdbcType=VARCHAR},
      json = #{json,jdbcType=LONGVARCHAR},
      collect_range = #{collectRange,jdbcType=LONGVARCHAR},
      executor_selector = #{executorSelector,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="io.holoinsight.server.common.dao.entity.GaeaCollectConfigDO">
    update gaea_collect_config
    set gmt_create = #{gmtCreate,jdbcType=TIMESTAMP},
      gmt_modified = #{gmtModified,jdbcType=TIMESTAMP},
      tenant = #{tenant,jdbcType=VARCHAR},
      `table_name` = #{tableName,jdbcType=VARCHAR},
      deleted = #{deleted,jdbcType=INTEGER},
      version = #{version,jdbcType=BIGINT},
      ref_id = #{refId,jdbcType=VARCHAR},
      biz_tenant = #{bizTenant,jdbcType=VARCHAR},
      `type` = #{type,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <select id="selectOneByExample" parameterType="io.holoinsight.server.common.dao.entity.GaeaCollectConfigDOExample" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from gaea_collect_config
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    limit 1
  </select>
  <select id="selectOneByExampleWithBLOBs" parameterType="io.holoinsight.server.common.dao.entity.GaeaCollectConfigDOExample" resultMap="ResultMapWithBLOBs">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from gaea_collect_config
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    limit 1
  </select>
  <select id="selectOneByExampleSelective" parameterType="map" resultMap="ResultMapWithBLOBs">
    select
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.aliasedEscapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <include refid="Base_Column_List" />
        ,
        <include refid="Blob_Column_List" />
      </otherwise>
    </choose>
    from gaea_collect_config
    <if test="example != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
    <if test="example != null and example.orderByClause != null">
      order by ${example.orderByClause}
    </if>
    limit 1
  </select>
  <insert id="batchInsert" keyColumn="id" keyProperty="id" parameterType="map" useGeneratedKeys="true">
    insert into gaea_collect_config
    (gmt_create, gmt_modified, tenant, `table_name`, deleted, version, ref_id, biz_tenant, 
      `type`, json, collect_range, executor_selector)
    values
    <foreach collection="list" item="item" separator=",">
      (#{item.gmtCreate,jdbcType=TIMESTAMP}, #{item.gmtModified,jdbcType=TIMESTAMP}, #{item.tenant,jdbcType=VARCHAR}, 
        #{item.tableName,jdbcType=VARCHAR}, #{item.deleted,jdbcType=INTEGER}, #{item.version,jdbcType=BIGINT}, 
        #{item.refId,jdbcType=VARCHAR}, #{item.bizTenant,jdbcType=VARCHAR}, #{item.type,jdbcType=VARCHAR}, 
        #{item.json,jdbcType=LONGVARCHAR}, #{item.collectRange,jdbcType=LONGVARCHAR}, #{item.executorSelector,jdbcType=LONGVARCHAR}
        )
    </foreach>
  </insert>
  <insert id="batchInsertSelective" keyColumn="id" keyProperty="list.id" parameterType="map" useGeneratedKeys="true">
    insert into gaea_collect_config (
    <foreach collection="selective" item="column" separator=",">
      ${column.escapedColumnName}
    </foreach>
    )
    values
    <foreach collection="list" item="item" separator=",">
      (
      <foreach collection="selective" item="column" separator=",">
        <if test="'gmt_create'.toString() == column.value">
          #{item.gmtCreate,jdbcType=TIMESTAMP}
        </if>
        <if test="'gmt_modified'.toString() == column.value">
          #{item.gmtModified,jdbcType=TIMESTAMP}
        </if>
        <if test="'tenant'.toString() == column.value">
          #{item.tenant,jdbcType=VARCHAR}
        </if>
        <if test="'table_name'.toString() == column.value">
          #{item.tableName,jdbcType=VARCHAR}
        </if>
        <if test="'deleted'.toString() == column.value">
          #{item.deleted,jdbcType=INTEGER}
        </if>
        <if test="'version'.toString() == column.value">
          #{item.version,jdbcType=BIGINT}
        </if>
        <if test="'ref_id'.toString() == column.value">
          #{item.refId,jdbcType=VARCHAR}
        </if>
        <if test="'biz_tenant'.toString() == column.value">
          #{item.bizTenant,jdbcType=VARCHAR}
        </if>
        <if test="'type'.toString() == column.value">
          #{item.type,jdbcType=VARCHAR}
        </if>
        <if test="'json'.toString() == column.value">
          #{item.json,jdbcType=LONGVARCHAR}
        </if>
        <if test="'collect_range'.toString() == column.value">
          #{item.collectRange,jdbcType=LONGVARCHAR}
        </if>
        <if test="'executor_selector'.toString() == column.value">
          #{item.executorSelector,jdbcType=LONGVARCHAR}
        </if>
      </foreach>
      )
    </foreach>
  </insert>
  <insert id="upsertSelective" keyColumn="id" keyProperty="record.id" parameterType="map" useGeneratedKeys="true">
    insert into gaea_collect_config
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          ${column.escapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.id != null">
            id,
          </if>
          <if test="record.gmtCreate != null">
            gmt_create,
          </if>
          <if test="record.gmtModified != null">
            gmt_modified,
          </if>
          <if test="record.tenant != null">
            tenant,
          </if>
          <if test="record.tableName != null">
            `table_name`,
          </if>
          <if test="record.deleted != null">
            deleted,
          </if>
          <if test="record.version != null">
            version,
          </if>
          <if test="record.refId != null">
            ref_id,
          </if>
          <if test="record.bizTenant != null">
            biz_tenant,
          </if>
          <if test="record.type != null">
            `type`,
          </if>
          <if test="record.json != null">
            json,
          </if>
          <if test="record.collectRange != null">
            collect_range,
          </if>
          <if test="record.executorSelector != null">
            executor_selector,
          </if>
        </trim>
        <trim prefix="(" suffix=")" suffixOverrides="," />
      </otherwise>
    </choose>
    values
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.id != null">
            #{record.id,jdbcType=BIGINT},
          </if>
          <if test="record.gmtCreate != null">
            #{record.gmtCreate,jdbcType=TIMESTAMP},
          </if>
          <if test="record.gmtModified != null">
            #{record.gmtModified,jdbcType=TIMESTAMP},
          </if>
          <if test="record.tenant != null">
            #{record.tenant,jdbcType=VARCHAR},
          </if>
          <if test="record.tableName != null">
            #{record.tableName,jdbcType=VARCHAR},
          </if>
          <if test="record.deleted != null">
            #{record.deleted,jdbcType=INTEGER},
          </if>
          <if test="record.version != null">
            #{record.version,jdbcType=BIGINT},
          </if>
          <if test="record.refId != null">
            #{record.refId,jdbcType=VARCHAR},
          </if>
          <if test="record.bizTenant != null">
            #{record.bizTenant,jdbcType=VARCHAR},
          </if>
          <if test="record.type != null">
            #{record.type,jdbcType=VARCHAR},
          </if>
          <if test="record.json != null">
            #{record.json,jdbcType=LONGVARCHAR},
          </if>
          <if test="record.collectRange != null">
            #{record.collectRange,jdbcType=LONGVARCHAR},
          </if>
          <if test="record.executorSelector != null">
            #{record.executorSelector,jdbcType=LONGVARCHAR},
          </if>
        </trim>
      </otherwise>
    </choose>
    on duplicate key update 
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.id != null">
            id = #{record.id,jdbcType=BIGINT},
          </if>
          <if test="record.gmtCreate != null">
            gmt_create = #{record.gmtCreate,jdbcType=TIMESTAMP},
          </if>
          <if test="record.gmtModified != null">
            gmt_modified = #{record.gmtModified,jdbcType=TIMESTAMP},
          </if>
          <if test="record.tenant != null">
            tenant = #{record.tenant,jdbcType=VARCHAR},
          </if>
          <if test="record.tableName != null">
            `table_name` = #{record.tableName,jdbcType=VARCHAR},
          </if>
          <if test="record.deleted != null">
            deleted = #{record.deleted,jdbcType=INTEGER},
          </if>
          <if test="record.version != null">
            version = #{record.version,jdbcType=BIGINT},
          </if>
          <if test="record.refId != null">
            ref_id = #{record.refId,jdbcType=VARCHAR},
          </if>
          <if test="record.bizTenant != null">
            biz_tenant = #{record.bizTenant,jdbcType=VARCHAR},
          </if>
          <if test="record.type != null">
            `type` = #{record.type,jdbcType=VARCHAR},
          </if>
          <if test="record.json != null">
            json = #{record.json,jdbcType=LONGVARCHAR},
          </if>
          <if test="record.collectRange != null">
            collect_range = #{record.collectRange,jdbcType=LONGVARCHAR},
          </if>
          <if test="record.executorSelector != null">
            executor_selector = #{record.executorSelector,jdbcType=LONGVARCHAR},
          </if>
        </trim>
      </otherwise>
    </choose>
  </insert>
  <insert id="upsert" keyColumn="id" keyProperty="id" parameterType="io.holoinsight.server.common.dao.entity.GaeaCollectConfigDO" useGeneratedKeys="true">
    insert into gaea_collect_config
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      gmt_create,
      gmt_modified,
      tenant,
      `table_name`,
      deleted,
      version,
      ref_id,
      biz_tenant,
      `type`,
    </trim>
    values
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      #{gmtCreate,jdbcType=TIMESTAMP},
      #{gmtModified,jdbcType=TIMESTAMP},
      #{tenant,jdbcType=VARCHAR},
      #{tableName,jdbcType=VARCHAR},
      #{deleted,jdbcType=INTEGER},
      #{version,jdbcType=BIGINT},
      #{refId,jdbcType=VARCHAR},
      #{bizTenant,jdbcType=VARCHAR},
      #{type,jdbcType=VARCHAR},
    </trim>
    on duplicate key update 
    <trim suffixOverrides=",">
      <if test="id != null">
        id = #{id,jdbcType=BIGINT},
      </if>
      gmt_create = #{gmtCreate,jdbcType=TIMESTAMP},
      gmt_modified = #{gmtModified,jdbcType=TIMESTAMP},
      tenant = #{tenant,jdbcType=VARCHAR},
      `table_name` = #{tableName,jdbcType=VARCHAR},
      deleted = #{deleted,jdbcType=INTEGER},
      version = #{version,jdbcType=BIGINT},
      ref_id = #{refId,jdbcType=VARCHAR},
      biz_tenant = #{bizTenant,jdbcType=VARCHAR},
      `type` = #{type,jdbcType=VARCHAR},
    </trim>
  </insert>
  <insert id="upsertWithBLOBs" keyColumn="id" keyProperty="id" parameterType="io.holoinsight.server.common.dao.entity.GaeaCollectConfigDO" useGeneratedKeys="true">
    insert into gaea_collect_config
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      gmt_create,
      gmt_modified,
      tenant,
      `table_name`,
      deleted,
      version,
      ref_id,
      biz_tenant,
      `type`,
      json,
      collect_range,
      executor_selector,
    </trim>
    values
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      #{gmtCreate,jdbcType=TIMESTAMP},
      #{gmtModified,jdbcType=TIMESTAMP},
      #{tenant,jdbcType=VARCHAR},
      #{tableName,jdbcType=VARCHAR},
      #{deleted,jdbcType=INTEGER},
      #{version,jdbcType=BIGINT},
      #{refId,jdbcType=VARCHAR},
      #{bizTenant,jdbcType=VARCHAR},
      #{type,jdbcType=VARCHAR},
      #{json,jdbcType=LONGVARCHAR},
      #{collectRange,jdbcType=LONGVARCHAR},
      #{executorSelector,jdbcType=LONGVARCHAR},
    </trim>
    on duplicate key update 
    <trim suffixOverrides=",">
      <if test="id != null">
        id = #{id,jdbcType=BIGINT},
      </if>
      gmt_create = #{gmtCreate,jdbcType=TIMESTAMP},
      gmt_modified = #{gmtModified,jdbcType=TIMESTAMP},
      tenant = #{tenant,jdbcType=VARCHAR},
      `table_name` = #{tableName,jdbcType=VARCHAR},
      deleted = #{deleted,jdbcType=INTEGER},
      version = #{version,jdbcType=BIGINT},
      ref_id = #{refId,jdbcType=VARCHAR},
      biz_tenant = #{bizTenant,jdbcType=VARCHAR},
      `type` = #{type,jdbcType=VARCHAR},
      json = #{json,jdbcType=LONGVARCHAR},
      collect_range = #{collectRange,jdbcType=LONGVARCHAR},
      executor_selector = #{executorSelector,jdbcType=LONGVARCHAR},
    </trim>
  </insert>
</mapper>