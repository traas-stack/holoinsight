/*
 * Copyright 2022 Holoinsight Project Authors. Licensed under Apache-2.0.
 */
// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: opentelemetry/proto/trace/v1/trace.proto

package io.opentelemetry.proto.trace.v1;

/**
 * <pre>
 * A Span represents a single operation performed by a single component of the system.
 * The next available field id is 17.
 * </pre>
 *
 * Protobuf type {@code opentelemetry.proto.trace.v1.Span}
 */
public final class Span extends com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:opentelemetry.proto.trace.v1.Span)
    SpanOrBuilder {
  private static final long serialVersionUID = 0L;

  // Use Span.newBuilder() to construct.
  private Span(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }

  private Span() {
    traceId_ = com.google.protobuf.ByteString.EMPTY;
    spanId_ = com.google.protobuf.ByteString.EMPTY;
    traceState_ = "";
    parentSpanId_ = com.google.protobuf.ByteString.EMPTY;
    name_ = "";
    kind_ = 0;
    attributes_ = java.util.Collections.emptyList();
    events_ = java.util.Collections.emptyList();
    links_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
    return new Span();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet getUnknownFields() {
    return this.unknownFields;
  }

  private Span(com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {

            traceId_ = input.readBytes();
            break;
          }
          case 18: {

            spanId_ = input.readBytes();
            break;
          }
          case 26: {
            java.lang.String s = input.readStringRequireUtf8();

            traceState_ = s;
            break;
          }
          case 34: {

            parentSpanId_ = input.readBytes();
            break;
          }
          case 42: {
            java.lang.String s = input.readStringRequireUtf8();

            name_ = s;
            break;
          }
          case 48: {
            int rawValue = input.readEnum();

            kind_ = rawValue;
            break;
          }
          case 57: {

            startTimeUnixNano_ = input.readFixed64();
            break;
          }
          case 65: {

            endTimeUnixNano_ = input.readFixed64();
            break;
          }
          case 74: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              attributes_ = new java.util.ArrayList<io.opentelemetry.proto.common.v1.KeyValue>();
              mutable_bitField0_ |= 0x00000001;
            }
            attributes_.add(input.readMessage(io.opentelemetry.proto.common.v1.KeyValue.parser(),
                extensionRegistry));
            break;
          }
          case 80: {

            droppedAttributesCount_ = input.readUInt32();
            break;
          }
          case 90: {
            if (!((mutable_bitField0_ & 0x00000002) != 0)) {
              events_ = new java.util.ArrayList<io.opentelemetry.proto.trace.v1.Span.Event>();
              mutable_bitField0_ |= 0x00000002;
            }
            events_.add(input.readMessage(io.opentelemetry.proto.trace.v1.Span.Event.parser(),
                extensionRegistry));
            break;
          }
          case 96: {

            droppedEventsCount_ = input.readUInt32();
            break;
          }
          case 106: {
            if (!((mutable_bitField0_ & 0x00000004) != 0)) {
              links_ = new java.util.ArrayList<io.opentelemetry.proto.trace.v1.Span.Link>();
              mutable_bitField0_ |= 0x00000004;
            }
            links_.add(input.readMessage(io.opentelemetry.proto.trace.v1.Span.Link.parser(),
                extensionRegistry));
            break;
          }
          case 112: {

            droppedLinksCount_ = input.readUInt32();
            break;
          }
          case 122: {
            io.opentelemetry.proto.trace.v1.Status.Builder subBuilder = null;
            if (status_ != null) {
              subBuilder = status_.toBuilder();
            }
            status_ = input.readMessage(io.opentelemetry.proto.trace.v1.Status.parser(),
                extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(status_);
              status_ = subBuilder.buildPartial();
            }

            break;
          }
          default: {
            if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        attributes_ = java.util.Collections.unmodifiableList(attributes_);
      }
      if (((mutable_bitField0_ & 0x00000002) != 0)) {
        events_ = java.util.Collections.unmodifiableList(events_);
      }
      if (((mutable_bitField0_ & 0x00000004) != 0)) {
        links_ = java.util.Collections.unmodifiableList(links_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }

  public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
    return io.opentelemetry.proto.trace.v1.TraceProto.internal_static_opentelemetry_proto_trace_v1_Span_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
    return io.opentelemetry.proto.trace.v1.TraceProto.internal_static_opentelemetry_proto_trace_v1_Span_fieldAccessorTable
        .ensureFieldAccessorsInitialized(io.opentelemetry.proto.trace.v1.Span.class,
            io.opentelemetry.proto.trace.v1.Span.Builder.class);
  }

  /**
   * <pre>
   * SpanKind is the type of span. Can be used to specify additional relationships between spans
   * in addition to a parent/child relationship.
   * </pre>
   *
   * Protobuf enum {@code opentelemetry.proto.trace.v1.Span.SpanKind}
   */
  public enum SpanKind implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Unspecified. Do NOT use as default.
     * Implementations MAY assume SpanKind to be INTERNAL when receiving UNSPECIFIED.
     * </pre>
     *
     * <code>SPAN_KIND_UNSPECIFIED = 0;</code>
     */
    SPAN_KIND_UNSPECIFIED(0),
    /**
     * <pre>
     * Indicates that the span represents an internal operation within an application,
     * as opposed to an operation happening at the boundaries. Default value.
     * </pre>
     *
     * <code>SPAN_KIND_INTERNAL = 1;</code>
     */
    SPAN_KIND_INTERNAL(1),
    /**
     * <pre>
     * Indicates that the span covers server-side handling of an RPC or other
     * remote network request.
     * </pre>
     *
     * <code>SPAN_KIND_SERVER = 2;</code>
     */
    SPAN_KIND_SERVER(2),
    /**
     * <pre>
     * Indicates that the span describes a request to some remote service.
     * </pre>
     *
     * <code>SPAN_KIND_CLIENT = 3;</code>
     */
    SPAN_KIND_CLIENT(3),
    /**
     * <pre>
     * Indicates that the span describes a producer sending a message to a broker.
     * Unlike CLIENT and SERVER, there is often no direct critical path latency relationship
     * between producer and consumer spans. A PRODUCER span ends when the message was accepted
     * by the broker while the logical processing of the message might span a much longer time.
     * </pre>
     *
     * <code>SPAN_KIND_PRODUCER = 4;</code>
     */
    SPAN_KIND_PRODUCER(4),
    /**
     * <pre>
     * Indicates that the span describes consumer receiving a message from a broker.
     * Like the PRODUCER kind, there is often no direct critical path latency relationship
     * between producer and consumer spans.
     * </pre>
     *
     * <code>SPAN_KIND_CONSUMER = 5;</code>
     */
    SPAN_KIND_CONSUMER(5), UNRECOGNIZED(-1),;

    /**
     * <pre>
     * Unspecified. Do NOT use as default.
     * Implementations MAY assume SpanKind to be INTERNAL when receiving UNSPECIFIED.
     * </pre>
     *
     * <code>SPAN_KIND_UNSPECIFIED = 0;</code>
     */
    public static final int SPAN_KIND_UNSPECIFIED_VALUE = 0;
    /**
     * <pre>
     * Indicates that the span represents an internal operation within an application,
     * as opposed to an operation happening at the boundaries. Default value.
     * </pre>
     *
     * <code>SPAN_KIND_INTERNAL = 1;</code>
     */
    public static final int SPAN_KIND_INTERNAL_VALUE = 1;
    /**
     * <pre>
     * Indicates that the span covers server-side handling of an RPC or other
     * remote network request.
     * </pre>
     *
     * <code>SPAN_KIND_SERVER = 2;</code>
     */
    public static final int SPAN_KIND_SERVER_VALUE = 2;
    /**
     * <pre>
     * Indicates that the span describes a request to some remote service.
     * </pre>
     *
     * <code>SPAN_KIND_CLIENT = 3;</code>
     */
    public static final int SPAN_KIND_CLIENT_VALUE = 3;
    /**
     * <pre>
     * Indicates that the span describes a producer sending a message to a broker.
     * Unlike CLIENT and SERVER, there is often no direct critical path latency relationship
     * between producer and consumer spans. A PRODUCER span ends when the message was accepted
     * by the broker while the logical processing of the message might span a much longer time.
     * </pre>
     *
     * <code>SPAN_KIND_PRODUCER = 4;</code>
     */
    public static final int SPAN_KIND_PRODUCER_VALUE = 4;
    /**
     * <pre>
     * Indicates that the span describes consumer receiving a message from a broker.
     * Like the PRODUCER kind, there is often no direct critical path latency relationship
     * between producer and consumer spans.
     * </pre>
     *
     * <code>SPAN_KIND_CONSUMER = 5;</code>
     */
    public static final int SPAN_KIND_CONSUMER_VALUE = 5;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static SpanKind valueOf(int value) {
      return forNumber(value);
    }

    public static SpanKind forNumber(int value) {
      switch (value) {
        case 0:
          return SPAN_KIND_UNSPECIFIED;
        case 1:
          return SPAN_KIND_INTERNAL;
        case 2:
          return SPAN_KIND_SERVER;
        case 3:
          return SPAN_KIND_CLIENT;
        case 4:
          return SPAN_KIND_PRODUCER;
        case 5:
          return SPAN_KIND_CONSUMER;
        default:
          return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<SpanKind> internalGetValueMap() {
      return internalValueMap;
    }

    private static final com.google.protobuf.Internal.EnumLiteMap<SpanKind> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<SpanKind>() {
          public SpanKind findValueByNumber(int number) {
            return SpanKind.forNumber(number);
          }
        };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }

    public final com.google.protobuf.Descriptors.EnumDescriptor getDescriptorForType() {
      return getDescriptor();
    }

    public static final com.google.protobuf.Descriptors.EnumDescriptor getDescriptor() {
      return io.opentelemetry.proto.trace.v1.Span.getDescriptor().getEnumTypes().get(0);
    }

    private static final SpanKind[] VALUES = values();

    public static SpanKind valueOf(com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException("EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private SpanKind(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:opentelemetry.proto.trace.v1.Span.SpanKind)
  }

  public interface EventOrBuilder extends
      // @@protoc_insertion_point(interface_extends:opentelemetry.proto.trace.v1.Span.Event)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * time_unix_nano is the time the event occurred.
     * </pre>
     *
     * <code>fixed64 time_unix_nano = 1;</code>
     */
    long getTimeUnixNano();

    /**
     * <pre>
     * name of the event.
     * This field is semantically required to be set to non-empty string.
     * </pre>
     *
     * <code>string name = 2;</code>
     */
    java.lang.String getName();

    /**
     * <pre>
     * name of the event.
     * This field is semantically required to be set to non-empty string.
     * </pre>
     *
     * <code>string name = 2;</code>
     */
    com.google.protobuf.ByteString getNameBytes();

    /**
     * <pre>
     * attributes is a collection of attribute key/value pairs on the event.
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 3;</code>
     */
    java.util.List<io.opentelemetry.proto.common.v1.KeyValue> getAttributesList();

    /**
     * <pre>
     * attributes is a collection of attribute key/value pairs on the event.
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 3;</code>
     */
    io.opentelemetry.proto.common.v1.KeyValue getAttributes(int index);

    /**
     * <pre>
     * attributes is a collection of attribute key/value pairs on the event.
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 3;</code>
     */
    int getAttributesCount();

    /**
     * <pre>
     * attributes is a collection of attribute key/value pairs on the event.
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 3;</code>
     */
    java.util.List<? extends io.opentelemetry.proto.common.v1.KeyValueOrBuilder> getAttributesOrBuilderList();

    /**
     * <pre>
     * attributes is a collection of attribute key/value pairs on the event.
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 3;</code>
     */
    io.opentelemetry.proto.common.v1.KeyValueOrBuilder getAttributesOrBuilder(int index);

    /**
     * <pre>
     * dropped_attributes_count is the number of dropped attributes. If the value is 0,
     * then no attributes were dropped.
     * </pre>
     *
     * <code>uint32 dropped_attributes_count = 4;</code>
     */
    int getDroppedAttributesCount();
  }
  /**
   * <pre>
   * Event is a time-stamped annotation of the span, consisting of user-supplied
   * text description and key-value pairs.
   * </pre>
   *
   * Protobuf type {@code opentelemetry.proto.trace.v1.Span.Event}
   */
  public static final class Event extends com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:opentelemetry.proto.trace.v1.Span.Event)
      EventOrBuilder {
    private static final long serialVersionUID = 0L;

    // Use Event.newBuilder() to construct.
    private Event(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }

    private Event() {
      name_ = "";
      attributes_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
      return new Event();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet getUnknownFields() {
      return this.unknownFields;
    }

    private Event(com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 9: {

              timeUnixNano_ = input.readFixed64();
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              name_ = s;
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                attributes_ = new java.util.ArrayList<io.opentelemetry.proto.common.v1.KeyValue>();
                mutable_bitField0_ |= 0x00000001;
              }
              attributes_.add(input.readMessage(io.opentelemetry.proto.common.v1.KeyValue.parser(),
                  extensionRegistry));
              break;
            }
            case 32: {

              droppedAttributesCount_ = input.readUInt32();
              break;
            }
            default: {
              if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          attributes_ = java.util.Collections.unmodifiableList(attributes_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }

    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return io.opentelemetry.proto.trace.v1.TraceProto.internal_static_opentelemetry_proto_trace_v1_Span_Event_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
      return io.opentelemetry.proto.trace.v1.TraceProto.internal_static_opentelemetry_proto_trace_v1_Span_Event_fieldAccessorTable
          .ensureFieldAccessorsInitialized(io.opentelemetry.proto.trace.v1.Span.Event.class,
              io.opentelemetry.proto.trace.v1.Span.Event.Builder.class);
    }

    public static final int TIME_UNIX_NANO_FIELD_NUMBER = 1;
    private long timeUnixNano_;

    /**
     * <pre>
     * time_unix_nano is the time the event occurred.
     * </pre>
     *
     * <code>fixed64 time_unix_nano = 1;</code>
     */
    public long getTimeUnixNano() {
      return timeUnixNano_;
    }

    public static final int NAME_FIELD_NUMBER = 2;
    private volatile java.lang.Object name_;

    /**
     * <pre>
     * name of the event.
     * This field is semantically required to be set to non-empty string.
     * </pre>
     *
     * <code>string name = 2;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      }
    }

    /**
     * <pre>
     * name of the event.
     * This field is semantically required to be set to non-empty string.
     * </pre>
     *
     * <code>string name = 2;</code>
     */
    public com.google.protobuf.ByteString getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ATTRIBUTES_FIELD_NUMBER = 3;
    private java.util.List<io.opentelemetry.proto.common.v1.KeyValue> attributes_;

    /**
     * <pre>
     * attributes is a collection of attribute key/value pairs on the event.
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 3;</code>
     */
    public java.util.List<io.opentelemetry.proto.common.v1.KeyValue> getAttributesList() {
      return attributes_;
    }

    /**
     * <pre>
     * attributes is a collection of attribute key/value pairs on the event.
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 3;</code>
     */
    public java.util.List<? extends io.opentelemetry.proto.common.v1.KeyValueOrBuilder> getAttributesOrBuilderList() {
      return attributes_;
    }

    /**
     * <pre>
     * attributes is a collection of attribute key/value pairs on the event.
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 3;</code>
     */
    public int getAttributesCount() {
      return attributes_.size();
    }

    /**
     * <pre>
     * attributes is a collection of attribute key/value pairs on the event.
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 3;</code>
     */
    public io.opentelemetry.proto.common.v1.KeyValue getAttributes(int index) {
      return attributes_.get(index);
    }

    /**
     * <pre>
     * attributes is a collection of attribute key/value pairs on the event.
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 3;</code>
     */
    public io.opentelemetry.proto.common.v1.KeyValueOrBuilder getAttributesOrBuilder(int index) {
      return attributes_.get(index);
    }

    public static final int DROPPED_ATTRIBUTES_COUNT_FIELD_NUMBER = 4;
    private int droppedAttributesCount_;

    /**
     * <pre>
     * dropped_attributes_count is the number of dropped attributes. If the value is 0,
     * then no attributes were dropped.
     * </pre>
     *
     * <code>uint32 dropped_attributes_count = 4;</code>
     */
    public int getDroppedAttributesCount() {
      return droppedAttributesCount_;
    }

    private byte memoizedIsInitialized = -1;

    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1)
        return true;
      if (isInitialized == 0)
        return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
      if (timeUnixNano_ != 0L) {
        output.writeFixed64(1, timeUnixNano_);
      }
      if (!getNameBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, name_);
      }
      for (int i = 0; i < attributes_.size(); i++) {
        output.writeMessage(3, attributes_.get(i));
      }
      if (droppedAttributesCount_ != 0) {
        output.writeUInt32(4, droppedAttributesCount_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1)
        return size;

      size = 0;
      if (timeUnixNano_ != 0L) {
        size += com.google.protobuf.CodedOutputStream.computeFixed64Size(1, timeUnixNano_);
      }
      if (!getNameBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, name_);
      }
      for (int i = 0; i < attributes_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream.computeMessageSize(3, attributes_.get(i));
      }
      if (droppedAttributesCount_ != 0) {
        size += com.google.protobuf.CodedOutputStream.computeUInt32Size(4, droppedAttributesCount_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
        return true;
      }
      if (!(obj instanceof io.opentelemetry.proto.trace.v1.Span.Event)) {
        return super.equals(obj);
      }
      io.opentelemetry.proto.trace.v1.Span.Event other =
          (io.opentelemetry.proto.trace.v1.Span.Event) obj;

      if (getTimeUnixNano() != other.getTimeUnixNano())
        return false;
      if (!getName().equals(other.getName()))
        return false;
      if (!getAttributesList().equals(other.getAttributesList()))
        return false;
      if (getDroppedAttributesCount() != other.getDroppedAttributesCount())
        return false;
      if (!unknownFields.equals(other.unknownFields))
        return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + TIME_UNIX_NANO_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(getTimeUnixNano());
      hash = (37 * hash) + NAME_FIELD_NUMBER;
      hash = (53 * hash) + getName().hashCode();
      if (getAttributesCount() > 0) {
        hash = (37 * hash) + ATTRIBUTES_FIELD_NUMBER;
        hash = (53 * hash) + getAttributesList().hashCode();
      }
      hash = (37 * hash) + DROPPED_ATTRIBUTES_COUNT_FIELD_NUMBER;
      hash = (53 * hash) + getDroppedAttributesCount();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.opentelemetry.proto.trace.v1.Span.Event parseFrom(java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static io.opentelemetry.proto.trace.v1.Span.Event parseFrom(java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static io.opentelemetry.proto.trace.v1.Span.Event parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static io.opentelemetry.proto.trace.v1.Span.Event parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static io.opentelemetry.proto.trace.v1.Span.Event parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static io.opentelemetry.proto.trace.v1.Span.Event parseFrom(byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static io.opentelemetry.proto.trace.v1.Span.Event parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
    }

    public static io.opentelemetry.proto.trace.v1.Span.Event parseFrom(java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input,
          extensionRegistry);
    }

    public static io.opentelemetry.proto.trace.v1.Span.Event parseDelimitedFrom(
        java.io.InputStream input) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
    }

    public static io.opentelemetry.proto.trace.v1.Span.Event parseDelimitedFrom(
        java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input,
          extensionRegistry);
    }

    public static io.opentelemetry.proto.trace.v1.Span.Event parseFrom(
        com.google.protobuf.CodedInputStream input) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
    }

    public static io.opentelemetry.proto.trace.v1.Span.Event parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input,
          extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() {
      return newBuilder();
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }

    public static Builder newBuilder(io.opentelemetry.proto.trace.v1.Span.Event prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }

    /**
     * <pre>
     * Event is a time-stamped annotation of the span, consisting of user-supplied
     * text description and key-value pairs.
     * </pre>
     *
     * Protobuf type {@code opentelemetry.proto.trace.v1.Span.Event}
     */
    public static final class Builder
        extends com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:opentelemetry.proto.trace.v1.Span.Event)
        io.opentelemetry.proto.trace.v1.Span.EventOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
        return io.opentelemetry.proto.trace.v1.TraceProto.internal_static_opentelemetry_proto_trace_v1_Span_Event_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
        return io.opentelemetry.proto.trace.v1.TraceProto.internal_static_opentelemetry_proto_trace_v1_Span_Event_fieldAccessorTable
            .ensureFieldAccessorsInitialized(io.opentelemetry.proto.trace.v1.Span.Event.class,
                io.opentelemetry.proto.trace.v1.Span.Event.Builder.class);
      }

      // Construct using io.opentelemetry.proto.trace.v1.Span.Event.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
          getAttributesFieldBuilder();
        }
      }

      @java.lang.Override
      public Builder clear() {
        super.clear();
        timeUnixNano_ = 0L;

        name_ = "";

        if (attributesBuilder_ == null) {
          attributes_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          attributesBuilder_.clear();
        }
        droppedAttributesCount_ = 0;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
        return io.opentelemetry.proto.trace.v1.TraceProto.internal_static_opentelemetry_proto_trace_v1_Span_Event_descriptor;
      }

      @java.lang.Override
      public io.opentelemetry.proto.trace.v1.Span.Event getDefaultInstanceForType() {
        return io.opentelemetry.proto.trace.v1.Span.Event.getDefaultInstance();
      }

      @java.lang.Override
      public io.opentelemetry.proto.trace.v1.Span.Event build() {
        io.opentelemetry.proto.trace.v1.Span.Event result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.opentelemetry.proto.trace.v1.Span.Event buildPartial() {
        io.opentelemetry.proto.trace.v1.Span.Event result =
            new io.opentelemetry.proto.trace.v1.Span.Event(this);
        int from_bitField0_ = bitField0_;
        result.timeUnixNano_ = timeUnixNano_;
        result.name_ = name_;
        if (attributesBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            attributes_ = java.util.Collections.unmodifiableList(attributes_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.attributes_ = attributes_;
        } else {
          result.attributes_ = attributesBuilder_.build();
        }
        result.droppedAttributesCount_ = droppedAttributesCount_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }

      @java.lang.Override
      public Builder setField(com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }

      @java.lang.Override
      public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }

      @java.lang.Override
      public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }

      @java.lang.Override
      public Builder setRepeatedField(com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }

      @java.lang.Override
      public Builder addRepeatedField(com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.opentelemetry.proto.trace.v1.Span.Event) {
          return mergeFrom((io.opentelemetry.proto.trace.v1.Span.Event) other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.opentelemetry.proto.trace.v1.Span.Event other) {
        if (other == io.opentelemetry.proto.trace.v1.Span.Event.getDefaultInstance())
          return this;
        if (other.getTimeUnixNano() != 0L) {
          setTimeUnixNano(other.getTimeUnixNano());
        }
        if (!other.getName().isEmpty()) {
          name_ = other.name_;
          onChanged();
        }
        if (attributesBuilder_ == null) {
          if (!other.attributes_.isEmpty()) {
            if (attributes_.isEmpty()) {
              attributes_ = other.attributes_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureAttributesIsMutable();
              attributes_.addAll(other.attributes_);
            }
            onChanged();
          }
        } else {
          if (!other.attributes_.isEmpty()) {
            if (attributesBuilder_.isEmpty()) {
              attributesBuilder_.dispose();
              attributesBuilder_ = null;
              attributes_ = other.attributes_;
              bitField0_ = (bitField0_ & ~0x00000001);
              attributesBuilder_ = com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders
                  ? getAttributesFieldBuilder()
                  : null;
            } else {
              attributesBuilder_.addAllMessages(other.attributes_);
            }
          }
        }
        if (other.getDroppedAttributesCount() != 0) {
          setDroppedAttributesCount(other.getDroppedAttributesCount());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
        io.opentelemetry.proto.trace.v1.Span.Event parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.opentelemetry.proto.trace.v1.Span.Event) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int bitField0_;

      private long timeUnixNano_;

      /**
       * <pre>
       * time_unix_nano is the time the event occurred.
       * </pre>
       *
       * <code>fixed64 time_unix_nano = 1;</code>
       */
      public long getTimeUnixNano() {
        return timeUnixNano_;
      }

      /**
       * <pre>
       * time_unix_nano is the time the event occurred.
       * </pre>
       *
       * <code>fixed64 time_unix_nano = 1;</code>
       */
      public Builder setTimeUnixNano(long value) {

        timeUnixNano_ = value;
        onChanged();
        return this;
      }

      /**
       * <pre>
       * time_unix_nano is the time the event occurred.
       * </pre>
       *
       * <code>fixed64 time_unix_nano = 1;</code>
       */
      public Builder clearTimeUnixNano() {

        timeUnixNano_ = 0L;
        onChanged();
        return this;
      }

      private java.lang.Object name_ = "";

      /**
       * <pre>
       * name of the event.
       * This field is semantically required to be set to non-empty string.
       * </pre>
       *
       * <code>string name = 2;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }

      /**
       * <pre>
       * name of the event.
       * This field is semantically required to be set to non-empty string.
       * </pre>
       *
       * <code>string name = 2;</code>
       */
      public com.google.protobuf.ByteString getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      /**
       * <pre>
       * name of the event.
       * This field is semantically required to be set to non-empty string.
       * </pre>
       *
       * <code>string name = 2;</code>
       */
      public Builder setName(java.lang.String value) {
        if (value == null) {
          throw new NullPointerException();
        }

        name_ = value;
        onChanged();
        return this;
      }

      /**
       * <pre>
       * name of the event.
       * This field is semantically required to be set to non-empty string.
       * </pre>
       *
       * <code>string name = 2;</code>
       */
      public Builder clearName() {

        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }

      /**
       * <pre>
       * name of the event.
       * This field is semantically required to be set to non-empty string.
       * </pre>
       *
       * <code>string name = 2;</code>
       */
      public Builder setNameBytes(com.google.protobuf.ByteString value) {
        if (value == null) {
          throw new NullPointerException();
        }
        checkByteStringIsUtf8(value);

        name_ = value;
        onChanged();
        return this;
      }

      private java.util.List<io.opentelemetry.proto.common.v1.KeyValue> attributes_ =
          java.util.Collections.emptyList();

      private void ensureAttributesIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          attributes_ =
              new java.util.ArrayList<io.opentelemetry.proto.common.v1.KeyValue>(attributes_);
          bitField0_ |= 0x00000001;
        }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<io.opentelemetry.proto.common.v1.KeyValue, io.opentelemetry.proto.common.v1.KeyValue.Builder, io.opentelemetry.proto.common.v1.KeyValueOrBuilder> attributesBuilder_;

      /**
       * <pre>
       * attributes is a collection of attribute key/value pairs on the event.
       * Attribute keys MUST be unique (it is not allowed to have more than one
       * attribute with the same key).
       * </pre>
       *
       * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 3;</code>
       */
      public java.util.List<io.opentelemetry.proto.common.v1.KeyValue> getAttributesList() {
        if (attributesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(attributes_);
        } else {
          return attributesBuilder_.getMessageList();
        }
      }

      /**
       * <pre>
       * attributes is a collection of attribute key/value pairs on the event.
       * Attribute keys MUST be unique (it is not allowed to have more than one
       * attribute with the same key).
       * </pre>
       *
       * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 3;</code>
       */
      public int getAttributesCount() {
        if (attributesBuilder_ == null) {
          return attributes_.size();
        } else {
          return attributesBuilder_.getCount();
        }
      }

      /**
       * <pre>
       * attributes is a collection of attribute key/value pairs on the event.
       * Attribute keys MUST be unique (it is not allowed to have more than one
       * attribute with the same key).
       * </pre>
       *
       * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 3;</code>
       */
      public io.opentelemetry.proto.common.v1.KeyValue getAttributes(int index) {
        if (attributesBuilder_ == null) {
          return attributes_.get(index);
        } else {
          return attributesBuilder_.getMessage(index);
        }
      }

      /**
       * <pre>
       * attributes is a collection of attribute key/value pairs on the event.
       * Attribute keys MUST be unique (it is not allowed to have more than one
       * attribute with the same key).
       * </pre>
       *
       * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 3;</code>
       */
      public Builder setAttributes(int index, io.opentelemetry.proto.common.v1.KeyValue value) {
        if (attributesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAttributesIsMutable();
          attributes_.set(index, value);
          onChanged();
        } else {
          attributesBuilder_.setMessage(index, value);
        }
        return this;
      }

      /**
       * <pre>
       * attributes is a collection of attribute key/value pairs on the event.
       * Attribute keys MUST be unique (it is not allowed to have more than one
       * attribute with the same key).
       * </pre>
       *
       * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 3;</code>
       */
      public Builder setAttributes(int index,
          io.opentelemetry.proto.common.v1.KeyValue.Builder builderForValue) {
        if (attributesBuilder_ == null) {
          ensureAttributesIsMutable();
          attributes_.set(index, builderForValue.build());
          onChanged();
        } else {
          attributesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }

      /**
       * <pre>
       * attributes is a collection of attribute key/value pairs on the event.
       * Attribute keys MUST be unique (it is not allowed to have more than one
       * attribute with the same key).
       * </pre>
       *
       * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 3;</code>
       */
      public Builder addAttributes(io.opentelemetry.proto.common.v1.KeyValue value) {
        if (attributesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAttributesIsMutable();
          attributes_.add(value);
          onChanged();
        } else {
          attributesBuilder_.addMessage(value);
        }
        return this;
      }

      /**
       * <pre>
       * attributes is a collection of attribute key/value pairs on the event.
       * Attribute keys MUST be unique (it is not allowed to have more than one
       * attribute with the same key).
       * </pre>
       *
       * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 3;</code>
       */
      public Builder addAttributes(int index, io.opentelemetry.proto.common.v1.KeyValue value) {
        if (attributesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAttributesIsMutable();
          attributes_.add(index, value);
          onChanged();
        } else {
          attributesBuilder_.addMessage(index, value);
        }
        return this;
      }

      /**
       * <pre>
       * attributes is a collection of attribute key/value pairs on the event.
       * Attribute keys MUST be unique (it is not allowed to have more than one
       * attribute with the same key).
       * </pre>
       *
       * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 3;</code>
       */
      public Builder addAttributes(
          io.opentelemetry.proto.common.v1.KeyValue.Builder builderForValue) {
        if (attributesBuilder_ == null) {
          ensureAttributesIsMutable();
          attributes_.add(builderForValue.build());
          onChanged();
        } else {
          attributesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }

      /**
       * <pre>
       * attributes is a collection of attribute key/value pairs on the event.
       * Attribute keys MUST be unique (it is not allowed to have more than one
       * attribute with the same key).
       * </pre>
       *
       * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 3;</code>
       */
      public Builder addAttributes(int index,
          io.opentelemetry.proto.common.v1.KeyValue.Builder builderForValue) {
        if (attributesBuilder_ == null) {
          ensureAttributesIsMutable();
          attributes_.add(index, builderForValue.build());
          onChanged();
        } else {
          attributesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }

      /**
       * <pre>
       * attributes is a collection of attribute key/value pairs on the event.
       * Attribute keys MUST be unique (it is not allowed to have more than one
       * attribute with the same key).
       * </pre>
       *
       * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 3;</code>
       */
      public Builder addAllAttributes(
          java.lang.Iterable<? extends io.opentelemetry.proto.common.v1.KeyValue> values) {
        if (attributesBuilder_ == null) {
          ensureAttributesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(values, attributes_);
          onChanged();
        } else {
          attributesBuilder_.addAllMessages(values);
        }
        return this;
      }

      /**
       * <pre>
       * attributes is a collection of attribute key/value pairs on the event.
       * Attribute keys MUST be unique (it is not allowed to have more than one
       * attribute with the same key).
       * </pre>
       *
       * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 3;</code>
       */
      public Builder clearAttributes() {
        if (attributesBuilder_ == null) {
          attributes_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          attributesBuilder_.clear();
        }
        return this;
      }

      /**
       * <pre>
       * attributes is a collection of attribute key/value pairs on the event.
       * Attribute keys MUST be unique (it is not allowed to have more than one
       * attribute with the same key).
       * </pre>
       *
       * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 3;</code>
       */
      public Builder removeAttributes(int index) {
        if (attributesBuilder_ == null) {
          ensureAttributesIsMutable();
          attributes_.remove(index);
          onChanged();
        } else {
          attributesBuilder_.remove(index);
        }
        return this;
      }

      /**
       * <pre>
       * attributes is a collection of attribute key/value pairs on the event.
       * Attribute keys MUST be unique (it is not allowed to have more than one
       * attribute with the same key).
       * </pre>
       *
       * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 3;</code>
       */
      public io.opentelemetry.proto.common.v1.KeyValue.Builder getAttributesBuilder(int index) {
        return getAttributesFieldBuilder().getBuilder(index);
      }

      /**
       * <pre>
       * attributes is a collection of attribute key/value pairs on the event.
       * Attribute keys MUST be unique (it is not allowed to have more than one
       * attribute with the same key).
       * </pre>
       *
       * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 3;</code>
       */
      public io.opentelemetry.proto.common.v1.KeyValueOrBuilder getAttributesOrBuilder(int index) {
        if (attributesBuilder_ == null) {
          return attributes_.get(index);
        } else {
          return attributesBuilder_.getMessageOrBuilder(index);
        }
      }

      /**
       * <pre>
       * attributes is a collection of attribute key/value pairs on the event.
       * Attribute keys MUST be unique (it is not allowed to have more than one
       * attribute with the same key).
       * </pre>
       *
       * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 3;</code>
       */
      public java.util.List<? extends io.opentelemetry.proto.common.v1.KeyValueOrBuilder> getAttributesOrBuilderList() {
        if (attributesBuilder_ != null) {
          return attributesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(attributes_);
        }
      }

      /**
       * <pre>
       * attributes is a collection of attribute key/value pairs on the event.
       * Attribute keys MUST be unique (it is not allowed to have more than one
       * attribute with the same key).
       * </pre>
       *
       * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 3;</code>
       */
      public io.opentelemetry.proto.common.v1.KeyValue.Builder addAttributesBuilder() {
        return getAttributesFieldBuilder()
            .addBuilder(io.opentelemetry.proto.common.v1.KeyValue.getDefaultInstance());
      }

      /**
       * <pre>
       * attributes is a collection of attribute key/value pairs on the event.
       * Attribute keys MUST be unique (it is not allowed to have more than one
       * attribute with the same key).
       * </pre>
       *
       * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 3;</code>
       */
      public io.opentelemetry.proto.common.v1.KeyValue.Builder addAttributesBuilder(int index) {
        return getAttributesFieldBuilder().addBuilder(index,
            io.opentelemetry.proto.common.v1.KeyValue.getDefaultInstance());
      }

      /**
       * <pre>
       * attributes is a collection of attribute key/value pairs on the event.
       * Attribute keys MUST be unique (it is not allowed to have more than one
       * attribute with the same key).
       * </pre>
       *
       * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 3;</code>
       */
      public java.util.List<io.opentelemetry.proto.common.v1.KeyValue.Builder> getAttributesBuilderList() {
        return getAttributesFieldBuilder().getBuilderList();
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<io.opentelemetry.proto.common.v1.KeyValue, io.opentelemetry.proto.common.v1.KeyValue.Builder, io.opentelemetry.proto.common.v1.KeyValueOrBuilder> getAttributesFieldBuilder() {
        if (attributesBuilder_ == null) {
          attributesBuilder_ =
              new com.google.protobuf.RepeatedFieldBuilderV3<io.opentelemetry.proto.common.v1.KeyValue, io.opentelemetry.proto.common.v1.KeyValue.Builder, io.opentelemetry.proto.common.v1.KeyValueOrBuilder>(
                  attributes_, ((bitField0_ & 0x00000001) != 0), getParentForChildren(), isClean());
          attributes_ = null;
        }
        return attributesBuilder_;
      }

      private int droppedAttributesCount_;

      /**
       * <pre>
       * dropped_attributes_count is the number of dropped attributes. If the value is 0,
       * then no attributes were dropped.
       * </pre>
       *
       * <code>uint32 dropped_attributes_count = 4;</code>
       */
      public int getDroppedAttributesCount() {
        return droppedAttributesCount_;
      }

      /**
       * <pre>
       * dropped_attributes_count is the number of dropped attributes. If the value is 0,
       * then no attributes were dropped.
       * </pre>
       *
       * <code>uint32 dropped_attributes_count = 4;</code>
       */
      public Builder setDroppedAttributesCount(int value) {

        droppedAttributesCount_ = value;
        onChanged();
        return this;
      }

      /**
       * <pre>
       * dropped_attributes_count is the number of dropped attributes. If the value is 0,
       * then no attributes were dropped.
       * </pre>
       *
       * <code>uint32 dropped_attributes_count = 4;</code>
       */
      public Builder clearDroppedAttributesCount() {

        droppedAttributesCount_ = 0;
        onChanged();
        return this;
      }

      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:opentelemetry.proto.trace.v1.Span.Event)
    }

    // @@protoc_insertion_point(class_scope:opentelemetry.proto.trace.v1.Span.Event)
    private static final io.opentelemetry.proto.trace.v1.Span.Event DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.opentelemetry.proto.trace.v1.Span.Event();
    }

    public static io.opentelemetry.proto.trace.v1.Span.Event getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Event> PARSER =
        new com.google.protobuf.AbstractParser<Event>() {
          @java.lang.Override
          public Event parsePartialFrom(com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return new Event(input, extensionRegistry);
          }
        };

    public static com.google.protobuf.Parser<Event> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Event> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.opentelemetry.proto.trace.v1.Span.Event getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface LinkOrBuilder extends
      // @@protoc_insertion_point(interface_extends:opentelemetry.proto.trace.v1.Span.Link)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * A unique identifier of a trace that this linked span is part of. The ID is a
     * 16-byte array.
     * </pre>
     *
     * <code>bytes trace_id = 1;</code>
     */
    com.google.protobuf.ByteString getTraceId();

    /**
     * <pre>
     * A unique identifier for the linked span. The ID is an 8-byte array.
     * </pre>
     *
     * <code>bytes span_id = 2;</code>
     */
    com.google.protobuf.ByteString getSpanId();

    /**
     * <pre>
     * The trace_state associated with the link.
     * </pre>
     *
     * <code>string trace_state = 3;</code>
     */
    java.lang.String getTraceState();

    /**
     * <pre>
     * The trace_state associated with the link.
     * </pre>
     *
     * <code>string trace_state = 3;</code>
     */
    com.google.protobuf.ByteString getTraceStateBytes();

    /**
     * <pre>
     * attributes is a collection of attribute key/value pairs on the link.
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 4;</code>
     */
    java.util.List<io.opentelemetry.proto.common.v1.KeyValue> getAttributesList();

    /**
     * <pre>
     * attributes is a collection of attribute key/value pairs on the link.
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 4;</code>
     */
    io.opentelemetry.proto.common.v1.KeyValue getAttributes(int index);

    /**
     * <pre>
     * attributes is a collection of attribute key/value pairs on the link.
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 4;</code>
     */
    int getAttributesCount();

    /**
     * <pre>
     * attributes is a collection of attribute key/value pairs on the link.
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 4;</code>
     */
    java.util.List<? extends io.opentelemetry.proto.common.v1.KeyValueOrBuilder> getAttributesOrBuilderList();

    /**
     * <pre>
     * attributes is a collection of attribute key/value pairs on the link.
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 4;</code>
     */
    io.opentelemetry.proto.common.v1.KeyValueOrBuilder getAttributesOrBuilder(int index);

    /**
     * <pre>
     * dropped_attributes_count is the number of dropped attributes. If the value is 0,
     * then no attributes were dropped.
     * </pre>
     *
     * <code>uint32 dropped_attributes_count = 5;</code>
     */
    int getDroppedAttributesCount();
  }
  /**
   * <pre>
   * A pointer from the current span to another span in the same trace or in a
   * different trace. For example, this can be used in batching operations,
   * where a single batch handler processes multiple requests from different
   * traces or when the handler receives a request from a different project.
   * </pre>
   *
   * Protobuf type {@code opentelemetry.proto.trace.v1.Span.Link}
   */
  public static final class Link extends com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:opentelemetry.proto.trace.v1.Span.Link)
      LinkOrBuilder {
    private static final long serialVersionUID = 0L;

    // Use Link.newBuilder() to construct.
    private Link(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }

    private Link() {
      traceId_ = com.google.protobuf.ByteString.EMPTY;
      spanId_ = com.google.protobuf.ByteString.EMPTY;
      traceState_ = "";
      attributes_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
      return new Link();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet getUnknownFields() {
      return this.unknownFields;
    }

    private Link(com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {

              traceId_ = input.readBytes();
              break;
            }
            case 18: {

              spanId_ = input.readBytes();
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              traceState_ = s;
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                attributes_ = new java.util.ArrayList<io.opentelemetry.proto.common.v1.KeyValue>();
                mutable_bitField0_ |= 0x00000001;
              }
              attributes_.add(input.readMessage(io.opentelemetry.proto.common.v1.KeyValue.parser(),
                  extensionRegistry));
              break;
            }
            case 40: {

              droppedAttributesCount_ = input.readUInt32();
              break;
            }
            default: {
              if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          attributes_ = java.util.Collections.unmodifiableList(attributes_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }

    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return io.opentelemetry.proto.trace.v1.TraceProto.internal_static_opentelemetry_proto_trace_v1_Span_Link_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
      return io.opentelemetry.proto.trace.v1.TraceProto.internal_static_opentelemetry_proto_trace_v1_Span_Link_fieldAccessorTable
          .ensureFieldAccessorsInitialized(io.opentelemetry.proto.trace.v1.Span.Link.class,
              io.opentelemetry.proto.trace.v1.Span.Link.Builder.class);
    }

    public static final int TRACE_ID_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString traceId_;

    /**
     * <pre>
     * A unique identifier of a trace that this linked span is part of. The ID is a
     * 16-byte array.
     * </pre>
     *
     * <code>bytes trace_id = 1;</code>
     */
    public com.google.protobuf.ByteString getTraceId() {
      return traceId_;
    }

    public static final int SPAN_ID_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString spanId_;

    /**
     * <pre>
     * A unique identifier for the linked span. The ID is an 8-byte array.
     * </pre>
     *
     * <code>bytes span_id = 2;</code>
     */
    public com.google.protobuf.ByteString getSpanId() {
      return spanId_;
    }

    public static final int TRACE_STATE_FIELD_NUMBER = 3;
    private volatile java.lang.Object traceState_;

    /**
     * <pre>
     * The trace_state associated with the link.
     * </pre>
     *
     * <code>string trace_state = 3;</code>
     */
    public java.lang.String getTraceState() {
      java.lang.Object ref = traceState_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        traceState_ = s;
        return s;
      }
    }

    /**
     * <pre>
     * The trace_state associated with the link.
     * </pre>
     *
     * <code>string trace_state = 3;</code>
     */
    public com.google.protobuf.ByteString getTraceStateBytes() {
      java.lang.Object ref = traceState_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        traceState_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ATTRIBUTES_FIELD_NUMBER = 4;
    private java.util.List<io.opentelemetry.proto.common.v1.KeyValue> attributes_;

    /**
     * <pre>
     * attributes is a collection of attribute key/value pairs on the link.
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 4;</code>
     */
    public java.util.List<io.opentelemetry.proto.common.v1.KeyValue> getAttributesList() {
      return attributes_;
    }

    /**
     * <pre>
     * attributes is a collection of attribute key/value pairs on the link.
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 4;</code>
     */
    public java.util.List<? extends io.opentelemetry.proto.common.v1.KeyValueOrBuilder> getAttributesOrBuilderList() {
      return attributes_;
    }

    /**
     * <pre>
     * attributes is a collection of attribute key/value pairs on the link.
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 4;</code>
     */
    public int getAttributesCount() {
      return attributes_.size();
    }

    /**
     * <pre>
     * attributes is a collection of attribute key/value pairs on the link.
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 4;</code>
     */
    public io.opentelemetry.proto.common.v1.KeyValue getAttributes(int index) {
      return attributes_.get(index);
    }

    /**
     * <pre>
     * attributes is a collection of attribute key/value pairs on the link.
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 4;</code>
     */
    public io.opentelemetry.proto.common.v1.KeyValueOrBuilder getAttributesOrBuilder(int index) {
      return attributes_.get(index);
    }

    public static final int DROPPED_ATTRIBUTES_COUNT_FIELD_NUMBER = 5;
    private int droppedAttributesCount_;

    /**
     * <pre>
     * dropped_attributes_count is the number of dropped attributes. If the value is 0,
     * then no attributes were dropped.
     * </pre>
     *
     * <code>uint32 dropped_attributes_count = 5;</code>
     */
    public int getDroppedAttributesCount() {
      return droppedAttributesCount_;
    }

    private byte memoizedIsInitialized = -1;

    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1)
        return true;
      if (isInitialized == 0)
        return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
      if (!traceId_.isEmpty()) {
        output.writeBytes(1, traceId_);
      }
      if (!spanId_.isEmpty()) {
        output.writeBytes(2, spanId_);
      }
      if (!getTraceStateBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, traceState_);
      }
      for (int i = 0; i < attributes_.size(); i++) {
        output.writeMessage(4, attributes_.get(i));
      }
      if (droppedAttributesCount_ != 0) {
        output.writeUInt32(5, droppedAttributesCount_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1)
        return size;

      size = 0;
      if (!traceId_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream.computeBytesSize(1, traceId_);
      }
      if (!spanId_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream.computeBytesSize(2, spanId_);
      }
      if (!getTraceStateBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, traceState_);
      }
      for (int i = 0; i < attributes_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream.computeMessageSize(4, attributes_.get(i));
      }
      if (droppedAttributesCount_ != 0) {
        size += com.google.protobuf.CodedOutputStream.computeUInt32Size(5, droppedAttributesCount_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
        return true;
      }
      if (!(obj instanceof io.opentelemetry.proto.trace.v1.Span.Link)) {
        return super.equals(obj);
      }
      io.opentelemetry.proto.trace.v1.Span.Link other =
          (io.opentelemetry.proto.trace.v1.Span.Link) obj;

      if (!getTraceId().equals(other.getTraceId()))
        return false;
      if (!getSpanId().equals(other.getSpanId()))
        return false;
      if (!getTraceState().equals(other.getTraceState()))
        return false;
      if (!getAttributesList().equals(other.getAttributesList()))
        return false;
      if (getDroppedAttributesCount() != other.getDroppedAttributesCount())
        return false;
      if (!unknownFields.equals(other.unknownFields))
        return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + TRACE_ID_FIELD_NUMBER;
      hash = (53 * hash) + getTraceId().hashCode();
      hash = (37 * hash) + SPAN_ID_FIELD_NUMBER;
      hash = (53 * hash) + getSpanId().hashCode();
      hash = (37 * hash) + TRACE_STATE_FIELD_NUMBER;
      hash = (53 * hash) + getTraceState().hashCode();
      if (getAttributesCount() > 0) {
        hash = (37 * hash) + ATTRIBUTES_FIELD_NUMBER;
        hash = (53 * hash) + getAttributesList().hashCode();
      }
      hash = (37 * hash) + DROPPED_ATTRIBUTES_COUNT_FIELD_NUMBER;
      hash = (53 * hash) + getDroppedAttributesCount();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.opentelemetry.proto.trace.v1.Span.Link parseFrom(java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static io.opentelemetry.proto.trace.v1.Span.Link parseFrom(java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static io.opentelemetry.proto.trace.v1.Span.Link parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static io.opentelemetry.proto.trace.v1.Span.Link parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static io.opentelemetry.proto.trace.v1.Span.Link parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static io.opentelemetry.proto.trace.v1.Span.Link parseFrom(byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static io.opentelemetry.proto.trace.v1.Span.Link parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
    }

    public static io.opentelemetry.proto.trace.v1.Span.Link parseFrom(java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input,
          extensionRegistry);
    }

    public static io.opentelemetry.proto.trace.v1.Span.Link parseDelimitedFrom(
        java.io.InputStream input) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
    }

    public static io.opentelemetry.proto.trace.v1.Span.Link parseDelimitedFrom(
        java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input,
          extensionRegistry);
    }

    public static io.opentelemetry.proto.trace.v1.Span.Link parseFrom(
        com.google.protobuf.CodedInputStream input) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
    }

    public static io.opentelemetry.proto.trace.v1.Span.Link parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input,
          extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() {
      return newBuilder();
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }

    public static Builder newBuilder(io.opentelemetry.proto.trace.v1.Span.Link prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }

    /**
     * <pre>
     * A pointer from the current span to another span in the same trace or in a
     * different trace. For example, this can be used in batching operations,
     * where a single batch handler processes multiple requests from different
     * traces or when the handler receives a request from a different project.
     * </pre>
     *
     * Protobuf type {@code opentelemetry.proto.trace.v1.Span.Link}
     */
    public static final class Builder
        extends com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:opentelemetry.proto.trace.v1.Span.Link)
        io.opentelemetry.proto.trace.v1.Span.LinkOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
        return io.opentelemetry.proto.trace.v1.TraceProto.internal_static_opentelemetry_proto_trace_v1_Span_Link_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
        return io.opentelemetry.proto.trace.v1.TraceProto.internal_static_opentelemetry_proto_trace_v1_Span_Link_fieldAccessorTable
            .ensureFieldAccessorsInitialized(io.opentelemetry.proto.trace.v1.Span.Link.class,
                io.opentelemetry.proto.trace.v1.Span.Link.Builder.class);
      }

      // Construct using io.opentelemetry.proto.trace.v1.Span.Link.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
          getAttributesFieldBuilder();
        }
      }

      @java.lang.Override
      public Builder clear() {
        super.clear();
        traceId_ = com.google.protobuf.ByteString.EMPTY;

        spanId_ = com.google.protobuf.ByteString.EMPTY;

        traceState_ = "";

        if (attributesBuilder_ == null) {
          attributes_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          attributesBuilder_.clear();
        }
        droppedAttributesCount_ = 0;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
        return io.opentelemetry.proto.trace.v1.TraceProto.internal_static_opentelemetry_proto_trace_v1_Span_Link_descriptor;
      }

      @java.lang.Override
      public io.opentelemetry.proto.trace.v1.Span.Link getDefaultInstanceForType() {
        return io.opentelemetry.proto.trace.v1.Span.Link.getDefaultInstance();
      }

      @java.lang.Override
      public io.opentelemetry.proto.trace.v1.Span.Link build() {
        io.opentelemetry.proto.trace.v1.Span.Link result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.opentelemetry.proto.trace.v1.Span.Link buildPartial() {
        io.opentelemetry.proto.trace.v1.Span.Link result =
            new io.opentelemetry.proto.trace.v1.Span.Link(this);
        int from_bitField0_ = bitField0_;
        result.traceId_ = traceId_;
        result.spanId_ = spanId_;
        result.traceState_ = traceState_;
        if (attributesBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            attributes_ = java.util.Collections.unmodifiableList(attributes_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.attributes_ = attributes_;
        } else {
          result.attributes_ = attributesBuilder_.build();
        }
        result.droppedAttributesCount_ = droppedAttributesCount_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }

      @java.lang.Override
      public Builder setField(com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }

      @java.lang.Override
      public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }

      @java.lang.Override
      public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }

      @java.lang.Override
      public Builder setRepeatedField(com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }

      @java.lang.Override
      public Builder addRepeatedField(com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.opentelemetry.proto.trace.v1.Span.Link) {
          return mergeFrom((io.opentelemetry.proto.trace.v1.Span.Link) other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.opentelemetry.proto.trace.v1.Span.Link other) {
        if (other == io.opentelemetry.proto.trace.v1.Span.Link.getDefaultInstance())
          return this;
        if (other.getTraceId() != com.google.protobuf.ByteString.EMPTY) {
          setTraceId(other.getTraceId());
        }
        if (other.getSpanId() != com.google.protobuf.ByteString.EMPTY) {
          setSpanId(other.getSpanId());
        }
        if (!other.getTraceState().isEmpty()) {
          traceState_ = other.traceState_;
          onChanged();
        }
        if (attributesBuilder_ == null) {
          if (!other.attributes_.isEmpty()) {
            if (attributes_.isEmpty()) {
              attributes_ = other.attributes_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureAttributesIsMutable();
              attributes_.addAll(other.attributes_);
            }
            onChanged();
          }
        } else {
          if (!other.attributes_.isEmpty()) {
            if (attributesBuilder_.isEmpty()) {
              attributesBuilder_.dispose();
              attributesBuilder_ = null;
              attributes_ = other.attributes_;
              bitField0_ = (bitField0_ & ~0x00000001);
              attributesBuilder_ = com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders
                  ? getAttributesFieldBuilder()
                  : null;
            } else {
              attributesBuilder_.addAllMessages(other.attributes_);
            }
          }
        }
        if (other.getDroppedAttributesCount() != 0) {
          setDroppedAttributesCount(other.getDroppedAttributesCount());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
        io.opentelemetry.proto.trace.v1.Span.Link parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.opentelemetry.proto.trace.v1.Span.Link) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int bitField0_;

      private com.google.protobuf.ByteString traceId_ = com.google.protobuf.ByteString.EMPTY;

      /**
       * <pre>
       * A unique identifier of a trace that this linked span is part of. The ID is a
       * 16-byte array.
       * </pre>
       *
       * <code>bytes trace_id = 1;</code>
       */
      public com.google.protobuf.ByteString getTraceId() {
        return traceId_;
      }

      /**
       * <pre>
       * A unique identifier of a trace that this linked span is part of. The ID is a
       * 16-byte array.
       * </pre>
       *
       * <code>bytes trace_id = 1;</code>
       */
      public Builder setTraceId(com.google.protobuf.ByteString value) {
        if (value == null) {
          throw new NullPointerException();
        }

        traceId_ = value;
        onChanged();
        return this;
      }

      /**
       * <pre>
       * A unique identifier of a trace that this linked span is part of. The ID is a
       * 16-byte array.
       * </pre>
       *
       * <code>bytes trace_id = 1;</code>
       */
      public Builder clearTraceId() {

        traceId_ = getDefaultInstance().getTraceId();
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString spanId_ = com.google.protobuf.ByteString.EMPTY;

      /**
       * <pre>
       * A unique identifier for the linked span. The ID is an 8-byte array.
       * </pre>
       *
       * <code>bytes span_id = 2;</code>
       */
      public com.google.protobuf.ByteString getSpanId() {
        return spanId_;
      }

      /**
       * <pre>
       * A unique identifier for the linked span. The ID is an 8-byte array.
       * </pre>
       *
       * <code>bytes span_id = 2;</code>
       */
      public Builder setSpanId(com.google.protobuf.ByteString value) {
        if (value == null) {
          throw new NullPointerException();
        }

        spanId_ = value;
        onChanged();
        return this;
      }

      /**
       * <pre>
       * A unique identifier for the linked span. The ID is an 8-byte array.
       * </pre>
       *
       * <code>bytes span_id = 2;</code>
       */
      public Builder clearSpanId() {

        spanId_ = getDefaultInstance().getSpanId();
        onChanged();
        return this;
      }

      private java.lang.Object traceState_ = "";

      /**
       * <pre>
       * The trace_state associated with the link.
       * </pre>
       *
       * <code>string trace_state = 3;</code>
       */
      public java.lang.String getTraceState() {
        java.lang.Object ref = traceState_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          traceState_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }

      /**
       * <pre>
       * The trace_state associated with the link.
       * </pre>
       *
       * <code>string trace_state = 3;</code>
       */
      public com.google.protobuf.ByteString getTraceStateBytes() {
        java.lang.Object ref = traceState_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
          traceState_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      /**
       * <pre>
       * The trace_state associated with the link.
       * </pre>
       *
       * <code>string trace_state = 3;</code>
       */
      public Builder setTraceState(java.lang.String value) {
        if (value == null) {
          throw new NullPointerException();
        }

        traceState_ = value;
        onChanged();
        return this;
      }

      /**
       * <pre>
       * The trace_state associated with the link.
       * </pre>
       *
       * <code>string trace_state = 3;</code>
       */
      public Builder clearTraceState() {

        traceState_ = getDefaultInstance().getTraceState();
        onChanged();
        return this;
      }

      /**
       * <pre>
       * The trace_state associated with the link.
       * </pre>
       *
       * <code>string trace_state = 3;</code>
       */
      public Builder setTraceStateBytes(com.google.protobuf.ByteString value) {
        if (value == null) {
          throw new NullPointerException();
        }
        checkByteStringIsUtf8(value);

        traceState_ = value;
        onChanged();
        return this;
      }

      private java.util.List<io.opentelemetry.proto.common.v1.KeyValue> attributes_ =
          java.util.Collections.emptyList();

      private void ensureAttributesIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          attributes_ =
              new java.util.ArrayList<io.opentelemetry.proto.common.v1.KeyValue>(attributes_);
          bitField0_ |= 0x00000001;
        }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<io.opentelemetry.proto.common.v1.KeyValue, io.opentelemetry.proto.common.v1.KeyValue.Builder, io.opentelemetry.proto.common.v1.KeyValueOrBuilder> attributesBuilder_;

      /**
       * <pre>
       * attributes is a collection of attribute key/value pairs on the link.
       * Attribute keys MUST be unique (it is not allowed to have more than one
       * attribute with the same key).
       * </pre>
       *
       * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 4;</code>
       */
      public java.util.List<io.opentelemetry.proto.common.v1.KeyValue> getAttributesList() {
        if (attributesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(attributes_);
        } else {
          return attributesBuilder_.getMessageList();
        }
      }

      /**
       * <pre>
       * attributes is a collection of attribute key/value pairs on the link.
       * Attribute keys MUST be unique (it is not allowed to have more than one
       * attribute with the same key).
       * </pre>
       *
       * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 4;</code>
       */
      public int getAttributesCount() {
        if (attributesBuilder_ == null) {
          return attributes_.size();
        } else {
          return attributesBuilder_.getCount();
        }
      }

      /**
       * <pre>
       * attributes is a collection of attribute key/value pairs on the link.
       * Attribute keys MUST be unique (it is not allowed to have more than one
       * attribute with the same key).
       * </pre>
       *
       * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 4;</code>
       */
      public io.opentelemetry.proto.common.v1.KeyValue getAttributes(int index) {
        if (attributesBuilder_ == null) {
          return attributes_.get(index);
        } else {
          return attributesBuilder_.getMessage(index);
        }
      }

      /**
       * <pre>
       * attributes is a collection of attribute key/value pairs on the link.
       * Attribute keys MUST be unique (it is not allowed to have more than one
       * attribute with the same key).
       * </pre>
       *
       * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 4;</code>
       */
      public Builder setAttributes(int index, io.opentelemetry.proto.common.v1.KeyValue value) {
        if (attributesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAttributesIsMutable();
          attributes_.set(index, value);
          onChanged();
        } else {
          attributesBuilder_.setMessage(index, value);
        }
        return this;
      }

      /**
       * <pre>
       * attributes is a collection of attribute key/value pairs on the link.
       * Attribute keys MUST be unique (it is not allowed to have more than one
       * attribute with the same key).
       * </pre>
       *
       * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 4;</code>
       */
      public Builder setAttributes(int index,
          io.opentelemetry.proto.common.v1.KeyValue.Builder builderForValue) {
        if (attributesBuilder_ == null) {
          ensureAttributesIsMutable();
          attributes_.set(index, builderForValue.build());
          onChanged();
        } else {
          attributesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }

      /**
       * <pre>
       * attributes is a collection of attribute key/value pairs on the link.
       * Attribute keys MUST be unique (it is not allowed to have more than one
       * attribute with the same key).
       * </pre>
       *
       * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 4;</code>
       */
      public Builder addAttributes(io.opentelemetry.proto.common.v1.KeyValue value) {
        if (attributesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAttributesIsMutable();
          attributes_.add(value);
          onChanged();
        } else {
          attributesBuilder_.addMessage(value);
        }
        return this;
      }

      /**
       * <pre>
       * attributes is a collection of attribute key/value pairs on the link.
       * Attribute keys MUST be unique (it is not allowed to have more than one
       * attribute with the same key).
       * </pre>
       *
       * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 4;</code>
       */
      public Builder addAttributes(int index, io.opentelemetry.proto.common.v1.KeyValue value) {
        if (attributesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAttributesIsMutable();
          attributes_.add(index, value);
          onChanged();
        } else {
          attributesBuilder_.addMessage(index, value);
        }
        return this;
      }

      /**
       * <pre>
       * attributes is a collection of attribute key/value pairs on the link.
       * Attribute keys MUST be unique (it is not allowed to have more than one
       * attribute with the same key).
       * </pre>
       *
       * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 4;</code>
       */
      public Builder addAttributes(
          io.opentelemetry.proto.common.v1.KeyValue.Builder builderForValue) {
        if (attributesBuilder_ == null) {
          ensureAttributesIsMutable();
          attributes_.add(builderForValue.build());
          onChanged();
        } else {
          attributesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }

      /**
       * <pre>
       * attributes is a collection of attribute key/value pairs on the link.
       * Attribute keys MUST be unique (it is not allowed to have more than one
       * attribute with the same key).
       * </pre>
       *
       * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 4;</code>
       */
      public Builder addAttributes(int index,
          io.opentelemetry.proto.common.v1.KeyValue.Builder builderForValue) {
        if (attributesBuilder_ == null) {
          ensureAttributesIsMutable();
          attributes_.add(index, builderForValue.build());
          onChanged();
        } else {
          attributesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }

      /**
       * <pre>
       * attributes is a collection of attribute key/value pairs on the link.
       * Attribute keys MUST be unique (it is not allowed to have more than one
       * attribute with the same key).
       * </pre>
       *
       * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 4;</code>
       */
      public Builder addAllAttributes(
          java.lang.Iterable<? extends io.opentelemetry.proto.common.v1.KeyValue> values) {
        if (attributesBuilder_ == null) {
          ensureAttributesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(values, attributes_);
          onChanged();
        } else {
          attributesBuilder_.addAllMessages(values);
        }
        return this;
      }

      /**
       * <pre>
       * attributes is a collection of attribute key/value pairs on the link.
       * Attribute keys MUST be unique (it is not allowed to have more than one
       * attribute with the same key).
       * </pre>
       *
       * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 4;</code>
       */
      public Builder clearAttributes() {
        if (attributesBuilder_ == null) {
          attributes_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          attributesBuilder_.clear();
        }
        return this;
      }

      /**
       * <pre>
       * attributes is a collection of attribute key/value pairs on the link.
       * Attribute keys MUST be unique (it is not allowed to have more than one
       * attribute with the same key).
       * </pre>
       *
       * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 4;</code>
       */
      public Builder removeAttributes(int index) {
        if (attributesBuilder_ == null) {
          ensureAttributesIsMutable();
          attributes_.remove(index);
          onChanged();
        } else {
          attributesBuilder_.remove(index);
        }
        return this;
      }

      /**
       * <pre>
       * attributes is a collection of attribute key/value pairs on the link.
       * Attribute keys MUST be unique (it is not allowed to have more than one
       * attribute with the same key).
       * </pre>
       *
       * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 4;</code>
       */
      public io.opentelemetry.proto.common.v1.KeyValue.Builder getAttributesBuilder(int index) {
        return getAttributesFieldBuilder().getBuilder(index);
      }

      /**
       * <pre>
       * attributes is a collection of attribute key/value pairs on the link.
       * Attribute keys MUST be unique (it is not allowed to have more than one
       * attribute with the same key).
       * </pre>
       *
       * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 4;</code>
       */
      public io.opentelemetry.proto.common.v1.KeyValueOrBuilder getAttributesOrBuilder(int index) {
        if (attributesBuilder_ == null) {
          return attributes_.get(index);
        } else {
          return attributesBuilder_.getMessageOrBuilder(index);
        }
      }

      /**
       * <pre>
       * attributes is a collection of attribute key/value pairs on the link.
       * Attribute keys MUST be unique (it is not allowed to have more than one
       * attribute with the same key).
       * </pre>
       *
       * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 4;</code>
       */
      public java.util.List<? extends io.opentelemetry.proto.common.v1.KeyValueOrBuilder> getAttributesOrBuilderList() {
        if (attributesBuilder_ != null) {
          return attributesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(attributes_);
        }
      }

      /**
       * <pre>
       * attributes is a collection of attribute key/value pairs on the link.
       * Attribute keys MUST be unique (it is not allowed to have more than one
       * attribute with the same key).
       * </pre>
       *
       * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 4;</code>
       */
      public io.opentelemetry.proto.common.v1.KeyValue.Builder addAttributesBuilder() {
        return getAttributesFieldBuilder()
            .addBuilder(io.opentelemetry.proto.common.v1.KeyValue.getDefaultInstance());
      }

      /**
       * <pre>
       * attributes is a collection of attribute key/value pairs on the link.
       * Attribute keys MUST be unique (it is not allowed to have more than one
       * attribute with the same key).
       * </pre>
       *
       * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 4;</code>
       */
      public io.opentelemetry.proto.common.v1.KeyValue.Builder addAttributesBuilder(int index) {
        return getAttributesFieldBuilder().addBuilder(index,
            io.opentelemetry.proto.common.v1.KeyValue.getDefaultInstance());
      }

      /**
       * <pre>
       * attributes is a collection of attribute key/value pairs on the link.
       * Attribute keys MUST be unique (it is not allowed to have more than one
       * attribute with the same key).
       * </pre>
       *
       * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 4;</code>
       */
      public java.util.List<io.opentelemetry.proto.common.v1.KeyValue.Builder> getAttributesBuilderList() {
        return getAttributesFieldBuilder().getBuilderList();
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<io.opentelemetry.proto.common.v1.KeyValue, io.opentelemetry.proto.common.v1.KeyValue.Builder, io.opentelemetry.proto.common.v1.KeyValueOrBuilder> getAttributesFieldBuilder() {
        if (attributesBuilder_ == null) {
          attributesBuilder_ =
              new com.google.protobuf.RepeatedFieldBuilderV3<io.opentelemetry.proto.common.v1.KeyValue, io.opentelemetry.proto.common.v1.KeyValue.Builder, io.opentelemetry.proto.common.v1.KeyValueOrBuilder>(
                  attributes_, ((bitField0_ & 0x00000001) != 0), getParentForChildren(), isClean());
          attributes_ = null;
        }
        return attributesBuilder_;
      }

      private int droppedAttributesCount_;

      /**
       * <pre>
       * dropped_attributes_count is the number of dropped attributes. If the value is 0,
       * then no attributes were dropped.
       * </pre>
       *
       * <code>uint32 dropped_attributes_count = 5;</code>
       */
      public int getDroppedAttributesCount() {
        return droppedAttributesCount_;
      }

      /**
       * <pre>
       * dropped_attributes_count is the number of dropped attributes. If the value is 0,
       * then no attributes were dropped.
       * </pre>
       *
       * <code>uint32 dropped_attributes_count = 5;</code>
       */
      public Builder setDroppedAttributesCount(int value) {

        droppedAttributesCount_ = value;
        onChanged();
        return this;
      }

      /**
       * <pre>
       * dropped_attributes_count is the number of dropped attributes. If the value is 0,
       * then no attributes were dropped.
       * </pre>
       *
       * <code>uint32 dropped_attributes_count = 5;</code>
       */
      public Builder clearDroppedAttributesCount() {

        droppedAttributesCount_ = 0;
        onChanged();
        return this;
      }

      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:opentelemetry.proto.trace.v1.Span.Link)
    }

    // @@protoc_insertion_point(class_scope:opentelemetry.proto.trace.v1.Span.Link)
    private static final io.opentelemetry.proto.trace.v1.Span.Link DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.opentelemetry.proto.trace.v1.Span.Link();
    }

    public static io.opentelemetry.proto.trace.v1.Span.Link getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Link> PARSER =
        new com.google.protobuf.AbstractParser<Link>() {
          @java.lang.Override
          public Link parsePartialFrom(com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return new Link(input, extensionRegistry);
          }
        };

    public static com.google.protobuf.Parser<Link> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Link> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.opentelemetry.proto.trace.v1.Span.Link getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public static final int TRACE_ID_FIELD_NUMBER = 1;
  private com.google.protobuf.ByteString traceId_;

  /**
   * <pre>
   * A unique identifier for a trace. All spans from the same trace share
   * the same `trace_id`. The ID is a 16-byte array. An ID with all zeroes
   * is considered invalid.
   * This field is semantically required. Receiver should generate new
   * random trace_id if empty or invalid trace_id was received.
   * This field is required.
   * </pre>
   *
   * <code>bytes trace_id = 1;</code>
   */
  public com.google.protobuf.ByteString getTraceId() {
    return traceId_;
  }

  public static final int SPAN_ID_FIELD_NUMBER = 2;
  private com.google.protobuf.ByteString spanId_;

  /**
   * <pre>
   * A unique identifier for a span within a trace, assigned when the span
   * is created. The ID is an 8-byte array. An ID with all zeroes is considered
   * invalid.
   * This field is semantically required. Receiver should generate new
   * random span_id if empty or invalid span_id was received.
   * This field is required.
   * </pre>
   *
   * <code>bytes span_id = 2;</code>
   */
  public com.google.protobuf.ByteString getSpanId() {
    return spanId_;
  }

  public static final int TRACE_STATE_FIELD_NUMBER = 3;
  private volatile java.lang.Object traceState_;

  /**
   * <pre>
   * trace_state conveys information about request position in multiple distributed tracing graphs.
   * It is a trace_state in w3c-trace-context format: https://www.w3.org/TR/trace-context/#tracestate-header
   * See also https://github.com/w3c/distributed-tracing for more details about this field.
   * </pre>
   *
   * <code>string trace_state = 3;</code>
   */
  public java.lang.String getTraceState() {
    java.lang.Object ref = traceState_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      traceState_ = s;
      return s;
    }
  }

  /**
   * <pre>
   * trace_state conveys information about request position in multiple distributed tracing graphs.
   * It is a trace_state in w3c-trace-context format: https://www.w3.org/TR/trace-context/#tracestate-header
   * See also https://github.com/w3c/distributed-tracing for more details about this field.
   * </pre>
   *
   * <code>string trace_state = 3;</code>
   */
  public com.google.protobuf.ByteString getTraceStateBytes() {
    java.lang.Object ref = traceState_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      traceState_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int PARENT_SPAN_ID_FIELD_NUMBER = 4;
  private com.google.protobuf.ByteString parentSpanId_;

  /**
   * <pre>
   * The `span_id` of this span's parent span. If this is a root span, then this
   * field must be empty. The ID is an 8-byte array.
   * </pre>
   *
   * <code>bytes parent_span_id = 4;</code>
   */
  public com.google.protobuf.ByteString getParentSpanId() {
    return parentSpanId_;
  }

  public static final int NAME_FIELD_NUMBER = 5;
  private volatile java.lang.Object name_;

  /**
   * <pre>
   * A description of the span's operation.
   * For example, the name can be a qualified method name or a file name
   * and a line number where the operation is called. A best practice is to use
   * the same display name at the same call point in an application.
   * This makes it easier to correlate spans in different traces.
   * This field is semantically required to be set to non-empty string.
   * Empty value is equivalent to an unknown span name.
   * This field is required.
   * </pre>
   *
   * <code>string name = 5;</code>
   */
  public java.lang.String getName() {
    java.lang.Object ref = name_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      name_ = s;
      return s;
    }
  }

  /**
   * <pre>
   * A description of the span's operation.
   * For example, the name can be a qualified method name or a file name
   * and a line number where the operation is called. A best practice is to use
   * the same display name at the same call point in an application.
   * This makes it easier to correlate spans in different traces.
   * This field is semantically required to be set to non-empty string.
   * Empty value is equivalent to an unknown span name.
   * This field is required.
   * </pre>
   *
   * <code>string name = 5;</code>
   */
  public com.google.protobuf.ByteString getNameBytes() {
    java.lang.Object ref = name_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      name_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int KIND_FIELD_NUMBER = 6;
  private int kind_;

  /**
   * <pre>
   * Distinguishes between spans generated in a particular context. For example,
   * two spans with the same name may be distinguished using `CLIENT` (caller)
   * and `SERVER` (callee) to identify queueing latency associated with the span.
   * </pre>
   *
   * <code>.opentelemetry.proto.trace.v1.Span.SpanKind kind = 6;</code>
   */
  public int getKindValue() {
    return kind_;
  }

  /**
   * <pre>
   * Distinguishes between spans generated in a particular context. For example,
   * two spans with the same name may be distinguished using `CLIENT` (caller)
   * and `SERVER` (callee) to identify queueing latency associated with the span.
   * </pre>
   *
   * <code>.opentelemetry.proto.trace.v1.Span.SpanKind kind = 6;</code>
   */
  public io.opentelemetry.proto.trace.v1.Span.SpanKind getKind() {
    @SuppressWarnings("deprecation")
    io.opentelemetry.proto.trace.v1.Span.SpanKind result =
        io.opentelemetry.proto.trace.v1.Span.SpanKind.valueOf(kind_);
    return result == null ? io.opentelemetry.proto.trace.v1.Span.SpanKind.UNRECOGNIZED : result;
  }

  public static final int START_TIME_UNIX_NANO_FIELD_NUMBER = 7;
  private long startTimeUnixNano_;

  /**
   * <pre>
   * start_time_unix_nano is the start time of the span. On the client side, this is the time
   * kept by the local machine where the span execution starts. On the server side, this
   * is the time when the server's application handler starts running.
   * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
   * This field is semantically required and it is expected that end_time &gt;= start_time.
   * </pre>
   *
   * <code>fixed64 start_time_unix_nano = 7;</code>
   */
  public long getStartTimeUnixNano() {
    return startTimeUnixNano_;
  }

  public static final int END_TIME_UNIX_NANO_FIELD_NUMBER = 8;
  private long endTimeUnixNano_;

  /**
   * <pre>
   * end_time_unix_nano is the end time of the span. On the client side, this is the time
   * kept by the local machine where the span execution ends. On the server side, this
   * is the time when the server application handler stops running.
   * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
   * This field is semantically required and it is expected that end_time &gt;= start_time.
   * </pre>
   *
   * <code>fixed64 end_time_unix_nano = 8;</code>
   */
  public long getEndTimeUnixNano() {
    return endTimeUnixNano_;
  }

  public static final int ATTRIBUTES_FIELD_NUMBER = 9;
  private java.util.List<io.opentelemetry.proto.common.v1.KeyValue> attributes_;

  /**
   * <pre>
   * attributes is a collection of key/value pairs. Note, global attributes
   * like server name can be set using the resource API. Examples of attributes:
   *     "/http/user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"
   *     "/http/server_latency": 300
   *     "abc.com/myattribute": true
   *     "abc.com/score": 10.239
   * The OpenTelemetry API specification further restricts the allowed value types:
   * https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/common/README.md#attribute
   * Attribute keys MUST be unique (it is not allowed to have more than one
   * attribute with the same key).
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 9;</code>
   */
  public java.util.List<io.opentelemetry.proto.common.v1.KeyValue> getAttributesList() {
    return attributes_;
  }

  /**
   * <pre>
   * attributes is a collection of key/value pairs. Note, global attributes
   * like server name can be set using the resource API. Examples of attributes:
   *     "/http/user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"
   *     "/http/server_latency": 300
   *     "abc.com/myattribute": true
   *     "abc.com/score": 10.239
   * The OpenTelemetry API specification further restricts the allowed value types:
   * https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/common/README.md#attribute
   * Attribute keys MUST be unique (it is not allowed to have more than one
   * attribute with the same key).
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 9;</code>
   */
  public java.util.List<? extends io.opentelemetry.proto.common.v1.KeyValueOrBuilder> getAttributesOrBuilderList() {
    return attributes_;
  }

  /**
   * <pre>
   * attributes is a collection of key/value pairs. Note, global attributes
   * like server name can be set using the resource API. Examples of attributes:
   *     "/http/user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"
   *     "/http/server_latency": 300
   *     "abc.com/myattribute": true
   *     "abc.com/score": 10.239
   * The OpenTelemetry API specification further restricts the allowed value types:
   * https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/common/README.md#attribute
   * Attribute keys MUST be unique (it is not allowed to have more than one
   * attribute with the same key).
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 9;</code>
   */
  public int getAttributesCount() {
    return attributes_.size();
  }

  /**
   * <pre>
   * attributes is a collection of key/value pairs. Note, global attributes
   * like server name can be set using the resource API. Examples of attributes:
   *     "/http/user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"
   *     "/http/server_latency": 300
   *     "abc.com/myattribute": true
   *     "abc.com/score": 10.239
   * The OpenTelemetry API specification further restricts the allowed value types:
   * https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/common/README.md#attribute
   * Attribute keys MUST be unique (it is not allowed to have more than one
   * attribute with the same key).
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 9;</code>
   */
  public io.opentelemetry.proto.common.v1.KeyValue getAttributes(int index) {
    return attributes_.get(index);
  }

  /**
   * <pre>
   * attributes is a collection of key/value pairs. Note, global attributes
   * like server name can be set using the resource API. Examples of attributes:
   *     "/http/user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"
   *     "/http/server_latency": 300
   *     "abc.com/myattribute": true
   *     "abc.com/score": 10.239
   * The OpenTelemetry API specification further restricts the allowed value types:
   * https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/common/README.md#attribute
   * Attribute keys MUST be unique (it is not allowed to have more than one
   * attribute with the same key).
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 9;</code>
   */
  public io.opentelemetry.proto.common.v1.KeyValueOrBuilder getAttributesOrBuilder(int index) {
    return attributes_.get(index);
  }

  public static final int DROPPED_ATTRIBUTES_COUNT_FIELD_NUMBER = 10;
  private int droppedAttributesCount_;

  /**
   * <pre>
   * dropped_attributes_count is the number of attributes that were discarded. Attributes
   * can be discarded because their keys are too long or because there are too many
   * attributes. If this value is 0, then no attributes were dropped.
   * </pre>
   *
   * <code>uint32 dropped_attributes_count = 10;</code>
   */
  public int getDroppedAttributesCount() {
    return droppedAttributesCount_;
  }

  public static final int EVENTS_FIELD_NUMBER = 11;
  private java.util.List<io.opentelemetry.proto.trace.v1.Span.Event> events_;

  /**
   * <pre>
   * events is a collection of Event items.
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.trace.v1.Span.Event events = 11;</code>
   */
  public java.util.List<io.opentelemetry.proto.trace.v1.Span.Event> getEventsList() {
    return events_;
  }

  /**
   * <pre>
   * events is a collection of Event items.
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.trace.v1.Span.Event events = 11;</code>
   */
  public java.util.List<? extends io.opentelemetry.proto.trace.v1.Span.EventOrBuilder> getEventsOrBuilderList() {
    return events_;
  }

  /**
   * <pre>
   * events is a collection of Event items.
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.trace.v1.Span.Event events = 11;</code>
   */
  public int getEventsCount() {
    return events_.size();
  }

  /**
   * <pre>
   * events is a collection of Event items.
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.trace.v1.Span.Event events = 11;</code>
   */
  public io.opentelemetry.proto.trace.v1.Span.Event getEvents(int index) {
    return events_.get(index);
  }

  /**
   * <pre>
   * events is a collection of Event items.
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.trace.v1.Span.Event events = 11;</code>
   */
  public io.opentelemetry.proto.trace.v1.Span.EventOrBuilder getEventsOrBuilder(int index) {
    return events_.get(index);
  }

  public static final int DROPPED_EVENTS_COUNT_FIELD_NUMBER = 12;
  private int droppedEventsCount_;

  /**
   * <pre>
   * dropped_events_count is the number of dropped events. If the value is 0, then no
   * events were dropped.
   * </pre>
   *
   * <code>uint32 dropped_events_count = 12;</code>
   */
  public int getDroppedEventsCount() {
    return droppedEventsCount_;
  }

  public static final int LINKS_FIELD_NUMBER = 13;
  private java.util.List<io.opentelemetry.proto.trace.v1.Span.Link> links_;

  /**
   * <pre>
   * links is a collection of Links, which are references from this span to a span
   * in the same or different trace.
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.trace.v1.Span.Link links = 13;</code>
   */
  public java.util.List<io.opentelemetry.proto.trace.v1.Span.Link> getLinksList() {
    return links_;
  }

  /**
   * <pre>
   * links is a collection of Links, which are references from this span to a span
   * in the same or different trace.
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.trace.v1.Span.Link links = 13;</code>
   */
  public java.util.List<? extends io.opentelemetry.proto.trace.v1.Span.LinkOrBuilder> getLinksOrBuilderList() {
    return links_;
  }

  /**
   * <pre>
   * links is a collection of Links, which are references from this span to a span
   * in the same or different trace.
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.trace.v1.Span.Link links = 13;</code>
   */
  public int getLinksCount() {
    return links_.size();
  }

  /**
   * <pre>
   * links is a collection of Links, which are references from this span to a span
   * in the same or different trace.
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.trace.v1.Span.Link links = 13;</code>
   */
  public io.opentelemetry.proto.trace.v1.Span.Link getLinks(int index) {
    return links_.get(index);
  }

  /**
   * <pre>
   * links is a collection of Links, which are references from this span to a span
   * in the same or different trace.
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.trace.v1.Span.Link links = 13;</code>
   */
  public io.opentelemetry.proto.trace.v1.Span.LinkOrBuilder getLinksOrBuilder(int index) {
    return links_.get(index);
  }

  public static final int DROPPED_LINKS_COUNT_FIELD_NUMBER = 14;
  private int droppedLinksCount_;

  /**
   * <pre>
   * dropped_links_count is the number of dropped links after the maximum size was
   * enforced. If this value is 0, then no links were dropped.
   * </pre>
   *
   * <code>uint32 dropped_links_count = 14;</code>
   */
  public int getDroppedLinksCount() {
    return droppedLinksCount_;
  }

  public static final int STATUS_FIELD_NUMBER = 15;
  private io.opentelemetry.proto.trace.v1.Status status_;

  /**
   * <pre>
   * An optional final status for this span. Semantically when Status isn't set, it means
   * span's status code is unset, i.e. assume STATUS_CODE_UNSET (code = 0).
   * </pre>
   *
   * <code>.opentelemetry.proto.trace.v1.Status status = 15;</code>
   */
  public boolean hasStatus() {
    return status_ != null;
  }

  /**
   * <pre>
   * An optional final status for this span. Semantically when Status isn't set, it means
   * span's status code is unset, i.e. assume STATUS_CODE_UNSET (code = 0).
   * </pre>
   *
   * <code>.opentelemetry.proto.trace.v1.Status status = 15;</code>
   */
  public io.opentelemetry.proto.trace.v1.Status getStatus() {
    return status_ == null ? io.opentelemetry.proto.trace.v1.Status.getDefaultInstance() : status_;
  }

  /**
   * <pre>
   * An optional final status for this span. Semantically when Status isn't set, it means
   * span's status code is unset, i.e. assume STATUS_CODE_UNSET (code = 0).
   * </pre>
   *
   * <code>.opentelemetry.proto.trace.v1.Status status = 15;</code>
   */
  public io.opentelemetry.proto.trace.v1.StatusOrBuilder getStatusOrBuilder() {
    return getStatus();
  }

  private byte memoizedIsInitialized = -1;

  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1)
      return true;
    if (isInitialized == 0)
      return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
    if (!traceId_.isEmpty()) {
      output.writeBytes(1, traceId_);
    }
    if (!spanId_.isEmpty()) {
      output.writeBytes(2, spanId_);
    }
    if (!getTraceStateBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 3, traceState_);
    }
    if (!parentSpanId_.isEmpty()) {
      output.writeBytes(4, parentSpanId_);
    }
    if (!getNameBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 5, name_);
    }
    if (kind_ != io.opentelemetry.proto.trace.v1.Span.SpanKind.SPAN_KIND_UNSPECIFIED.getNumber()) {
      output.writeEnum(6, kind_);
    }
    if (startTimeUnixNano_ != 0L) {
      output.writeFixed64(7, startTimeUnixNano_);
    }
    if (endTimeUnixNano_ != 0L) {
      output.writeFixed64(8, endTimeUnixNano_);
    }
    for (int i = 0; i < attributes_.size(); i++) {
      output.writeMessage(9, attributes_.get(i));
    }
    if (droppedAttributesCount_ != 0) {
      output.writeUInt32(10, droppedAttributesCount_);
    }
    for (int i = 0; i < events_.size(); i++) {
      output.writeMessage(11, events_.get(i));
    }
    if (droppedEventsCount_ != 0) {
      output.writeUInt32(12, droppedEventsCount_);
    }
    for (int i = 0; i < links_.size(); i++) {
      output.writeMessage(13, links_.get(i));
    }
    if (droppedLinksCount_ != 0) {
      output.writeUInt32(14, droppedLinksCount_);
    }
    if (status_ != null) {
      output.writeMessage(15, getStatus());
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1)
      return size;

    size = 0;
    if (!traceId_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream.computeBytesSize(1, traceId_);
    }
    if (!spanId_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream.computeBytesSize(2, spanId_);
    }
    if (!getTraceStateBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, traceState_);
    }
    if (!parentSpanId_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream.computeBytesSize(4, parentSpanId_);
    }
    if (!getNameBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, name_);
    }
    if (kind_ != io.opentelemetry.proto.trace.v1.Span.SpanKind.SPAN_KIND_UNSPECIFIED.getNumber()) {
      size += com.google.protobuf.CodedOutputStream.computeEnumSize(6, kind_);
    }
    if (startTimeUnixNano_ != 0L) {
      size += com.google.protobuf.CodedOutputStream.computeFixed64Size(7, startTimeUnixNano_);
    }
    if (endTimeUnixNano_ != 0L) {
      size += com.google.protobuf.CodedOutputStream.computeFixed64Size(8, endTimeUnixNano_);
    }
    for (int i = 0; i < attributes_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(9, attributes_.get(i));
    }
    if (droppedAttributesCount_ != 0) {
      size += com.google.protobuf.CodedOutputStream.computeUInt32Size(10, droppedAttributesCount_);
    }
    for (int i = 0; i < events_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(11, events_.get(i));
    }
    if (droppedEventsCount_ != 0) {
      size += com.google.protobuf.CodedOutputStream.computeUInt32Size(12, droppedEventsCount_);
    }
    for (int i = 0; i < links_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(13, links_.get(i));
    }
    if (droppedLinksCount_ != 0) {
      size += com.google.protobuf.CodedOutputStream.computeUInt32Size(14, droppedLinksCount_);
    }
    if (status_ != null) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(15, getStatus());
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
      return true;
    }
    if (!(obj instanceof io.opentelemetry.proto.trace.v1.Span)) {
      return super.equals(obj);
    }
    io.opentelemetry.proto.trace.v1.Span other = (io.opentelemetry.proto.trace.v1.Span) obj;

    if (!getTraceId().equals(other.getTraceId()))
      return false;
    if (!getSpanId().equals(other.getSpanId()))
      return false;
    if (!getTraceState().equals(other.getTraceState()))
      return false;
    if (!getParentSpanId().equals(other.getParentSpanId()))
      return false;
    if (!getName().equals(other.getName()))
      return false;
    if (kind_ != other.kind_)
      return false;
    if (getStartTimeUnixNano() != other.getStartTimeUnixNano())
      return false;
    if (getEndTimeUnixNano() != other.getEndTimeUnixNano())
      return false;
    if (!getAttributesList().equals(other.getAttributesList()))
      return false;
    if (getDroppedAttributesCount() != other.getDroppedAttributesCount())
      return false;
    if (!getEventsList().equals(other.getEventsList()))
      return false;
    if (getDroppedEventsCount() != other.getDroppedEventsCount())
      return false;
    if (!getLinksList().equals(other.getLinksList()))
      return false;
    if (getDroppedLinksCount() != other.getDroppedLinksCount())
      return false;
    if (hasStatus() != other.hasStatus())
      return false;
    if (hasStatus()) {
      if (!getStatus().equals(other.getStatus()))
        return false;
    }
    if (!unknownFields.equals(other.unknownFields))
      return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + TRACE_ID_FIELD_NUMBER;
    hash = (53 * hash) + getTraceId().hashCode();
    hash = (37 * hash) + SPAN_ID_FIELD_NUMBER;
    hash = (53 * hash) + getSpanId().hashCode();
    hash = (37 * hash) + TRACE_STATE_FIELD_NUMBER;
    hash = (53 * hash) + getTraceState().hashCode();
    hash = (37 * hash) + PARENT_SPAN_ID_FIELD_NUMBER;
    hash = (53 * hash) + getParentSpanId().hashCode();
    hash = (37 * hash) + NAME_FIELD_NUMBER;
    hash = (53 * hash) + getName().hashCode();
    hash = (37 * hash) + KIND_FIELD_NUMBER;
    hash = (53 * hash) + kind_;
    hash = (37 * hash) + START_TIME_UNIX_NANO_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(getStartTimeUnixNano());
    hash = (37 * hash) + END_TIME_UNIX_NANO_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(getEndTimeUnixNano());
    if (getAttributesCount() > 0) {
      hash = (37 * hash) + ATTRIBUTES_FIELD_NUMBER;
      hash = (53 * hash) + getAttributesList().hashCode();
    }
    hash = (37 * hash) + DROPPED_ATTRIBUTES_COUNT_FIELD_NUMBER;
    hash = (53 * hash) + getDroppedAttributesCount();
    if (getEventsCount() > 0) {
      hash = (37 * hash) + EVENTS_FIELD_NUMBER;
      hash = (53 * hash) + getEventsList().hashCode();
    }
    hash = (37 * hash) + DROPPED_EVENTS_COUNT_FIELD_NUMBER;
    hash = (53 * hash) + getDroppedEventsCount();
    if (getLinksCount() > 0) {
      hash = (37 * hash) + LINKS_FIELD_NUMBER;
      hash = (53 * hash) + getLinksList().hashCode();
    }
    hash = (37 * hash) + DROPPED_LINKS_COUNT_FIELD_NUMBER;
    hash = (53 * hash) + getDroppedLinksCount();
    if (hasStatus()) {
      hash = (37 * hash) + STATUS_FIELD_NUMBER;
      hash = (53 * hash) + getStatus().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.opentelemetry.proto.trace.v1.Span parseFrom(java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static io.opentelemetry.proto.trace.v1.Span parseFrom(java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static io.opentelemetry.proto.trace.v1.Span parseFrom(com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static io.opentelemetry.proto.trace.v1.Span parseFrom(com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static io.opentelemetry.proto.trace.v1.Span parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static io.opentelemetry.proto.trace.v1.Span parseFrom(byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static io.opentelemetry.proto.trace.v1.Span parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static io.opentelemetry.proto.trace.v1.Span parseFrom(java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input,
        extensionRegistry);
  }

  public static io.opentelemetry.proto.trace.v1.Span parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
  }

  public static io.opentelemetry.proto.trace.v1.Span parseDelimitedFrom(java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input,
        extensionRegistry);
  }

  public static io.opentelemetry.proto.trace.v1.Span parseFrom(
      com.google.protobuf.CodedInputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static io.opentelemetry.proto.trace.v1.Span parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input,
        extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() {
    return newBuilder();
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }

  public static Builder newBuilder(io.opentelemetry.proto.trace.v1.Span prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }

  /**
   * <pre>
   * A Span represents a single operation performed by a single component of the system.
   * The next available field id is 17.
   * </pre>
   *
   * Protobuf type {@code opentelemetry.proto.trace.v1.Span}
   */
  public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
      implements
      // @@protoc_insertion_point(builder_implements:opentelemetry.proto.trace.v1.Span)
      io.opentelemetry.proto.trace.v1.SpanOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return io.opentelemetry.proto.trace.v1.TraceProto.internal_static_opentelemetry_proto_trace_v1_Span_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
      return io.opentelemetry.proto.trace.v1.TraceProto.internal_static_opentelemetry_proto_trace_v1_Span_fieldAccessorTable
          .ensureFieldAccessorsInitialized(io.opentelemetry.proto.trace.v1.Span.class,
              io.opentelemetry.proto.trace.v1.Span.Builder.class);
    }

    // Construct using io.opentelemetry.proto.trace.v1.Span.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }

    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
        getAttributesFieldBuilder();
        getEventsFieldBuilder();
        getLinksFieldBuilder();
      }
    }

    @java.lang.Override
    public Builder clear() {
      super.clear();
      traceId_ = com.google.protobuf.ByteString.EMPTY;

      spanId_ = com.google.protobuf.ByteString.EMPTY;

      traceState_ = "";

      parentSpanId_ = com.google.protobuf.ByteString.EMPTY;

      name_ = "";

      kind_ = 0;

      startTimeUnixNano_ = 0L;

      endTimeUnixNano_ = 0L;

      if (attributesBuilder_ == null) {
        attributes_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        attributesBuilder_.clear();
      }
      droppedAttributesCount_ = 0;

      if (eventsBuilder_ == null) {
        events_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
      } else {
        eventsBuilder_.clear();
      }
      droppedEventsCount_ = 0;

      if (linksBuilder_ == null) {
        links_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
      } else {
        linksBuilder_.clear();
      }
      droppedLinksCount_ = 0;

      if (statusBuilder_ == null) {
        status_ = null;
      } else {
        status_ = null;
        statusBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
      return io.opentelemetry.proto.trace.v1.TraceProto.internal_static_opentelemetry_proto_trace_v1_Span_descriptor;
    }

    @java.lang.Override
    public io.opentelemetry.proto.trace.v1.Span getDefaultInstanceForType() {
      return io.opentelemetry.proto.trace.v1.Span.getDefaultInstance();
    }

    @java.lang.Override
    public io.opentelemetry.proto.trace.v1.Span build() {
      io.opentelemetry.proto.trace.v1.Span result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.opentelemetry.proto.trace.v1.Span buildPartial() {
      io.opentelemetry.proto.trace.v1.Span result = new io.opentelemetry.proto.trace.v1.Span(this);
      int from_bitField0_ = bitField0_;
      result.traceId_ = traceId_;
      result.spanId_ = spanId_;
      result.traceState_ = traceState_;
      result.parentSpanId_ = parentSpanId_;
      result.name_ = name_;
      result.kind_ = kind_;
      result.startTimeUnixNano_ = startTimeUnixNano_;
      result.endTimeUnixNano_ = endTimeUnixNano_;
      if (attributesBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          attributes_ = java.util.Collections.unmodifiableList(attributes_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.attributes_ = attributes_;
      } else {
        result.attributes_ = attributesBuilder_.build();
      }
      result.droppedAttributesCount_ = droppedAttributesCount_;
      if (eventsBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)) {
          events_ = java.util.Collections.unmodifiableList(events_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.events_ = events_;
      } else {
        result.events_ = eventsBuilder_.build();
      }
      result.droppedEventsCount_ = droppedEventsCount_;
      if (linksBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0)) {
          links_ = java.util.Collections.unmodifiableList(links_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.links_ = links_;
      } else {
        result.links_ = linksBuilder_.build();
      }
      result.droppedLinksCount_ = droppedLinksCount_;
      if (statusBuilder_ == null) {
        result.status_ = status_;
      } else {
        result.status_ = statusBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }

    @java.lang.Override
    public Builder setField(com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }

    @java.lang.Override
    public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }

    @java.lang.Override
    public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }

    @java.lang.Override
    public Builder setRepeatedField(com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }

    @java.lang.Override
    public Builder addRepeatedField(com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.opentelemetry.proto.trace.v1.Span) {
        return mergeFrom((io.opentelemetry.proto.trace.v1.Span) other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.opentelemetry.proto.trace.v1.Span other) {
      if (other == io.opentelemetry.proto.trace.v1.Span.getDefaultInstance())
        return this;
      if (other.getTraceId() != com.google.protobuf.ByteString.EMPTY) {
        setTraceId(other.getTraceId());
      }
      if (other.getSpanId() != com.google.protobuf.ByteString.EMPTY) {
        setSpanId(other.getSpanId());
      }
      if (!other.getTraceState().isEmpty()) {
        traceState_ = other.traceState_;
        onChanged();
      }
      if (other.getParentSpanId() != com.google.protobuf.ByteString.EMPTY) {
        setParentSpanId(other.getParentSpanId());
      }
      if (!other.getName().isEmpty()) {
        name_ = other.name_;
        onChanged();
      }
      if (other.kind_ != 0) {
        setKindValue(other.getKindValue());
      }
      if (other.getStartTimeUnixNano() != 0L) {
        setStartTimeUnixNano(other.getStartTimeUnixNano());
      }
      if (other.getEndTimeUnixNano() != 0L) {
        setEndTimeUnixNano(other.getEndTimeUnixNano());
      }
      if (attributesBuilder_ == null) {
        if (!other.attributes_.isEmpty()) {
          if (attributes_.isEmpty()) {
            attributes_ = other.attributes_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureAttributesIsMutable();
            attributes_.addAll(other.attributes_);
          }
          onChanged();
        }
      } else {
        if (!other.attributes_.isEmpty()) {
          if (attributesBuilder_.isEmpty()) {
            attributesBuilder_.dispose();
            attributesBuilder_ = null;
            attributes_ = other.attributes_;
            bitField0_ = (bitField0_ & ~0x00000001);
            attributesBuilder_ = com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders
                ? getAttributesFieldBuilder()
                : null;
          } else {
            attributesBuilder_.addAllMessages(other.attributes_);
          }
        }
      }
      if (other.getDroppedAttributesCount() != 0) {
        setDroppedAttributesCount(other.getDroppedAttributesCount());
      }
      if (eventsBuilder_ == null) {
        if (!other.events_.isEmpty()) {
          if (events_.isEmpty()) {
            events_ = other.events_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureEventsIsMutable();
            events_.addAll(other.events_);
          }
          onChanged();
        }
      } else {
        if (!other.events_.isEmpty()) {
          if (eventsBuilder_.isEmpty()) {
            eventsBuilder_.dispose();
            eventsBuilder_ = null;
            events_ = other.events_;
            bitField0_ = (bitField0_ & ~0x00000002);
            eventsBuilder_ = com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders
                ? getEventsFieldBuilder()
                : null;
          } else {
            eventsBuilder_.addAllMessages(other.events_);
          }
        }
      }
      if (other.getDroppedEventsCount() != 0) {
        setDroppedEventsCount(other.getDroppedEventsCount());
      }
      if (linksBuilder_ == null) {
        if (!other.links_.isEmpty()) {
          if (links_.isEmpty()) {
            links_ = other.links_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureLinksIsMutable();
            links_.addAll(other.links_);
          }
          onChanged();
        }
      } else {
        if (!other.links_.isEmpty()) {
          if (linksBuilder_.isEmpty()) {
            linksBuilder_.dispose();
            linksBuilder_ = null;
            links_ = other.links_;
            bitField0_ = (bitField0_ & ~0x00000004);
            linksBuilder_ = com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders
                ? getLinksFieldBuilder()
                : null;
          } else {
            linksBuilder_.addAllMessages(other.links_);
          }
        }
      }
      if (other.getDroppedLinksCount() != 0) {
        setDroppedLinksCount(other.getDroppedLinksCount());
      }
      if (other.hasStatus()) {
        mergeStatus(other.getStatus());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
      io.opentelemetry.proto.trace.v1.Span parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (io.opentelemetry.proto.trace.v1.Span) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private int bitField0_;

    private com.google.protobuf.ByteString traceId_ = com.google.protobuf.ByteString.EMPTY;

    /**
     * <pre>
     * A unique identifier for a trace. All spans from the same trace share
     * the same `trace_id`. The ID is a 16-byte array. An ID with all zeroes
     * is considered invalid.
     * This field is semantically required. Receiver should generate new
     * random trace_id if empty or invalid trace_id was received.
     * This field is required.
     * </pre>
     *
     * <code>bytes trace_id = 1;</code>
     */
    public com.google.protobuf.ByteString getTraceId() {
      return traceId_;
    }

    /**
     * <pre>
     * A unique identifier for a trace. All spans from the same trace share
     * the same `trace_id`. The ID is a 16-byte array. An ID with all zeroes
     * is considered invalid.
     * This field is semantically required. Receiver should generate new
     * random trace_id if empty or invalid trace_id was received.
     * This field is required.
     * </pre>
     *
     * <code>bytes trace_id = 1;</code>
     */
    public Builder setTraceId(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }

      traceId_ = value;
      onChanged();
      return this;
    }

    /**
     * <pre>
     * A unique identifier for a trace. All spans from the same trace share
     * the same `trace_id`. The ID is a 16-byte array. An ID with all zeroes
     * is considered invalid.
     * This field is semantically required. Receiver should generate new
     * random trace_id if empty or invalid trace_id was received.
     * This field is required.
     * </pre>
     *
     * <code>bytes trace_id = 1;</code>
     */
    public Builder clearTraceId() {

      traceId_ = getDefaultInstance().getTraceId();
      onChanged();
      return this;
    }

    private com.google.protobuf.ByteString spanId_ = com.google.protobuf.ByteString.EMPTY;

    /**
     * <pre>
     * A unique identifier for a span within a trace, assigned when the span
     * is created. The ID is an 8-byte array. An ID with all zeroes is considered
     * invalid.
     * This field is semantically required. Receiver should generate new
     * random span_id if empty or invalid span_id was received.
     * This field is required.
     * </pre>
     *
     * <code>bytes span_id = 2;</code>
     */
    public com.google.protobuf.ByteString getSpanId() {
      return spanId_;
    }

    /**
     * <pre>
     * A unique identifier for a span within a trace, assigned when the span
     * is created. The ID is an 8-byte array. An ID with all zeroes is considered
     * invalid.
     * This field is semantically required. Receiver should generate new
     * random span_id if empty or invalid span_id was received.
     * This field is required.
     * </pre>
     *
     * <code>bytes span_id = 2;</code>
     */
    public Builder setSpanId(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }

      spanId_ = value;
      onChanged();
      return this;
    }

    /**
     * <pre>
     * A unique identifier for a span within a trace, assigned when the span
     * is created. The ID is an 8-byte array. An ID with all zeroes is considered
     * invalid.
     * This field is semantically required. Receiver should generate new
     * random span_id if empty or invalid span_id was received.
     * This field is required.
     * </pre>
     *
     * <code>bytes span_id = 2;</code>
     */
    public Builder clearSpanId() {

      spanId_ = getDefaultInstance().getSpanId();
      onChanged();
      return this;
    }

    private java.lang.Object traceState_ = "";

    /**
     * <pre>
     * trace_state conveys information about request position in multiple distributed tracing graphs.
     * It is a trace_state in w3c-trace-context format: https://www.w3.org/TR/trace-context/#tracestate-header
     * See also https://github.com/w3c/distributed-tracing for more details about this field.
     * </pre>
     *
     * <code>string trace_state = 3;</code>
     */
    public java.lang.String getTraceState() {
      java.lang.Object ref = traceState_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        traceState_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }

    /**
     * <pre>
     * trace_state conveys information about request position in multiple distributed tracing graphs.
     * It is a trace_state in w3c-trace-context format: https://www.w3.org/TR/trace-context/#tracestate-header
     * See also https://github.com/w3c/distributed-tracing for more details about this field.
     * </pre>
     *
     * <code>string trace_state = 3;</code>
     */
    public com.google.protobuf.ByteString getTraceStateBytes() {
      java.lang.Object ref = traceState_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        traceState_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    /**
     * <pre>
     * trace_state conveys information about request position in multiple distributed tracing graphs.
     * It is a trace_state in w3c-trace-context format: https://www.w3.org/TR/trace-context/#tracestate-header
     * See also https://github.com/w3c/distributed-tracing for more details about this field.
     * </pre>
     *
     * <code>string trace_state = 3;</code>
     */
    public Builder setTraceState(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }

      traceState_ = value;
      onChanged();
      return this;
    }

    /**
     * <pre>
     * trace_state conveys information about request position in multiple distributed tracing graphs.
     * It is a trace_state in w3c-trace-context format: https://www.w3.org/TR/trace-context/#tracestate-header
     * See also https://github.com/w3c/distributed-tracing for more details about this field.
     * </pre>
     *
     * <code>string trace_state = 3;</code>
     */
    public Builder clearTraceState() {

      traceState_ = getDefaultInstance().getTraceState();
      onChanged();
      return this;
    }

    /**
     * <pre>
     * trace_state conveys information about request position in multiple distributed tracing graphs.
     * It is a trace_state in w3c-trace-context format: https://www.w3.org/TR/trace-context/#tracestate-header
     * See also https://github.com/w3c/distributed-tracing for more details about this field.
     * </pre>
     *
     * <code>string trace_state = 3;</code>
     */
    public Builder setTraceStateBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);

      traceState_ = value;
      onChanged();
      return this;
    }

    private com.google.protobuf.ByteString parentSpanId_ = com.google.protobuf.ByteString.EMPTY;

    /**
     * <pre>
     * The `span_id` of this span's parent span. If this is a root span, then this
     * field must be empty. The ID is an 8-byte array.
     * </pre>
     *
     * <code>bytes parent_span_id = 4;</code>
     */
    public com.google.protobuf.ByteString getParentSpanId() {
      return parentSpanId_;
    }

    /**
     * <pre>
     * The `span_id` of this span's parent span. If this is a root span, then this
     * field must be empty. The ID is an 8-byte array.
     * </pre>
     *
     * <code>bytes parent_span_id = 4;</code>
     */
    public Builder setParentSpanId(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }

      parentSpanId_ = value;
      onChanged();
      return this;
    }

    /**
     * <pre>
     * The `span_id` of this span's parent span. If this is a root span, then this
     * field must be empty. The ID is an 8-byte array.
     * </pre>
     *
     * <code>bytes parent_span_id = 4;</code>
     */
    public Builder clearParentSpanId() {

      parentSpanId_ = getDefaultInstance().getParentSpanId();
      onChanged();
      return this;
    }

    private java.lang.Object name_ = "";

    /**
     * <pre>
     * A description of the span's operation.
     * For example, the name can be a qualified method name or a file name
     * and a line number where the operation is called. A best practice is to use
     * the same display name at the same call point in an application.
     * This makes it easier to correlate spans in different traces.
     * This field is semantically required to be set to non-empty string.
     * Empty value is equivalent to an unknown span name.
     * This field is required.
     * </pre>
     *
     * <code>string name = 5;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }

    /**
     * <pre>
     * A description of the span's operation.
     * For example, the name can be a qualified method name or a file name
     * and a line number where the operation is called. A best practice is to use
     * the same display name at the same call point in an application.
     * This makes it easier to correlate spans in different traces.
     * This field is semantically required to be set to non-empty string.
     * Empty value is equivalent to an unknown span name.
     * This field is required.
     * </pre>
     *
     * <code>string name = 5;</code>
     */
    public com.google.protobuf.ByteString getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    /**
     * <pre>
     * A description of the span's operation.
     * For example, the name can be a qualified method name or a file name
     * and a line number where the operation is called. A best practice is to use
     * the same display name at the same call point in an application.
     * This makes it easier to correlate spans in different traces.
     * This field is semantically required to be set to non-empty string.
     * Empty value is equivalent to an unknown span name.
     * This field is required.
     * </pre>
     *
     * <code>string name = 5;</code>
     */
    public Builder setName(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }

      name_ = value;
      onChanged();
      return this;
    }

    /**
     * <pre>
     * A description of the span's operation.
     * For example, the name can be a qualified method name or a file name
     * and a line number where the operation is called. A best practice is to use
     * the same display name at the same call point in an application.
     * This makes it easier to correlate spans in different traces.
     * This field is semantically required to be set to non-empty string.
     * Empty value is equivalent to an unknown span name.
     * This field is required.
     * </pre>
     *
     * <code>string name = 5;</code>
     */
    public Builder clearName() {

      name_ = getDefaultInstance().getName();
      onChanged();
      return this;
    }

    /**
     * <pre>
     * A description of the span's operation.
     * For example, the name can be a qualified method name or a file name
     * and a line number where the operation is called. A best practice is to use
     * the same display name at the same call point in an application.
     * This makes it easier to correlate spans in different traces.
     * This field is semantically required to be set to non-empty string.
     * Empty value is equivalent to an unknown span name.
     * This field is required.
     * </pre>
     *
     * <code>string name = 5;</code>
     */
    public Builder setNameBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);

      name_ = value;
      onChanged();
      return this;
    }

    private int kind_ = 0;

    /**
     * <pre>
     * Distinguishes between spans generated in a particular context. For example,
     * two spans with the same name may be distinguished using `CLIENT` (caller)
     * and `SERVER` (callee) to identify queueing latency associated with the span.
     * </pre>
     *
     * <code>.opentelemetry.proto.trace.v1.Span.SpanKind kind = 6;</code>
     */
    public int getKindValue() {
      return kind_;
    }

    /**
     * <pre>
     * Distinguishes between spans generated in a particular context. For example,
     * two spans with the same name may be distinguished using `CLIENT` (caller)
     * and `SERVER` (callee) to identify queueing latency associated with the span.
     * </pre>
     *
     * <code>.opentelemetry.proto.trace.v1.Span.SpanKind kind = 6;</code>
     */
    public Builder setKindValue(int value) {
      kind_ = value;
      onChanged();
      return this;
    }

    /**
     * <pre>
     * Distinguishes between spans generated in a particular context. For example,
     * two spans with the same name may be distinguished using `CLIENT` (caller)
     * and `SERVER` (callee) to identify queueing latency associated with the span.
     * </pre>
     *
     * <code>.opentelemetry.proto.trace.v1.Span.SpanKind kind = 6;</code>
     */
    public io.opentelemetry.proto.trace.v1.Span.SpanKind getKind() {
      @SuppressWarnings("deprecation")
      io.opentelemetry.proto.trace.v1.Span.SpanKind result =
          io.opentelemetry.proto.trace.v1.Span.SpanKind.valueOf(kind_);
      return result == null ? io.opentelemetry.proto.trace.v1.Span.SpanKind.UNRECOGNIZED : result;
    }

    /**
     * <pre>
     * Distinguishes between spans generated in a particular context. For example,
     * two spans with the same name may be distinguished using `CLIENT` (caller)
     * and `SERVER` (callee) to identify queueing latency associated with the span.
     * </pre>
     *
     * <code>.opentelemetry.proto.trace.v1.Span.SpanKind kind = 6;</code>
     */
    public Builder setKind(io.opentelemetry.proto.trace.v1.Span.SpanKind value) {
      if (value == null) {
        throw new NullPointerException();
      }

      kind_ = value.getNumber();
      onChanged();
      return this;
    }

    /**
     * <pre>
     * Distinguishes between spans generated in a particular context. For example,
     * two spans with the same name may be distinguished using `CLIENT` (caller)
     * and `SERVER` (callee) to identify queueing latency associated with the span.
     * </pre>
     *
     * <code>.opentelemetry.proto.trace.v1.Span.SpanKind kind = 6;</code>
     */
    public Builder clearKind() {

      kind_ = 0;
      onChanged();
      return this;
    }

    private long startTimeUnixNano_;

    /**
     * <pre>
     * start_time_unix_nano is the start time of the span. On the client side, this is the time
     * kept by the local machine where the span execution starts. On the server side, this
     * is the time when the server's application handler starts running.
     * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
     * This field is semantically required and it is expected that end_time &gt;= start_time.
     * </pre>
     *
     * <code>fixed64 start_time_unix_nano = 7;</code>
     */
    public long getStartTimeUnixNano() {
      return startTimeUnixNano_;
    }

    /**
     * <pre>
     * start_time_unix_nano is the start time of the span. On the client side, this is the time
     * kept by the local machine where the span execution starts. On the server side, this
     * is the time when the server's application handler starts running.
     * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
     * This field is semantically required and it is expected that end_time &gt;= start_time.
     * </pre>
     *
     * <code>fixed64 start_time_unix_nano = 7;</code>
     */
    public Builder setStartTimeUnixNano(long value) {

      startTimeUnixNano_ = value;
      onChanged();
      return this;
    }

    /**
     * <pre>
     * start_time_unix_nano is the start time of the span. On the client side, this is the time
     * kept by the local machine where the span execution starts. On the server side, this
     * is the time when the server's application handler starts running.
     * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
     * This field is semantically required and it is expected that end_time &gt;= start_time.
     * </pre>
     *
     * <code>fixed64 start_time_unix_nano = 7;</code>
     */
    public Builder clearStartTimeUnixNano() {

      startTimeUnixNano_ = 0L;
      onChanged();
      return this;
    }

    private long endTimeUnixNano_;

    /**
     * <pre>
     * end_time_unix_nano is the end time of the span. On the client side, this is the time
     * kept by the local machine where the span execution ends. On the server side, this
     * is the time when the server application handler stops running.
     * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
     * This field is semantically required and it is expected that end_time &gt;= start_time.
     * </pre>
     *
     * <code>fixed64 end_time_unix_nano = 8;</code>
     */
    public long getEndTimeUnixNano() {
      return endTimeUnixNano_;
    }

    /**
     * <pre>
     * end_time_unix_nano is the end time of the span. On the client side, this is the time
     * kept by the local machine where the span execution ends. On the server side, this
     * is the time when the server application handler stops running.
     * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
     * This field is semantically required and it is expected that end_time &gt;= start_time.
     * </pre>
     *
     * <code>fixed64 end_time_unix_nano = 8;</code>
     */
    public Builder setEndTimeUnixNano(long value) {

      endTimeUnixNano_ = value;
      onChanged();
      return this;
    }

    /**
     * <pre>
     * end_time_unix_nano is the end time of the span. On the client side, this is the time
     * kept by the local machine where the span execution ends. On the server side, this
     * is the time when the server application handler stops running.
     * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
     * This field is semantically required and it is expected that end_time &gt;= start_time.
     * </pre>
     *
     * <code>fixed64 end_time_unix_nano = 8;</code>
     */
    public Builder clearEndTimeUnixNano() {

      endTimeUnixNano_ = 0L;
      onChanged();
      return this;
    }

    private java.util.List<io.opentelemetry.proto.common.v1.KeyValue> attributes_ =
        java.util.Collections.emptyList();

    private void ensureAttributesIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        attributes_ =
            new java.util.ArrayList<io.opentelemetry.proto.common.v1.KeyValue>(attributes_);
        bitField0_ |= 0x00000001;
      }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<io.opentelemetry.proto.common.v1.KeyValue, io.opentelemetry.proto.common.v1.KeyValue.Builder, io.opentelemetry.proto.common.v1.KeyValueOrBuilder> attributesBuilder_;

    /**
     * <pre>
     * attributes is a collection of key/value pairs. Note, global attributes
     * like server name can be set using the resource API. Examples of attributes:
     *     "/http/user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"
     *     "/http/server_latency": 300
     *     "abc.com/myattribute": true
     *     "abc.com/score": 10.239
     * The OpenTelemetry API specification further restricts the allowed value types:
     * https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/common/README.md#attribute
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 9;</code>
     */
    public java.util.List<io.opentelemetry.proto.common.v1.KeyValue> getAttributesList() {
      if (attributesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(attributes_);
      } else {
        return attributesBuilder_.getMessageList();
      }
    }

    /**
     * <pre>
     * attributes is a collection of key/value pairs. Note, global attributes
     * like server name can be set using the resource API. Examples of attributes:
     *     "/http/user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"
     *     "/http/server_latency": 300
     *     "abc.com/myattribute": true
     *     "abc.com/score": 10.239
     * The OpenTelemetry API specification further restricts the allowed value types:
     * https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/common/README.md#attribute
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 9;</code>
     */
    public int getAttributesCount() {
      if (attributesBuilder_ == null) {
        return attributes_.size();
      } else {
        return attributesBuilder_.getCount();
      }
    }

    /**
     * <pre>
     * attributes is a collection of key/value pairs. Note, global attributes
     * like server name can be set using the resource API. Examples of attributes:
     *     "/http/user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"
     *     "/http/server_latency": 300
     *     "abc.com/myattribute": true
     *     "abc.com/score": 10.239
     * The OpenTelemetry API specification further restricts the allowed value types:
     * https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/common/README.md#attribute
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 9;</code>
     */
    public io.opentelemetry.proto.common.v1.KeyValue getAttributes(int index) {
      if (attributesBuilder_ == null) {
        return attributes_.get(index);
      } else {
        return attributesBuilder_.getMessage(index);
      }
    }

    /**
     * <pre>
     * attributes is a collection of key/value pairs. Note, global attributes
     * like server name can be set using the resource API. Examples of attributes:
     *     "/http/user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"
     *     "/http/server_latency": 300
     *     "abc.com/myattribute": true
     *     "abc.com/score": 10.239
     * The OpenTelemetry API specification further restricts the allowed value types:
     * https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/common/README.md#attribute
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 9;</code>
     */
    public Builder setAttributes(int index, io.opentelemetry.proto.common.v1.KeyValue value) {
      if (attributesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAttributesIsMutable();
        attributes_.set(index, value);
        onChanged();
      } else {
        attributesBuilder_.setMessage(index, value);
      }
      return this;
    }

    /**
     * <pre>
     * attributes is a collection of key/value pairs. Note, global attributes
     * like server name can be set using the resource API. Examples of attributes:
     *     "/http/user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"
     *     "/http/server_latency": 300
     *     "abc.com/myattribute": true
     *     "abc.com/score": 10.239
     * The OpenTelemetry API specification further restricts the allowed value types:
     * https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/common/README.md#attribute
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 9;</code>
     */
    public Builder setAttributes(int index,
        io.opentelemetry.proto.common.v1.KeyValue.Builder builderForValue) {
      if (attributesBuilder_ == null) {
        ensureAttributesIsMutable();
        attributes_.set(index, builderForValue.build());
        onChanged();
      } else {
        attributesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }

    /**
     * <pre>
     * attributes is a collection of key/value pairs. Note, global attributes
     * like server name can be set using the resource API. Examples of attributes:
     *     "/http/user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"
     *     "/http/server_latency": 300
     *     "abc.com/myattribute": true
     *     "abc.com/score": 10.239
     * The OpenTelemetry API specification further restricts the allowed value types:
     * https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/common/README.md#attribute
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 9;</code>
     */
    public Builder addAttributes(io.opentelemetry.proto.common.v1.KeyValue value) {
      if (attributesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAttributesIsMutable();
        attributes_.add(value);
        onChanged();
      } else {
        attributesBuilder_.addMessage(value);
      }
      return this;
    }

    /**
     * <pre>
     * attributes is a collection of key/value pairs. Note, global attributes
     * like server name can be set using the resource API. Examples of attributes:
     *     "/http/user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"
     *     "/http/server_latency": 300
     *     "abc.com/myattribute": true
     *     "abc.com/score": 10.239
     * The OpenTelemetry API specification further restricts the allowed value types:
     * https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/common/README.md#attribute
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 9;</code>
     */
    public Builder addAttributes(int index, io.opentelemetry.proto.common.v1.KeyValue value) {
      if (attributesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAttributesIsMutable();
        attributes_.add(index, value);
        onChanged();
      } else {
        attributesBuilder_.addMessage(index, value);
      }
      return this;
    }

    /**
     * <pre>
     * attributes is a collection of key/value pairs. Note, global attributes
     * like server name can be set using the resource API. Examples of attributes:
     *     "/http/user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"
     *     "/http/server_latency": 300
     *     "abc.com/myattribute": true
     *     "abc.com/score": 10.239
     * The OpenTelemetry API specification further restricts the allowed value types:
     * https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/common/README.md#attribute
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 9;</code>
     */
    public Builder addAttributes(
        io.opentelemetry.proto.common.v1.KeyValue.Builder builderForValue) {
      if (attributesBuilder_ == null) {
        ensureAttributesIsMutable();
        attributes_.add(builderForValue.build());
        onChanged();
      } else {
        attributesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }

    /**
     * <pre>
     * attributes is a collection of key/value pairs. Note, global attributes
     * like server name can be set using the resource API. Examples of attributes:
     *     "/http/user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"
     *     "/http/server_latency": 300
     *     "abc.com/myattribute": true
     *     "abc.com/score": 10.239
     * The OpenTelemetry API specification further restricts the allowed value types:
     * https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/common/README.md#attribute
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 9;</code>
     */
    public Builder addAttributes(int index,
        io.opentelemetry.proto.common.v1.KeyValue.Builder builderForValue) {
      if (attributesBuilder_ == null) {
        ensureAttributesIsMutable();
        attributes_.add(index, builderForValue.build());
        onChanged();
      } else {
        attributesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }

    /**
     * <pre>
     * attributes is a collection of key/value pairs. Note, global attributes
     * like server name can be set using the resource API. Examples of attributes:
     *     "/http/user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"
     *     "/http/server_latency": 300
     *     "abc.com/myattribute": true
     *     "abc.com/score": 10.239
     * The OpenTelemetry API specification further restricts the allowed value types:
     * https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/common/README.md#attribute
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 9;</code>
     */
    public Builder addAllAttributes(
        java.lang.Iterable<? extends io.opentelemetry.proto.common.v1.KeyValue> values) {
      if (attributesBuilder_ == null) {
        ensureAttributesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(values, attributes_);
        onChanged();
      } else {
        attributesBuilder_.addAllMessages(values);
      }
      return this;
    }

    /**
     * <pre>
     * attributes is a collection of key/value pairs. Note, global attributes
     * like server name can be set using the resource API. Examples of attributes:
     *     "/http/user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"
     *     "/http/server_latency": 300
     *     "abc.com/myattribute": true
     *     "abc.com/score": 10.239
     * The OpenTelemetry API specification further restricts the allowed value types:
     * https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/common/README.md#attribute
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 9;</code>
     */
    public Builder clearAttributes() {
      if (attributesBuilder_ == null) {
        attributes_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        attributesBuilder_.clear();
      }
      return this;
    }

    /**
     * <pre>
     * attributes is a collection of key/value pairs. Note, global attributes
     * like server name can be set using the resource API. Examples of attributes:
     *     "/http/user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"
     *     "/http/server_latency": 300
     *     "abc.com/myattribute": true
     *     "abc.com/score": 10.239
     * The OpenTelemetry API specification further restricts the allowed value types:
     * https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/common/README.md#attribute
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 9;</code>
     */
    public Builder removeAttributes(int index) {
      if (attributesBuilder_ == null) {
        ensureAttributesIsMutable();
        attributes_.remove(index);
        onChanged();
      } else {
        attributesBuilder_.remove(index);
      }
      return this;
    }

    /**
     * <pre>
     * attributes is a collection of key/value pairs. Note, global attributes
     * like server name can be set using the resource API. Examples of attributes:
     *     "/http/user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"
     *     "/http/server_latency": 300
     *     "abc.com/myattribute": true
     *     "abc.com/score": 10.239
     * The OpenTelemetry API specification further restricts the allowed value types:
     * https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/common/README.md#attribute
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 9;</code>
     */
    public io.opentelemetry.proto.common.v1.KeyValue.Builder getAttributesBuilder(int index) {
      return getAttributesFieldBuilder().getBuilder(index);
    }

    /**
     * <pre>
     * attributes is a collection of key/value pairs. Note, global attributes
     * like server name can be set using the resource API. Examples of attributes:
     *     "/http/user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"
     *     "/http/server_latency": 300
     *     "abc.com/myattribute": true
     *     "abc.com/score": 10.239
     * The OpenTelemetry API specification further restricts the allowed value types:
     * https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/common/README.md#attribute
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 9;</code>
     */
    public io.opentelemetry.proto.common.v1.KeyValueOrBuilder getAttributesOrBuilder(int index) {
      if (attributesBuilder_ == null) {
        return attributes_.get(index);
      } else {
        return attributesBuilder_.getMessageOrBuilder(index);
      }
    }

    /**
     * <pre>
     * attributes is a collection of key/value pairs. Note, global attributes
     * like server name can be set using the resource API. Examples of attributes:
     *     "/http/user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"
     *     "/http/server_latency": 300
     *     "abc.com/myattribute": true
     *     "abc.com/score": 10.239
     * The OpenTelemetry API specification further restricts the allowed value types:
     * https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/common/README.md#attribute
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 9;</code>
     */
    public java.util.List<? extends io.opentelemetry.proto.common.v1.KeyValueOrBuilder> getAttributesOrBuilderList() {
      if (attributesBuilder_ != null) {
        return attributesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(attributes_);
      }
    }

    /**
     * <pre>
     * attributes is a collection of key/value pairs. Note, global attributes
     * like server name can be set using the resource API. Examples of attributes:
     *     "/http/user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"
     *     "/http/server_latency": 300
     *     "abc.com/myattribute": true
     *     "abc.com/score": 10.239
     * The OpenTelemetry API specification further restricts the allowed value types:
     * https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/common/README.md#attribute
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 9;</code>
     */
    public io.opentelemetry.proto.common.v1.KeyValue.Builder addAttributesBuilder() {
      return getAttributesFieldBuilder()
          .addBuilder(io.opentelemetry.proto.common.v1.KeyValue.getDefaultInstance());
    }

    /**
     * <pre>
     * attributes is a collection of key/value pairs. Note, global attributes
     * like server name can be set using the resource API. Examples of attributes:
     *     "/http/user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"
     *     "/http/server_latency": 300
     *     "abc.com/myattribute": true
     *     "abc.com/score": 10.239
     * The OpenTelemetry API specification further restricts the allowed value types:
     * https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/common/README.md#attribute
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 9;</code>
     */
    public io.opentelemetry.proto.common.v1.KeyValue.Builder addAttributesBuilder(int index) {
      return getAttributesFieldBuilder().addBuilder(index,
          io.opentelemetry.proto.common.v1.KeyValue.getDefaultInstance());
    }

    /**
     * <pre>
     * attributes is a collection of key/value pairs. Note, global attributes
     * like server name can be set using the resource API. Examples of attributes:
     *     "/http/user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"
     *     "/http/server_latency": 300
     *     "abc.com/myattribute": true
     *     "abc.com/score": 10.239
     * The OpenTelemetry API specification further restricts the allowed value types:
     * https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/common/README.md#attribute
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 9;</code>
     */
    public java.util.List<io.opentelemetry.proto.common.v1.KeyValue.Builder> getAttributesBuilderList() {
      return getAttributesFieldBuilder().getBuilderList();
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<io.opentelemetry.proto.common.v1.KeyValue, io.opentelemetry.proto.common.v1.KeyValue.Builder, io.opentelemetry.proto.common.v1.KeyValueOrBuilder> getAttributesFieldBuilder() {
      if (attributesBuilder_ == null) {
        attributesBuilder_ =
            new com.google.protobuf.RepeatedFieldBuilderV3<io.opentelemetry.proto.common.v1.KeyValue, io.opentelemetry.proto.common.v1.KeyValue.Builder, io.opentelemetry.proto.common.v1.KeyValueOrBuilder>(
                attributes_, ((bitField0_ & 0x00000001) != 0), getParentForChildren(), isClean());
        attributes_ = null;
      }
      return attributesBuilder_;
    }

    private int droppedAttributesCount_;

    /**
     * <pre>
     * dropped_attributes_count is the number of attributes that were discarded. Attributes
     * can be discarded because their keys are too long or because there are too many
     * attributes. If this value is 0, then no attributes were dropped.
     * </pre>
     *
     * <code>uint32 dropped_attributes_count = 10;</code>
     */
    public int getDroppedAttributesCount() {
      return droppedAttributesCount_;
    }

    /**
     * <pre>
     * dropped_attributes_count is the number of attributes that were discarded. Attributes
     * can be discarded because their keys are too long or because there are too many
     * attributes. If this value is 0, then no attributes were dropped.
     * </pre>
     *
     * <code>uint32 dropped_attributes_count = 10;</code>
     */
    public Builder setDroppedAttributesCount(int value) {

      droppedAttributesCount_ = value;
      onChanged();
      return this;
    }

    /**
     * <pre>
     * dropped_attributes_count is the number of attributes that were discarded. Attributes
     * can be discarded because their keys are too long or because there are too many
     * attributes. If this value is 0, then no attributes were dropped.
     * </pre>
     *
     * <code>uint32 dropped_attributes_count = 10;</code>
     */
    public Builder clearDroppedAttributesCount() {

      droppedAttributesCount_ = 0;
      onChanged();
      return this;
    }

    private java.util.List<io.opentelemetry.proto.trace.v1.Span.Event> events_ =
        java.util.Collections.emptyList();

    private void ensureEventsIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        events_ = new java.util.ArrayList<io.opentelemetry.proto.trace.v1.Span.Event>(events_);
        bitField0_ |= 0x00000002;
      }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<io.opentelemetry.proto.trace.v1.Span.Event, io.opentelemetry.proto.trace.v1.Span.Event.Builder, io.opentelemetry.proto.trace.v1.Span.EventOrBuilder> eventsBuilder_;

    /**
     * <pre>
     * events is a collection of Event items.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.trace.v1.Span.Event events = 11;</code>
     */
    public java.util.List<io.opentelemetry.proto.trace.v1.Span.Event> getEventsList() {
      if (eventsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(events_);
      } else {
        return eventsBuilder_.getMessageList();
      }
    }

    /**
     * <pre>
     * events is a collection of Event items.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.trace.v1.Span.Event events = 11;</code>
     */
    public int getEventsCount() {
      if (eventsBuilder_ == null) {
        return events_.size();
      } else {
        return eventsBuilder_.getCount();
      }
    }

    /**
     * <pre>
     * events is a collection of Event items.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.trace.v1.Span.Event events = 11;</code>
     */
    public io.opentelemetry.proto.trace.v1.Span.Event getEvents(int index) {
      if (eventsBuilder_ == null) {
        return events_.get(index);
      } else {
        return eventsBuilder_.getMessage(index);
      }
    }

    /**
     * <pre>
     * events is a collection of Event items.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.trace.v1.Span.Event events = 11;</code>
     */
    public Builder setEvents(int index, io.opentelemetry.proto.trace.v1.Span.Event value) {
      if (eventsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureEventsIsMutable();
        events_.set(index, value);
        onChanged();
      } else {
        eventsBuilder_.setMessage(index, value);
      }
      return this;
    }

    /**
     * <pre>
     * events is a collection of Event items.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.trace.v1.Span.Event events = 11;</code>
     */
    public Builder setEvents(int index,
        io.opentelemetry.proto.trace.v1.Span.Event.Builder builderForValue) {
      if (eventsBuilder_ == null) {
        ensureEventsIsMutable();
        events_.set(index, builderForValue.build());
        onChanged();
      } else {
        eventsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }

    /**
     * <pre>
     * events is a collection of Event items.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.trace.v1.Span.Event events = 11;</code>
     */
    public Builder addEvents(io.opentelemetry.proto.trace.v1.Span.Event value) {
      if (eventsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureEventsIsMutable();
        events_.add(value);
        onChanged();
      } else {
        eventsBuilder_.addMessage(value);
      }
      return this;
    }

    /**
     * <pre>
     * events is a collection of Event items.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.trace.v1.Span.Event events = 11;</code>
     */
    public Builder addEvents(int index, io.opentelemetry.proto.trace.v1.Span.Event value) {
      if (eventsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureEventsIsMutable();
        events_.add(index, value);
        onChanged();
      } else {
        eventsBuilder_.addMessage(index, value);
      }
      return this;
    }

    /**
     * <pre>
     * events is a collection of Event items.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.trace.v1.Span.Event events = 11;</code>
     */
    public Builder addEvents(io.opentelemetry.proto.trace.v1.Span.Event.Builder builderForValue) {
      if (eventsBuilder_ == null) {
        ensureEventsIsMutable();
        events_.add(builderForValue.build());
        onChanged();
      } else {
        eventsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }

    /**
     * <pre>
     * events is a collection of Event items.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.trace.v1.Span.Event events = 11;</code>
     */
    public Builder addEvents(int index,
        io.opentelemetry.proto.trace.v1.Span.Event.Builder builderForValue) {
      if (eventsBuilder_ == null) {
        ensureEventsIsMutable();
        events_.add(index, builderForValue.build());
        onChanged();
      } else {
        eventsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }

    /**
     * <pre>
     * events is a collection of Event items.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.trace.v1.Span.Event events = 11;</code>
     */
    public Builder addAllEvents(
        java.lang.Iterable<? extends io.opentelemetry.proto.trace.v1.Span.Event> values) {
      if (eventsBuilder_ == null) {
        ensureEventsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(values, events_);
        onChanged();
      } else {
        eventsBuilder_.addAllMessages(values);
      }
      return this;
    }

    /**
     * <pre>
     * events is a collection of Event items.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.trace.v1.Span.Event events = 11;</code>
     */
    public Builder clearEvents() {
      if (eventsBuilder_ == null) {
        events_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        eventsBuilder_.clear();
      }
      return this;
    }

    /**
     * <pre>
     * events is a collection of Event items.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.trace.v1.Span.Event events = 11;</code>
     */
    public Builder removeEvents(int index) {
      if (eventsBuilder_ == null) {
        ensureEventsIsMutable();
        events_.remove(index);
        onChanged();
      } else {
        eventsBuilder_.remove(index);
      }
      return this;
    }

    /**
     * <pre>
     * events is a collection of Event items.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.trace.v1.Span.Event events = 11;</code>
     */
    public io.opentelemetry.proto.trace.v1.Span.Event.Builder getEventsBuilder(int index) {
      return getEventsFieldBuilder().getBuilder(index);
    }

    /**
     * <pre>
     * events is a collection of Event items.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.trace.v1.Span.Event events = 11;</code>
     */
    public io.opentelemetry.proto.trace.v1.Span.EventOrBuilder getEventsOrBuilder(int index) {
      if (eventsBuilder_ == null) {
        return events_.get(index);
      } else {
        return eventsBuilder_.getMessageOrBuilder(index);
      }
    }

    /**
     * <pre>
     * events is a collection of Event items.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.trace.v1.Span.Event events = 11;</code>
     */
    public java.util.List<? extends io.opentelemetry.proto.trace.v1.Span.EventOrBuilder> getEventsOrBuilderList() {
      if (eventsBuilder_ != null) {
        return eventsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(events_);
      }
    }

    /**
     * <pre>
     * events is a collection of Event items.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.trace.v1.Span.Event events = 11;</code>
     */
    public io.opentelemetry.proto.trace.v1.Span.Event.Builder addEventsBuilder() {
      return getEventsFieldBuilder()
          .addBuilder(io.opentelemetry.proto.trace.v1.Span.Event.getDefaultInstance());
    }

    /**
     * <pre>
     * events is a collection of Event items.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.trace.v1.Span.Event events = 11;</code>
     */
    public io.opentelemetry.proto.trace.v1.Span.Event.Builder addEventsBuilder(int index) {
      return getEventsFieldBuilder().addBuilder(index,
          io.opentelemetry.proto.trace.v1.Span.Event.getDefaultInstance());
    }

    /**
     * <pre>
     * events is a collection of Event items.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.trace.v1.Span.Event events = 11;</code>
     */
    public java.util.List<io.opentelemetry.proto.trace.v1.Span.Event.Builder> getEventsBuilderList() {
      return getEventsFieldBuilder().getBuilderList();
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<io.opentelemetry.proto.trace.v1.Span.Event, io.opentelemetry.proto.trace.v1.Span.Event.Builder, io.opentelemetry.proto.trace.v1.Span.EventOrBuilder> getEventsFieldBuilder() {
      if (eventsBuilder_ == null) {
        eventsBuilder_ =
            new com.google.protobuf.RepeatedFieldBuilderV3<io.opentelemetry.proto.trace.v1.Span.Event, io.opentelemetry.proto.trace.v1.Span.Event.Builder, io.opentelemetry.proto.trace.v1.Span.EventOrBuilder>(
                events_, ((bitField0_ & 0x00000002) != 0), getParentForChildren(), isClean());
        events_ = null;
      }
      return eventsBuilder_;
    }

    private int droppedEventsCount_;

    /**
     * <pre>
     * dropped_events_count is the number of dropped events. If the value is 0, then no
     * events were dropped.
     * </pre>
     *
     * <code>uint32 dropped_events_count = 12;</code>
     */
    public int getDroppedEventsCount() {
      return droppedEventsCount_;
    }

    /**
     * <pre>
     * dropped_events_count is the number of dropped events. If the value is 0, then no
     * events were dropped.
     * </pre>
     *
     * <code>uint32 dropped_events_count = 12;</code>
     */
    public Builder setDroppedEventsCount(int value) {

      droppedEventsCount_ = value;
      onChanged();
      return this;
    }

    /**
     * <pre>
     * dropped_events_count is the number of dropped events. If the value is 0, then no
     * events were dropped.
     * </pre>
     *
     * <code>uint32 dropped_events_count = 12;</code>
     */
    public Builder clearDroppedEventsCount() {

      droppedEventsCount_ = 0;
      onChanged();
      return this;
    }

    private java.util.List<io.opentelemetry.proto.trace.v1.Span.Link> links_ =
        java.util.Collections.emptyList();

    private void ensureLinksIsMutable() {
      if (!((bitField0_ & 0x00000004) != 0)) {
        links_ = new java.util.ArrayList<io.opentelemetry.proto.trace.v1.Span.Link>(links_);
        bitField0_ |= 0x00000004;
      }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<io.opentelemetry.proto.trace.v1.Span.Link, io.opentelemetry.proto.trace.v1.Span.Link.Builder, io.opentelemetry.proto.trace.v1.Span.LinkOrBuilder> linksBuilder_;

    /**
     * <pre>
     * links is a collection of Links, which are references from this span to a span
     * in the same or different trace.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.trace.v1.Span.Link links = 13;</code>
     */
    public java.util.List<io.opentelemetry.proto.trace.v1.Span.Link> getLinksList() {
      if (linksBuilder_ == null) {
        return java.util.Collections.unmodifiableList(links_);
      } else {
        return linksBuilder_.getMessageList();
      }
    }

    /**
     * <pre>
     * links is a collection of Links, which are references from this span to a span
     * in the same or different trace.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.trace.v1.Span.Link links = 13;</code>
     */
    public int getLinksCount() {
      if (linksBuilder_ == null) {
        return links_.size();
      } else {
        return linksBuilder_.getCount();
      }
    }

    /**
     * <pre>
     * links is a collection of Links, which are references from this span to a span
     * in the same or different trace.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.trace.v1.Span.Link links = 13;</code>
     */
    public io.opentelemetry.proto.trace.v1.Span.Link getLinks(int index) {
      if (linksBuilder_ == null) {
        return links_.get(index);
      } else {
        return linksBuilder_.getMessage(index);
      }
    }

    /**
     * <pre>
     * links is a collection of Links, which are references from this span to a span
     * in the same or different trace.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.trace.v1.Span.Link links = 13;</code>
     */
    public Builder setLinks(int index, io.opentelemetry.proto.trace.v1.Span.Link value) {
      if (linksBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureLinksIsMutable();
        links_.set(index, value);
        onChanged();
      } else {
        linksBuilder_.setMessage(index, value);
      }
      return this;
    }

    /**
     * <pre>
     * links is a collection of Links, which are references from this span to a span
     * in the same or different trace.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.trace.v1.Span.Link links = 13;</code>
     */
    public Builder setLinks(int index,
        io.opentelemetry.proto.trace.v1.Span.Link.Builder builderForValue) {
      if (linksBuilder_ == null) {
        ensureLinksIsMutable();
        links_.set(index, builderForValue.build());
        onChanged();
      } else {
        linksBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }

    /**
     * <pre>
     * links is a collection of Links, which are references from this span to a span
     * in the same or different trace.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.trace.v1.Span.Link links = 13;</code>
     */
    public Builder addLinks(io.opentelemetry.proto.trace.v1.Span.Link value) {
      if (linksBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureLinksIsMutable();
        links_.add(value);
        onChanged();
      } else {
        linksBuilder_.addMessage(value);
      }
      return this;
    }

    /**
     * <pre>
     * links is a collection of Links, which are references from this span to a span
     * in the same or different trace.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.trace.v1.Span.Link links = 13;</code>
     */
    public Builder addLinks(int index, io.opentelemetry.proto.trace.v1.Span.Link value) {
      if (linksBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureLinksIsMutable();
        links_.add(index, value);
        onChanged();
      } else {
        linksBuilder_.addMessage(index, value);
      }
      return this;
    }

    /**
     * <pre>
     * links is a collection of Links, which are references from this span to a span
     * in the same or different trace.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.trace.v1.Span.Link links = 13;</code>
     */
    public Builder addLinks(io.opentelemetry.proto.trace.v1.Span.Link.Builder builderForValue) {
      if (linksBuilder_ == null) {
        ensureLinksIsMutable();
        links_.add(builderForValue.build());
        onChanged();
      } else {
        linksBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }

    /**
     * <pre>
     * links is a collection of Links, which are references from this span to a span
     * in the same or different trace.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.trace.v1.Span.Link links = 13;</code>
     */
    public Builder addLinks(int index,
        io.opentelemetry.proto.trace.v1.Span.Link.Builder builderForValue) {
      if (linksBuilder_ == null) {
        ensureLinksIsMutable();
        links_.add(index, builderForValue.build());
        onChanged();
      } else {
        linksBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }

    /**
     * <pre>
     * links is a collection of Links, which are references from this span to a span
     * in the same or different trace.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.trace.v1.Span.Link links = 13;</code>
     */
    public Builder addAllLinks(
        java.lang.Iterable<? extends io.opentelemetry.proto.trace.v1.Span.Link> values) {
      if (linksBuilder_ == null) {
        ensureLinksIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(values, links_);
        onChanged();
      } else {
        linksBuilder_.addAllMessages(values);
      }
      return this;
    }

    /**
     * <pre>
     * links is a collection of Links, which are references from this span to a span
     * in the same or different trace.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.trace.v1.Span.Link links = 13;</code>
     */
    public Builder clearLinks() {
      if (linksBuilder_ == null) {
        links_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
      } else {
        linksBuilder_.clear();
      }
      return this;
    }

    /**
     * <pre>
     * links is a collection of Links, which are references from this span to a span
     * in the same or different trace.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.trace.v1.Span.Link links = 13;</code>
     */
    public Builder removeLinks(int index) {
      if (linksBuilder_ == null) {
        ensureLinksIsMutable();
        links_.remove(index);
        onChanged();
      } else {
        linksBuilder_.remove(index);
      }
      return this;
    }

    /**
     * <pre>
     * links is a collection of Links, which are references from this span to a span
     * in the same or different trace.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.trace.v1.Span.Link links = 13;</code>
     */
    public io.opentelemetry.proto.trace.v1.Span.Link.Builder getLinksBuilder(int index) {
      return getLinksFieldBuilder().getBuilder(index);
    }

    /**
     * <pre>
     * links is a collection of Links, which are references from this span to a span
     * in the same or different trace.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.trace.v1.Span.Link links = 13;</code>
     */
    public io.opentelemetry.proto.trace.v1.Span.LinkOrBuilder getLinksOrBuilder(int index) {
      if (linksBuilder_ == null) {
        return links_.get(index);
      } else {
        return linksBuilder_.getMessageOrBuilder(index);
      }
    }

    /**
     * <pre>
     * links is a collection of Links, which are references from this span to a span
     * in the same or different trace.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.trace.v1.Span.Link links = 13;</code>
     */
    public java.util.List<? extends io.opentelemetry.proto.trace.v1.Span.LinkOrBuilder> getLinksOrBuilderList() {
      if (linksBuilder_ != null) {
        return linksBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(links_);
      }
    }

    /**
     * <pre>
     * links is a collection of Links, which are references from this span to a span
     * in the same or different trace.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.trace.v1.Span.Link links = 13;</code>
     */
    public io.opentelemetry.proto.trace.v1.Span.Link.Builder addLinksBuilder() {
      return getLinksFieldBuilder()
          .addBuilder(io.opentelemetry.proto.trace.v1.Span.Link.getDefaultInstance());
    }

    /**
     * <pre>
     * links is a collection of Links, which are references from this span to a span
     * in the same or different trace.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.trace.v1.Span.Link links = 13;</code>
     */
    public io.opentelemetry.proto.trace.v1.Span.Link.Builder addLinksBuilder(int index) {
      return getLinksFieldBuilder().addBuilder(index,
          io.opentelemetry.proto.trace.v1.Span.Link.getDefaultInstance());
    }

    /**
     * <pre>
     * links is a collection of Links, which are references from this span to a span
     * in the same or different trace.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.trace.v1.Span.Link links = 13;</code>
     */
    public java.util.List<io.opentelemetry.proto.trace.v1.Span.Link.Builder> getLinksBuilderList() {
      return getLinksFieldBuilder().getBuilderList();
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<io.opentelemetry.proto.trace.v1.Span.Link, io.opentelemetry.proto.trace.v1.Span.Link.Builder, io.opentelemetry.proto.trace.v1.Span.LinkOrBuilder> getLinksFieldBuilder() {
      if (linksBuilder_ == null) {
        linksBuilder_ =
            new com.google.protobuf.RepeatedFieldBuilderV3<io.opentelemetry.proto.trace.v1.Span.Link, io.opentelemetry.proto.trace.v1.Span.Link.Builder, io.opentelemetry.proto.trace.v1.Span.LinkOrBuilder>(
                links_, ((bitField0_ & 0x00000004) != 0), getParentForChildren(), isClean());
        links_ = null;
      }
      return linksBuilder_;
    }

    private int droppedLinksCount_;

    /**
     * <pre>
     * dropped_links_count is the number of dropped links after the maximum size was
     * enforced. If this value is 0, then no links were dropped.
     * </pre>
     *
     * <code>uint32 dropped_links_count = 14;</code>
     */
    public int getDroppedLinksCount() {
      return droppedLinksCount_;
    }

    /**
     * <pre>
     * dropped_links_count is the number of dropped links after the maximum size was
     * enforced. If this value is 0, then no links were dropped.
     * </pre>
     *
     * <code>uint32 dropped_links_count = 14;</code>
     */
    public Builder setDroppedLinksCount(int value) {

      droppedLinksCount_ = value;
      onChanged();
      return this;
    }

    /**
     * <pre>
     * dropped_links_count is the number of dropped links after the maximum size was
     * enforced. If this value is 0, then no links were dropped.
     * </pre>
     *
     * <code>uint32 dropped_links_count = 14;</code>
     */
    public Builder clearDroppedLinksCount() {

      droppedLinksCount_ = 0;
      onChanged();
      return this;
    }

    private io.opentelemetry.proto.trace.v1.Status status_;
    private com.google.protobuf.SingleFieldBuilderV3<io.opentelemetry.proto.trace.v1.Status, io.opentelemetry.proto.trace.v1.Status.Builder, io.opentelemetry.proto.trace.v1.StatusOrBuilder> statusBuilder_;

    /**
     * <pre>
     * An optional final status for this span. Semantically when Status isn't set, it means
     * span's status code is unset, i.e. assume STATUS_CODE_UNSET (code = 0).
     * </pre>
     *
     * <code>.opentelemetry.proto.trace.v1.Status status = 15;</code>
     */
    public boolean hasStatus() {
      return statusBuilder_ != null || status_ != null;
    }

    /**
     * <pre>
     * An optional final status for this span. Semantically when Status isn't set, it means
     * span's status code is unset, i.e. assume STATUS_CODE_UNSET (code = 0).
     * </pre>
     *
     * <code>.opentelemetry.proto.trace.v1.Status status = 15;</code>
     */
    public io.opentelemetry.proto.trace.v1.Status getStatus() {
      if (statusBuilder_ == null) {
        return status_ == null ? io.opentelemetry.proto.trace.v1.Status.getDefaultInstance()
            : status_;
      } else {
        return statusBuilder_.getMessage();
      }
    }

    /**
     * <pre>
     * An optional final status for this span. Semantically when Status isn't set, it means
     * span's status code is unset, i.e. assume STATUS_CODE_UNSET (code = 0).
     * </pre>
     *
     * <code>.opentelemetry.proto.trace.v1.Status status = 15;</code>
     */
    public Builder setStatus(io.opentelemetry.proto.trace.v1.Status value) {
      if (statusBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        status_ = value;
        onChanged();
      } else {
        statusBuilder_.setMessage(value);
      }

      return this;
    }

    /**
     * <pre>
     * An optional final status for this span. Semantically when Status isn't set, it means
     * span's status code is unset, i.e. assume STATUS_CODE_UNSET (code = 0).
     * </pre>
     *
     * <code>.opentelemetry.proto.trace.v1.Status status = 15;</code>
     */
    public Builder setStatus(io.opentelemetry.proto.trace.v1.Status.Builder builderForValue) {
      if (statusBuilder_ == null) {
        status_ = builderForValue.build();
        onChanged();
      } else {
        statusBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }

    /**
     * <pre>
     * An optional final status for this span. Semantically when Status isn't set, it means
     * span's status code is unset, i.e. assume STATUS_CODE_UNSET (code = 0).
     * </pre>
     *
     * <code>.opentelemetry.proto.trace.v1.Status status = 15;</code>
     */
    public Builder mergeStatus(io.opentelemetry.proto.trace.v1.Status value) {
      if (statusBuilder_ == null) {
        if (status_ != null) {
          status_ = io.opentelemetry.proto.trace.v1.Status.newBuilder(status_).mergeFrom(value)
              .buildPartial();
        } else {
          status_ = value;
        }
        onChanged();
      } else {
        statusBuilder_.mergeFrom(value);
      }

      return this;
    }

    /**
     * <pre>
     * An optional final status for this span. Semantically when Status isn't set, it means
     * span's status code is unset, i.e. assume STATUS_CODE_UNSET (code = 0).
     * </pre>
     *
     * <code>.opentelemetry.proto.trace.v1.Status status = 15;</code>
     */
    public Builder clearStatus() {
      if (statusBuilder_ == null) {
        status_ = null;
        onChanged();
      } else {
        status_ = null;
        statusBuilder_ = null;
      }

      return this;
    }

    /**
     * <pre>
     * An optional final status for this span. Semantically when Status isn't set, it means
     * span's status code is unset, i.e. assume STATUS_CODE_UNSET (code = 0).
     * </pre>
     *
     * <code>.opentelemetry.proto.trace.v1.Status status = 15;</code>
     */
    public io.opentelemetry.proto.trace.v1.Status.Builder getStatusBuilder() {

      onChanged();
      return getStatusFieldBuilder().getBuilder();
    }

    /**
     * <pre>
     * An optional final status for this span. Semantically when Status isn't set, it means
     * span's status code is unset, i.e. assume STATUS_CODE_UNSET (code = 0).
     * </pre>
     *
     * <code>.opentelemetry.proto.trace.v1.Status status = 15;</code>
     */
    public io.opentelemetry.proto.trace.v1.StatusOrBuilder getStatusOrBuilder() {
      if (statusBuilder_ != null) {
        return statusBuilder_.getMessageOrBuilder();
      } else {
        return status_ == null ? io.opentelemetry.proto.trace.v1.Status.getDefaultInstance()
            : status_;
      }
    }

    /**
     * <pre>
     * An optional final status for this span. Semantically when Status isn't set, it means
     * span's status code is unset, i.e. assume STATUS_CODE_UNSET (code = 0).
     * </pre>
     *
     * <code>.opentelemetry.proto.trace.v1.Status status = 15;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<io.opentelemetry.proto.trace.v1.Status, io.opentelemetry.proto.trace.v1.Status.Builder, io.opentelemetry.proto.trace.v1.StatusOrBuilder> getStatusFieldBuilder() {
      if (statusBuilder_ == null) {
        statusBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<io.opentelemetry.proto.trace.v1.Status, io.opentelemetry.proto.trace.v1.Status.Builder, io.opentelemetry.proto.trace.v1.StatusOrBuilder>(
                getStatus(), getParentForChildren(), isClean());
        status_ = null;
      }
      return statusBuilder_;
    }

    @java.lang.Override
    public final Builder setUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:opentelemetry.proto.trace.v1.Span)
  }

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.trace.v1.Span)
  private static final io.opentelemetry.proto.trace.v1.Span DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.opentelemetry.proto.trace.v1.Span();
  }

  public static io.opentelemetry.proto.trace.v1.Span getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Span> PARSER =
      new com.google.protobuf.AbstractParser<Span>() {
        @java.lang.Override
        public Span parsePartialFrom(com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Span(input, extensionRegistry);
        }
      };

  public static com.google.protobuf.Parser<Span> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Span> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.opentelemetry.proto.trace.v1.Span getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

