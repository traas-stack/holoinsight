# base services configs for extends

services:
  mysql:
    image: ${mysql_image:-mysql:8}
    environment:
      MYSQL_ROOT_PASSWORD: holoinsight
      MYSQL_USER: holoinsight
      MYSQL_PASSWORD: holoinsight
      MYSQL_DATABASE: holoinsight
    volumes:
    - ./my.cnf:/etc/mysql/conf.d/my.cnf
    restart: always
    ports:
    - 3306
    healthcheck:
      test: mysql -uholoinsight -pholoinsight -Dholoinsight
      interval: 3s
      retries: 300
      timeout: 10s
  # mysql web ui
  phpmyadmin:
    image: phpmyadmin:latest
    environment:
      PMA_HOSTS: mysql
      PMA_USER: holoinsight
      PMA_PASSWORD: holoinsight
    ports:
    - 80
    profiles:
    - debug
  ceresdb:
    image: ${ceresdb_image:-ceresdb/ceresdb-server:v1.0.0}
    volumes:
    - ./ceresdb_entrypoint.sh:/entrypoint.sh
    restart: always
    healthcheck:
      test: [ "CMD", "timeout", "1", "bash", "-c", "cat < /dev/null > /dev/tcp/127.0.0.1/5440" ]
      interval: 3s
      retries: 300
      timeout: 10s
  prometheus:
    image: prom/prometheus:latest
    volumes:
    - ./prometheus.yml:/etc/prometheus/prometheus.yml
    restart: always
    ports:
    - 9090
  server:
    image: ${server_image:-holoinsight/server:latest}
    environment:
      APP: "holoinsight-server-example"
      # You can override this env using the following command:
      # server_JAVA_APP_OPTS='-Xmx2048m -Xms2048m -Xmn1024m' ./up.sh
      JAVA_APP_OPTS: ${server_JAVA_APP_OPTS:--Xmx1024m -Xms1024m -Xmn512m}
      JAVA_DEBUG_OPTS: ${JAVA_DEBUG_OPTS:-}
      SW_AGENT_NAME: holoinsight-server-example
      SW_AGENT_AUTHENTICATION: example
      SW_AGENT_COLLECTOR_BACKEND_SERVICES: collector:11800
    healthcheck:
      test: [ "CMD", "bash", "/home/admin/bin/health.sh" ]
      interval: 3s
      retries: 300
      timeout: 10s
    ports:
    - 80 # nginx
    - 8080 # tomcat
    - 8000 # java debug
    - 7681 # web terminal
    volumes:
    - ./agent_entrypoint.sh:/agent_entrypoint.sh:ro
  collector:
    image: ${collector_image:-holoinsight/otelcontribcol:latest}
    healthcheck:
      test: [ "CMD", "timeout", "1", "bash", "-c", "cat < /dev/null > /dev/tcp/127.0.0.1/11800" ]
      interval: 3s
      retries: 300
      timeout: 10s
    ports:
    - 11800
    - 5001
    volumes:
    - ./collector-config.yml:/config/config.yml
  agent-image:
    image: ${agent_image:-holoinsight/agent:latest}
    pull_policy: always
    volumes:
    - ./agent.yaml:/temp/agent.yaml
    entrypoint: [ "true" ]
  mysql-data-init:
    image: ${mysql_image:-mysql:8}
    restart: "no"
    volumes:
    - ./my.cnf:/etc/mysql/conf.d/my.cnf
    - ./init-db.sh:/init-db.sh
    - ./exec-sql-script.sh:/exec-sql-script.sh
    - ../../../server/extension/extension-common-flyway/src/main/resources/db/migration:/sql/0migration
    working_dir: /
    entrypoint:
    - /init-db.sh
  es:
    image: ${es_image:-elasticsearch:7.16.1}
    environment:
      "discovery.type": "single-node"
      ES_JAVA_OPTS: -Xmx1g
    healthcheck:
      test: [ "CMD", "timeout", "1", "bash", "-c", "cat < /dev/null > /dev/tcp/127.0.0.1/9200" ]
      interval: 1s
      retries: 300
      timeout: 10s
  tatris:
    image: ${tatris_image:-tatrisio/tatris:latest}
    volumes:
    - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro
    ports:
    - 6060
    healthcheck:
      test: [ "CMD", "timeout", "1", "bash", "-c", "cat < /dev/null > /dev/tcp/127.0.0.1/6060" ]
      interval: 1s
      retries: 300
      timeout: 10s
  kibana:
    image: ${kibana_image:-kibana:7.16.1}
    environment:
      ELASTICSEARCH_HOSTS: 'http://es:9200'
    ports:
    - 5601
  grafana:
    image: grafana/grafana-oss:8.5.22
    volumes:
    - ./grafana/grafana.ini:/etc/grafana/grafana.ini
    ports:
    - 3000
    profiles:
    - debug
  # web terminal
  ttyd:
    image: tsl0922/ttyd
    entrypoint: [ "true" ]
  kafka:
    image: bitnami/kafka:3.5.0
    environment:
      KAFKA_CFG_NODE_ID: "0"
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@kafka:9093
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
      ALLOW_PLAINTEXT_LISTENER: "yes"
      #KAFKA_HEAP_OPTS: "-Xmx1024m -Xms1024m"
    ports:
    - 9092
    volumes:
    - ./kafka_init.sh:/docker-entrypoint-initdb.d/kafka_init.sh
  kafka-ui:
    image: provectuslabs/kafka-ui
    environment:
      KAFKA_CLUSTERS_0_NAME: test
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    ports:
    - 8080
    profiles:
    - debug
