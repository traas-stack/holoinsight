/*
 * Copyright 2022 Holoinsight Project Authors. Licensed under Apache-2.0.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gateway-for-agent.proto

package io.holoinsight.server.gateway.grpc;

public interface GetControlConfigsResponseOrBuilder extends
    // @@protoc_insertion_point(interface_extends:io.holoinsight.server.gateway.grpc.GetControlConfigsResponse)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * TODO 想一下服务端会有哪些控制参数
   * 1. 重新建连的频率, 比如默认是 30min 重新建连
   * 2. 如果曾经出现上报失败, 是否在未来等到网络通了之后, 将 "上报失败" 这个信息上报上去, 这样服务端可以知道当时上报失败了(虽然是事后)
   * 首先上报失败肯定要有本地日志统计, 现在就是想办法把这个失败统计写到远端去, 当然这个写本身也可能失败, 但它是比较重要的调试信息, 所以希望能进行一些持久化然后重试, 比如做一个10分钟粒度的
   * </pre>
   *
   * <code>.io.holoinsight.server.gateway.grpc.common.CommonResponseHeader header = 1;</code>
   * @return Whether the header field is set.
   */
  boolean hasHeader();
  /**
   * <pre>
   * TODO 想一下服务端会有哪些控制参数
   * 1. 重新建连的频率, 比如默认是 30min 重新建连
   * 2. 如果曾经出现上报失败, 是否在未来等到网络通了之后, 将 "上报失败" 这个信息上报上去, 这样服务端可以知道当时上报失败了(虽然是事后)
   * 首先上报失败肯定要有本地日志统计, 现在就是想办法把这个失败统计写到远端去, 当然这个写本身也可能失败, 但它是比较重要的调试信息, 所以希望能进行一些持久化然后重试, 比如做一个10分钟粒度的
   * </pre>
   *
   * <code>.io.holoinsight.server.gateway.grpc.common.CommonResponseHeader header = 1;</code>
   * @return The header.
   */
  io.holoinsight.server.gateway.grpc.common.CommonResponseHeader getHeader();
  /**
   * <pre>
   * TODO 想一下服务端会有哪些控制参数
   * 1. 重新建连的频率, 比如默认是 30min 重新建连
   * 2. 如果曾经出现上报失败, 是否在未来等到网络通了之后, 将 "上报失败" 这个信息上报上去, 这样服务端可以知道当时上报失败了(虽然是事后)
   * 首先上报失败肯定要有本地日志统计, 现在就是想办法把这个失败统计写到远端去, 当然这个写本身也可能失败, 但它是比较重要的调试信息, 所以希望能进行一些持久化然后重试, 比如做一个10分钟粒度的
   * </pre>
   *
   * <code>.io.holoinsight.server.gateway.grpc.common.CommonResponseHeader header = 1;</code>
   */
  io.holoinsight.server.gateway.grpc.common.CommonResponseHeaderOrBuilder getHeaderOrBuilder();
}
