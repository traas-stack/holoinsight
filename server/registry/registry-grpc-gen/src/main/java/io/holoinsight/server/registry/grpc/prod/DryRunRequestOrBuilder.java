/*
 * Copyright 2022 Holoinsight Project Authors. Licensed under Apache-2.0.
 */
// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: registry-for-prod.proto

package io.holoinsight.server.registry.grpc.prod;

public interface DryRunRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:io.holoinsight.server.registry.grpc.prod.DryRunRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * common request header
   * </pre>
   *
   * <code>.io.holoinsight.server.common.grpc.CommonRequestHeader header = 1;</code>
   */
  boolean hasHeader();

  /**
   * <pre>
   * common request header
   * </pre>
   *
   * <code>.io.holoinsight.server.common.grpc.CommonRequestHeader header = 1;</code>
   */
  io.holoinsight.server.common.grpc.CommonRequestHeader getHeader();

  /**
   * <pre>
   * common request header
   * </pre>
   *
   * <code>.io.holoinsight.server.common.grpc.CommonRequestHeader header = 1;</code>
   */
  io.holoinsight.server.common.grpc.CommonRequestHeaderOrBuilder getHeaderOrBuilder();

  /**
   * <pre>
   * 配置信息
   * </pre>
   *
   * <code>.io.holoinsight.server.registry.grpc.prod.DryRunRequest.CollectConfig config = 2;</code>
   */
  boolean hasConfig();

  /**
   * <pre>
   * 配置信息
   * </pre>
   *
   * <code>.io.holoinsight.server.registry.grpc.prod.DryRunRequest.CollectConfig config = 2;</code>
   */
  io.holoinsight.server.registry.grpc.prod.DryRunRequest.CollectConfig getConfig();

  /**
   * <pre>
   * 配置信息
   * </pre>
   *
   * <code>.io.holoinsight.server.registry.grpc.prod.DryRunRequest.CollectConfig config = 2;</code>
   */
  io.holoinsight.server.registry.grpc.prod.DryRunRequest.CollectConfigOrBuilder getConfigOrBuilder();

  /**
   * <pre>
   * 最终运行的目标, 在元数据里必须能找到
   * </pre>
   *
   * <code>.io.holoinsight.server.registry.grpc.prod.TargetIdentifier target = 3;</code>
   */
  boolean hasTarget();

  /**
   * <pre>
   * 最终运行的目标, 在元数据里必须能找到
   * </pre>
   *
   * <code>.io.holoinsight.server.registry.grpc.prod.TargetIdentifier target = 3;</code>
   */
  io.holoinsight.server.registry.grpc.prod.TargetIdentifier getTarget();

  /**
   * <pre>
   * 最终运行的目标, 在元数据里必须能找到
   * </pre>
   *
   * <code>.io.holoinsight.server.registry.grpc.prod.TargetIdentifier target = 3;</code>
   */
  io.holoinsight.server.registry.grpc.prod.TargetIdentifierOrBuilder getTargetOrBuilder();

  /**
   * <pre>
   * 输入信息
   * </pre>
   *
   * <code>.io.holoinsight.server.registry.grpc.prod.DryRunRequest.Input input = 4;</code>
   */
  boolean hasInput();

  /**
   * <pre>
   * 输入信息
   * </pre>
   *
   * <code>.io.holoinsight.server.registry.grpc.prod.DryRunRequest.Input input = 4;</code>
   */
  io.holoinsight.server.registry.grpc.prod.DryRunRequest.Input getInput();

  /**
   * <pre>
   * 输入信息
   * </pre>
   *
   * <code>.io.holoinsight.server.registry.grpc.prod.DryRunRequest.Input input = 4;</code>
   */
  io.holoinsight.server.registry.grpc.prod.DryRunRequest.InputOrBuilder getInputOrBuilder();
}
