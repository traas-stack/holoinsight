/*
 * Copyright 2022 Holoinsight Project Authors. Licensed under Apache-2.0.
 */
// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: trace/Tracing.proto

package io.holoinsight.server.apm.grpc.trace;

public interface SegmentObjectOrBuilder extends
    // @@protoc_insertion_point(interface_extends:io.holoinsight.server.apm.grpc.trace.SegmentObject)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * A string id represents the whole trace.
   * </pre>
   *
   * <code>string traceId = 1;</code>
   */
  java.lang.String getTraceId();

  /**
   * <pre>
   * A string id represents the whole trace.
   * </pre>
   *
   * <code>string traceId = 1;</code>
   */
  com.google.protobuf.ByteString getTraceIdBytes();

  /**
   * <pre>
   * A unique id represents this segment. Other segments could use this id to reference as a child segment.
   * </pre>
   *
   * <code>string traceSegmentId = 2;</code>
   */
  java.lang.String getTraceSegmentId();

  /**
   * <pre>
   * A unique id represents this segment. Other segments could use this id to reference as a child segment.
   * </pre>
   *
   * <code>string traceSegmentId = 2;</code>
   */
  com.google.protobuf.ByteString getTraceSegmentIdBytes();

  /**
   * <pre>
   * Span collections included in this segment.
   * </pre>
   *
   * <code>repeated .io.holoinsight.server.apm.grpc.trace.SpanObject spans = 3;</code>
   */
  java.util.List<io.holoinsight.server.apm.grpc.trace.SpanObject> getSpansList();

  /**
   * <pre>
   * Span collections included in this segment.
   * </pre>
   *
   * <code>repeated .io.holoinsight.server.apm.grpc.trace.SpanObject spans = 3;</code>
   */
  io.holoinsight.server.apm.grpc.trace.SpanObject getSpans(int index);

  /**
   * <pre>
   * Span collections included in this segment.
   * </pre>
   *
   * <code>repeated .io.holoinsight.server.apm.grpc.trace.SpanObject spans = 3;</code>
   */
  int getSpansCount();

  /**
   * <pre>
   * Span collections included in this segment.
   * </pre>
   *
   * <code>repeated .io.holoinsight.server.apm.grpc.trace.SpanObject spans = 3;</code>
   */
  java.util.List<? extends io.holoinsight.server.apm.grpc.trace.SpanObjectOrBuilder> getSpansOrBuilderList();

  /**
   * <pre>
   * Span collections included in this segment.
   * </pre>
   *
   * <code>repeated .io.holoinsight.server.apm.grpc.trace.SpanObject spans = 3;</code>
   */
  io.holoinsight.server.apm.grpc.trace.SpanObjectOrBuilder getSpansOrBuilder(int index);

  /**
   * <pre>
   * **Service**. Represents a set/group of workloads which provide the same behaviours for incoming requests.
   * The logic name represents the service. This would show as a separate node in the topology.
   * The metrics analyzed from the spans, would be aggregated for this entity as the service level.
   * </pre>
   *
   * <code>string service = 4;</code>
   */
  java.lang.String getService();

  /**
   * <pre>
   * **Service**. Represents a set/group of workloads which provide the same behaviours for incoming requests.
   * The logic name represents the service. This would show as a separate node in the topology.
   * The metrics analyzed from the spans, would be aggregated for this entity as the service level.
   * </pre>
   *
   * <code>string service = 4;</code>
   */
  com.google.protobuf.ByteString getServiceBytes();

  /**
   * <pre>
   * **Service Instance**. Each individual workload in the Service group is known as an instance. Like `pods` in Kubernetes, it
   * doesn't need to be a single OS process, however, if you are using instrument agents, an instance is actually a real OS process.
   * The logic name represents the service instance. This would show as a separate node in the instance relationship.
   * The metrics analyzed from the spans, would be aggregated for this entity as the service instance level.
   * </pre>
   *
   * <code>string serviceInstance = 5;</code>
   */
  java.lang.String getServiceInstance();

  /**
   * <pre>
   * **Service Instance**. Each individual workload in the Service group is known as an instance. Like `pods` in Kubernetes, it
   * doesn't need to be a single OS process, however, if you are using instrument agents, an instance is actually a real OS process.
   * The logic name represents the service instance. This would show as a separate node in the instance relationship.
   * The metrics analyzed from the spans, would be aggregated for this entity as the service instance level.
   * </pre>
   *
   * <code>string serviceInstance = 5;</code>
   */
  com.google.protobuf.ByteString getServiceInstanceBytes();

  /**
   * <pre>
   * Whether the segment includes all tracked spans.
   * In the production environment tracked, some tasks could include too many spans for one request context, such as a batch update for a cache, or an async job.
   * The agent/SDK could optimize or ignore some tracked spans for better performance.
   * In this case, the value should be flagged as TRUE.
   * </pre>
   *
   * <code>bool isSizeLimited = 6;</code>
   */
  boolean getIsSizeLimited();

  /**
   * <code>string tenant = 7;</code>
   */
  java.lang.String getTenant();

  /**
   * <code>string tenant = 7;</code>
   */
  com.google.protobuf.ByteString getTenantBytes();

  /**
   * <code>string agentVersion = 8;</code>
   */
  java.lang.String getAgentVersion();

  /**
   * <code>string agentVersion = 8;</code>
   */
  com.google.protobuf.ByteString getAgentVersionBytes();
}
