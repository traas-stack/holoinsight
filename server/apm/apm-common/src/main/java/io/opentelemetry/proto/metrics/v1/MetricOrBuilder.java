/*
 * Copyright 2022 Holoinsight Project Authors. Licensed under Apache-2.0.
 */
// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: opentelemetry/proto/metrics/v1/metrics.proto

package io.opentelemetry.proto.metrics.v1;

public interface MetricOrBuilder extends
    // @@protoc_insertion_point(interface_extends:opentelemetry.proto.metrics.v1.Metric)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * name of the metric, including its DNS name prefix. It must be unique.
   * </pre>
   *
   * <code>string name = 1;</code>
   */
  java.lang.String getName();

  /**
   * <pre>
   * name of the metric, including its DNS name prefix. It must be unique.
   * </pre>
   *
   * <code>string name = 1;</code>
   */
  com.google.protobuf.ByteString getNameBytes();

  /**
   * <pre>
   * description of the metric, which can be used in documentation.
   * </pre>
   *
   * <code>string description = 2;</code>
   */
  java.lang.String getDescription();

  /**
   * <pre>
   * description of the metric, which can be used in documentation.
   * </pre>
   *
   * <code>string description = 2;</code>
   */
  com.google.protobuf.ByteString getDescriptionBytes();

  /**
   * <pre>
   * unit in which the metric value is reported. Follows the format
   * described by http://unitsofmeasure.org/ucum.html.
   * </pre>
   *
   * <code>string unit = 3;</code>
   */
  java.lang.String getUnit();

  /**
   * <pre>
   * unit in which the metric value is reported. Follows the format
   * described by http://unitsofmeasure.org/ucum.html.
   * </pre>
   *
   * <code>string unit = 3;</code>
   */
  com.google.protobuf.ByteString getUnitBytes();

  /**
   * <code>.opentelemetry.proto.metrics.v1.Gauge gauge = 5;</code>
   */
  boolean hasGauge();

  /**
   * <code>.opentelemetry.proto.metrics.v1.Gauge gauge = 5;</code>
   */
  io.opentelemetry.proto.metrics.v1.Gauge getGauge();

  /**
   * <code>.opentelemetry.proto.metrics.v1.Gauge gauge = 5;</code>
   */
  io.opentelemetry.proto.metrics.v1.GaugeOrBuilder getGaugeOrBuilder();

  /**
   * <code>.opentelemetry.proto.metrics.v1.Sum sum = 7;</code>
   */
  boolean hasSum();

  /**
   * <code>.opentelemetry.proto.metrics.v1.Sum sum = 7;</code>
   */
  io.opentelemetry.proto.metrics.v1.Sum getSum();

  /**
   * <code>.opentelemetry.proto.metrics.v1.Sum sum = 7;</code>
   */
  io.opentelemetry.proto.metrics.v1.SumOrBuilder getSumOrBuilder();

  /**
   * <code>.opentelemetry.proto.metrics.v1.Histogram histogram = 9;</code>
   */
  boolean hasHistogram();

  /**
   * <code>.opentelemetry.proto.metrics.v1.Histogram histogram = 9;</code>
   */
  io.opentelemetry.proto.metrics.v1.Histogram getHistogram();

  /**
   * <code>.opentelemetry.proto.metrics.v1.Histogram histogram = 9;</code>
   */
  io.opentelemetry.proto.metrics.v1.HistogramOrBuilder getHistogramOrBuilder();

  /**
   * <code>.opentelemetry.proto.metrics.v1.ExponentialHistogram exponential_histogram = 10;</code>
   */
  boolean hasExponentialHistogram();

  /**
   * <code>.opentelemetry.proto.metrics.v1.ExponentialHistogram exponential_histogram = 10;</code>
   */
  io.opentelemetry.proto.metrics.v1.ExponentialHistogram getExponentialHistogram();

  /**
   * <code>.opentelemetry.proto.metrics.v1.ExponentialHistogram exponential_histogram = 10;</code>
   */
  io.opentelemetry.proto.metrics.v1.ExponentialHistogramOrBuilder getExponentialHistogramOrBuilder();

  /**
   * <code>.opentelemetry.proto.metrics.v1.Summary summary = 11;</code>
   */
  boolean hasSummary();

  /**
   * <code>.opentelemetry.proto.metrics.v1.Summary summary = 11;</code>
   */
  io.opentelemetry.proto.metrics.v1.Summary getSummary();

  /**
   * <code>.opentelemetry.proto.metrics.v1.Summary summary = 11;</code>
   */
  io.opentelemetry.proto.metrics.v1.SummaryOrBuilder getSummaryOrBuilder();

  public io.opentelemetry.proto.metrics.v1.Metric.DataCase getDataCase();
}
