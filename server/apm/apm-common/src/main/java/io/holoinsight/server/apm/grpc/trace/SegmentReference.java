/*
 * Copyright 2022 Holoinsight Project Authors. Licensed under Apache-2.0.
 */
// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: trace/Tracing.proto

package io.holoinsight.server.apm.grpc.trace;

/**
 * <pre>
 * Segment reference represents the link between two existing segment.
 * </pre>
 *
 * Protobuf type {@code io.holoinsight.server.apm.grpc.trace.SegmentReference}
 */
public final class SegmentReference extends com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:io.holoinsight.server.apm.grpc.trace.SegmentReference)
    SegmentReferenceOrBuilder {
  private static final long serialVersionUID = 0L;

  // Use SegmentReference.newBuilder() to construct.
  private SegmentReference(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }

  private SegmentReference() {
    refType_ = 0;
    traceId_ = "";
    parentTraceSegmentId_ = "";
    parentService_ = "";
    parentServiceInstance_ = "";
    parentEndpoint_ = "";
    networkAddressUsedAtPeer_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
    return new SegmentReference();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet getUnknownFields() {
    return this.unknownFields;
  }

  private SegmentReference(com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 8: {
            int rawValue = input.readEnum();

            refType_ = rawValue;
            break;
          }
          case 18: {
            java.lang.String s = input.readStringRequireUtf8();

            traceId_ = s;
            break;
          }
          case 26: {
            java.lang.String s = input.readStringRequireUtf8();

            parentTraceSegmentId_ = s;
            break;
          }
          case 32: {

            parentSpanId_ = input.readInt32();
            break;
          }
          case 42: {
            java.lang.String s = input.readStringRequireUtf8();

            parentService_ = s;
            break;
          }
          case 50: {
            java.lang.String s = input.readStringRequireUtf8();

            parentServiceInstance_ = s;
            break;
          }
          case 58: {
            java.lang.String s = input.readStringRequireUtf8();

            parentEndpoint_ = s;
            break;
          }
          case 66: {
            java.lang.String s = input.readStringRequireUtf8();

            networkAddressUsedAtPeer_ = s;
            break;
          }
          default: {
            if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }

  public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
    return io.holoinsight.server.apm.grpc.trace.Tracing.internal_static_io_holoinsight_server_apm_grpc_trace_SegmentReference_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
    return io.holoinsight.server.apm.grpc.trace.Tracing.internal_static_io_holoinsight_server_apm_grpc_trace_SegmentReference_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.holoinsight.server.apm.grpc.trace.SegmentReference.class,
            io.holoinsight.server.apm.grpc.trace.SegmentReference.Builder.class);
  }

  public static final int REFTYPE_FIELD_NUMBER = 1;
  private int refType_;

  /**
   * <pre>
   * Represent the reference type. It could be across thread or across process.
   * Across process means there is a downstream RPC call for this.
   * Typically, refType == CrossProcess means SpanObject#spanType = entry.
   * </pre>
   *
   * <code>.io.holoinsight.server.apm.grpc.trace.RefType refType = 1;</code>
   */
  public int getRefTypeValue() {
    return refType_;
  }

  /**
   * <pre>
   * Represent the reference type. It could be across thread or across process.
   * Across process means there is a downstream RPC call for this.
   * Typically, refType == CrossProcess means SpanObject#spanType = entry.
   * </pre>
   *
   * <code>.io.holoinsight.server.apm.grpc.trace.RefType refType = 1;</code>
   */
  public io.holoinsight.server.apm.grpc.trace.RefType getRefType() {
    @SuppressWarnings("deprecation")
    io.holoinsight.server.apm.grpc.trace.RefType result =
        io.holoinsight.server.apm.grpc.trace.RefType.valueOf(refType_);
    return result == null ? io.holoinsight.server.apm.grpc.trace.RefType.UNRECOGNIZED : result;
  }

  public static final int TRACEID_FIELD_NUMBER = 2;
  private volatile java.lang.Object traceId_;

  /**
   * <pre>
   * A string id represents the whole trace.
   * </pre>
   *
   * <code>string traceId = 2;</code>
   */
  public java.lang.String getTraceId() {
    java.lang.Object ref = traceId_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      traceId_ = s;
      return s;
    }
  }

  /**
   * <pre>
   * A string id represents the whole trace.
   * </pre>
   *
   * <code>string traceId = 2;</code>
   */
  public com.google.protobuf.ByteString getTraceIdBytes() {
    java.lang.Object ref = traceId_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      traceId_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int PARENTTRACESEGMENTID_FIELD_NUMBER = 3;
  private volatile java.lang.Object parentTraceSegmentId_;

  /**
   * <pre>
   * Another segment id as the parent.
   * </pre>
   *
   * <code>string parentTraceSegmentId = 3;</code>
   */
  public java.lang.String getParentTraceSegmentId() {
    java.lang.Object ref = parentTraceSegmentId_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      parentTraceSegmentId_ = s;
      return s;
    }
  }

  /**
   * <pre>
   * Another segment id as the parent.
   * </pre>
   *
   * <code>string parentTraceSegmentId = 3;</code>
   */
  public com.google.protobuf.ByteString getParentTraceSegmentIdBytes() {
    java.lang.Object ref = parentTraceSegmentId_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      parentTraceSegmentId_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int PARENTSPANID_FIELD_NUMBER = 4;
  private int parentSpanId_;

  /**
   * <pre>
   * The span id in the parent trace segment.
   * </pre>
   *
   * <code>int32 parentSpanId = 4;</code>
   */
  public int getParentSpanId() {
    return parentSpanId_;
  }

  public static final int PARENTSERVICE_FIELD_NUMBER = 5;
  private volatile java.lang.Object parentService_;

  /**
   * <pre>
   * The service logic name of the parent segment.
   * If refType == CrossThread, this name is as same as the trace segment.
   * </pre>
   *
   * <code>string parentService = 5;</code>
   */
  public java.lang.String getParentService() {
    java.lang.Object ref = parentService_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      parentService_ = s;
      return s;
    }
  }

  /**
   * <pre>
   * The service logic name of the parent segment.
   * If refType == CrossThread, this name is as same as the trace segment.
   * </pre>
   *
   * <code>string parentService = 5;</code>
   */
  public com.google.protobuf.ByteString getParentServiceBytes() {
    java.lang.Object ref = parentService_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      parentService_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int PARENTSERVICEINSTANCE_FIELD_NUMBER = 6;
  private volatile java.lang.Object parentServiceInstance_;

  /**
   * <pre>
   * The service logic name instance of the parent segment.
   * If refType == CrossThread, this name is as same as the trace segment.
   * </pre>
   *
   * <code>string parentServiceInstance = 6;</code>
   */
  public java.lang.String getParentServiceInstance() {
    java.lang.Object ref = parentServiceInstance_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      parentServiceInstance_ = s;
      return s;
    }
  }

  /**
   * <pre>
   * The service logic name instance of the parent segment.
   * If refType == CrossThread, this name is as same as the trace segment.
   * </pre>
   *
   * <code>string parentServiceInstance = 6;</code>
   */
  public com.google.protobuf.ByteString getParentServiceInstanceBytes() {
    java.lang.Object ref = parentServiceInstance_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      parentServiceInstance_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int PARENTENDPOINT_FIELD_NUMBER = 7;
  private volatile java.lang.Object parentEndpoint_;

  /**
   * <pre>
   * The endpoint name of the parent segment.
   * **Endpoint**. A path in a service for incoming requests, such as an HTTP URI path or a gRPC service class + method signature.
   * In a trace segment, the endpoint name is the name of first entry span.
   * </pre>
   *
   * <code>string parentEndpoint = 7;</code>
   */
  public java.lang.String getParentEndpoint() {
    java.lang.Object ref = parentEndpoint_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      parentEndpoint_ = s;
      return s;
    }
  }

  /**
   * <pre>
   * The endpoint name of the parent segment.
   * **Endpoint**. A path in a service for incoming requests, such as an HTTP URI path or a gRPC service class + method signature.
   * In a trace segment, the endpoint name is the name of first entry span.
   * </pre>
   *
   * <code>string parentEndpoint = 7;</code>
   */
  public com.google.protobuf.ByteString getParentEndpointBytes() {
    java.lang.Object ref = parentEndpoint_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      parentEndpoint_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int NETWORKADDRESSUSEDATPEER_FIELD_NUMBER = 8;
  private volatile java.lang.Object networkAddressUsedAtPeer_;

  /**
   * <pre>
   * The network address, including ip/hostname and port, which is used in the client side.
   * Such as Client --&gt; use 127.0.11.8:913 -&gt; Server
   * then, in the reference of entry span reported by Server, the value of this field is 127.0.11.8:913.
   * This plays the important role in the SkyWalking STAM(Streaming Topology Analysis Method)
   * For more details, read https://wu-sheng.github.io/STAM/
   * </pre>
   *
   * <code>string networkAddressUsedAtPeer = 8;</code>
   */
  public java.lang.String getNetworkAddressUsedAtPeer() {
    java.lang.Object ref = networkAddressUsedAtPeer_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      networkAddressUsedAtPeer_ = s;
      return s;
    }
  }

  /**
   * <pre>
   * The network address, including ip/hostname and port, which is used in the client side.
   * Such as Client --&gt; use 127.0.11.8:913 -&gt; Server
   * then, in the reference of entry span reported by Server, the value of this field is 127.0.11.8:913.
   * This plays the important role in the SkyWalking STAM(Streaming Topology Analysis Method)
   * For more details, read https://wu-sheng.github.io/STAM/
   * </pre>
   *
   * <code>string networkAddressUsedAtPeer = 8;</code>
   */
  public com.google.protobuf.ByteString getNetworkAddressUsedAtPeerBytes() {
    java.lang.Object ref = networkAddressUsedAtPeer_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      networkAddressUsedAtPeer_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  private byte memoizedIsInitialized = -1;

  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1)
      return true;
    if (isInitialized == 0)
      return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
    if (refType_ != io.holoinsight.server.apm.grpc.trace.RefType.CrossProcess.getNumber()) {
      output.writeEnum(1, refType_);
    }
    if (!getTraceIdBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, traceId_);
    }
    if (!getParentTraceSegmentIdBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 3, parentTraceSegmentId_);
    }
    if (parentSpanId_ != 0) {
      output.writeInt32(4, parentSpanId_);
    }
    if (!getParentServiceBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 5, parentService_);
    }
    if (!getParentServiceInstanceBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 6, parentServiceInstance_);
    }
    if (!getParentEndpointBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 7, parentEndpoint_);
    }
    if (!getNetworkAddressUsedAtPeerBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 8, networkAddressUsedAtPeer_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1)
      return size;

    size = 0;
    if (refType_ != io.holoinsight.server.apm.grpc.trace.RefType.CrossProcess.getNumber()) {
      size += com.google.protobuf.CodedOutputStream.computeEnumSize(1, refType_);
    }
    if (!getTraceIdBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, traceId_);
    }
    if (!getParentTraceSegmentIdBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, parentTraceSegmentId_);
    }
    if (parentSpanId_ != 0) {
      size += com.google.protobuf.CodedOutputStream.computeInt32Size(4, parentSpanId_);
    }
    if (!getParentServiceBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, parentService_);
    }
    if (!getParentServiceInstanceBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(6, parentServiceInstance_);
    }
    if (!getParentEndpointBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(7, parentEndpoint_);
    }
    if (!getNetworkAddressUsedAtPeerBytes().isEmpty()) {
      size +=
          com.google.protobuf.GeneratedMessageV3.computeStringSize(8, networkAddressUsedAtPeer_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
      return true;
    }
    if (!(obj instanceof io.holoinsight.server.apm.grpc.trace.SegmentReference)) {
      return super.equals(obj);
    }
    io.holoinsight.server.apm.grpc.trace.SegmentReference other =
        (io.holoinsight.server.apm.grpc.trace.SegmentReference) obj;

    if (refType_ != other.refType_)
      return false;
    if (!getTraceId().equals(other.getTraceId()))
      return false;
    if (!getParentTraceSegmentId().equals(other.getParentTraceSegmentId()))
      return false;
    if (getParentSpanId() != other.getParentSpanId())
      return false;
    if (!getParentService().equals(other.getParentService()))
      return false;
    if (!getParentServiceInstance().equals(other.getParentServiceInstance()))
      return false;
    if (!getParentEndpoint().equals(other.getParentEndpoint()))
      return false;
    if (!getNetworkAddressUsedAtPeer().equals(other.getNetworkAddressUsedAtPeer()))
      return false;
    if (!unknownFields.equals(other.unknownFields))
      return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + REFTYPE_FIELD_NUMBER;
    hash = (53 * hash) + refType_;
    hash = (37 * hash) + TRACEID_FIELD_NUMBER;
    hash = (53 * hash) + getTraceId().hashCode();
    hash = (37 * hash) + PARENTTRACESEGMENTID_FIELD_NUMBER;
    hash = (53 * hash) + getParentTraceSegmentId().hashCode();
    hash = (37 * hash) + PARENTSPANID_FIELD_NUMBER;
    hash = (53 * hash) + getParentSpanId();
    hash = (37 * hash) + PARENTSERVICE_FIELD_NUMBER;
    hash = (53 * hash) + getParentService().hashCode();
    hash = (37 * hash) + PARENTSERVICEINSTANCE_FIELD_NUMBER;
    hash = (53 * hash) + getParentServiceInstance().hashCode();
    hash = (37 * hash) + PARENTENDPOINT_FIELD_NUMBER;
    hash = (53 * hash) + getParentEndpoint().hashCode();
    hash = (37 * hash) + NETWORKADDRESSUSEDATPEER_FIELD_NUMBER;
    hash = (53 * hash) + getNetworkAddressUsedAtPeer().hashCode();
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.holoinsight.server.apm.grpc.trace.SegmentReference parseFrom(
      java.nio.ByteBuffer data) throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static io.holoinsight.server.apm.grpc.trace.SegmentReference parseFrom(
      java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static io.holoinsight.server.apm.grpc.trace.SegmentReference parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static io.holoinsight.server.apm.grpc.trace.SegmentReference parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static io.holoinsight.server.apm.grpc.trace.SegmentReference parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static io.holoinsight.server.apm.grpc.trace.SegmentReference parseFrom(byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static io.holoinsight.server.apm.grpc.trace.SegmentReference parseFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static io.holoinsight.server.apm.grpc.trace.SegmentReference parseFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input,
        extensionRegistry);
  }

  public static io.holoinsight.server.apm.grpc.trace.SegmentReference parseDelimitedFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
  }

  public static io.holoinsight.server.apm.grpc.trace.SegmentReference parseDelimitedFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input,
        extensionRegistry);
  }

  public static io.holoinsight.server.apm.grpc.trace.SegmentReference parseFrom(
      com.google.protobuf.CodedInputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static io.holoinsight.server.apm.grpc.trace.SegmentReference parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input,
        extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() {
    return newBuilder();
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }

  public static Builder newBuilder(
      io.holoinsight.server.apm.grpc.trace.SegmentReference prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }

  /**
   * <pre>
   * Segment reference represents the link between two existing segment.
   * </pre>
   *
   * Protobuf type {@code io.holoinsight.server.apm.grpc.trace.SegmentReference}
   */
  public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
      implements
      // @@protoc_insertion_point(builder_implements:io.holoinsight.server.apm.grpc.trace.SegmentReference)
      io.holoinsight.server.apm.grpc.trace.SegmentReferenceOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return io.holoinsight.server.apm.grpc.trace.Tracing.internal_static_io_holoinsight_server_apm_grpc_trace_SegmentReference_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
      return io.holoinsight.server.apm.grpc.trace.Tracing.internal_static_io_holoinsight_server_apm_grpc_trace_SegmentReference_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.holoinsight.server.apm.grpc.trace.SegmentReference.class,
              io.holoinsight.server.apm.grpc.trace.SegmentReference.Builder.class);
    }

    // Construct using io.holoinsight.server.apm.grpc.trace.SegmentReference.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }

    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
      }
    }

    @java.lang.Override
    public Builder clear() {
      super.clear();
      refType_ = 0;

      traceId_ = "";

      parentTraceSegmentId_ = "";

      parentSpanId_ = 0;

      parentService_ = "";

      parentServiceInstance_ = "";

      parentEndpoint_ = "";

      networkAddressUsedAtPeer_ = "";

      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
      return io.holoinsight.server.apm.grpc.trace.Tracing.internal_static_io_holoinsight_server_apm_grpc_trace_SegmentReference_descriptor;
    }

    @java.lang.Override
    public io.holoinsight.server.apm.grpc.trace.SegmentReference getDefaultInstanceForType() {
      return io.holoinsight.server.apm.grpc.trace.SegmentReference.getDefaultInstance();
    }

    @java.lang.Override
    public io.holoinsight.server.apm.grpc.trace.SegmentReference build() {
      io.holoinsight.server.apm.grpc.trace.SegmentReference result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.holoinsight.server.apm.grpc.trace.SegmentReference buildPartial() {
      io.holoinsight.server.apm.grpc.trace.SegmentReference result =
          new io.holoinsight.server.apm.grpc.trace.SegmentReference(this);
      result.refType_ = refType_;
      result.traceId_ = traceId_;
      result.parentTraceSegmentId_ = parentTraceSegmentId_;
      result.parentSpanId_ = parentSpanId_;
      result.parentService_ = parentService_;
      result.parentServiceInstance_ = parentServiceInstance_;
      result.parentEndpoint_ = parentEndpoint_;
      result.networkAddressUsedAtPeer_ = networkAddressUsedAtPeer_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }

    @java.lang.Override
    public Builder setField(com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }

    @java.lang.Override
    public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }

    @java.lang.Override
    public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }

    @java.lang.Override
    public Builder setRepeatedField(com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }

    @java.lang.Override
    public Builder addRepeatedField(com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.holoinsight.server.apm.grpc.trace.SegmentReference) {
        return mergeFrom((io.holoinsight.server.apm.grpc.trace.SegmentReference) other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.holoinsight.server.apm.grpc.trace.SegmentReference other) {
      if (other == io.holoinsight.server.apm.grpc.trace.SegmentReference.getDefaultInstance())
        return this;
      if (other.refType_ != 0) {
        setRefTypeValue(other.getRefTypeValue());
      }
      if (!other.getTraceId().isEmpty()) {
        traceId_ = other.traceId_;
        onChanged();
      }
      if (!other.getParentTraceSegmentId().isEmpty()) {
        parentTraceSegmentId_ = other.parentTraceSegmentId_;
        onChanged();
      }
      if (other.getParentSpanId() != 0) {
        setParentSpanId(other.getParentSpanId());
      }
      if (!other.getParentService().isEmpty()) {
        parentService_ = other.parentService_;
        onChanged();
      }
      if (!other.getParentServiceInstance().isEmpty()) {
        parentServiceInstance_ = other.parentServiceInstance_;
        onChanged();
      }
      if (!other.getParentEndpoint().isEmpty()) {
        parentEndpoint_ = other.parentEndpoint_;
        onChanged();
      }
      if (!other.getNetworkAddressUsedAtPeer().isEmpty()) {
        networkAddressUsedAtPeer_ = other.networkAddressUsedAtPeer_;
        onChanged();
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
      io.holoinsight.server.apm.grpc.trace.SegmentReference parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage =
            (io.holoinsight.server.apm.grpc.trace.SegmentReference) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private int refType_ = 0;

    /**
     * <pre>
     * Represent the reference type. It could be across thread or across process.
     * Across process means there is a downstream RPC call for this.
     * Typically, refType == CrossProcess means SpanObject#spanType = entry.
     * </pre>
     *
     * <code>.io.holoinsight.server.apm.grpc.trace.RefType refType = 1;</code>
     */
    public int getRefTypeValue() {
      return refType_;
    }

    /**
     * <pre>
     * Represent the reference type. It could be across thread or across process.
     * Across process means there is a downstream RPC call for this.
     * Typically, refType == CrossProcess means SpanObject#spanType = entry.
     * </pre>
     *
     * <code>.io.holoinsight.server.apm.grpc.trace.RefType refType = 1;</code>
     */
    public Builder setRefTypeValue(int value) {
      refType_ = value;
      onChanged();
      return this;
    }

    /**
     * <pre>
     * Represent the reference type. It could be across thread or across process.
     * Across process means there is a downstream RPC call for this.
     * Typically, refType == CrossProcess means SpanObject#spanType = entry.
     * </pre>
     *
     * <code>.io.holoinsight.server.apm.grpc.trace.RefType refType = 1;</code>
     */
    public io.holoinsight.server.apm.grpc.trace.RefType getRefType() {
      @SuppressWarnings("deprecation")
      io.holoinsight.server.apm.grpc.trace.RefType result =
          io.holoinsight.server.apm.grpc.trace.RefType.valueOf(refType_);
      return result == null ? io.holoinsight.server.apm.grpc.trace.RefType.UNRECOGNIZED : result;
    }

    /**
     * <pre>
     * Represent the reference type. It could be across thread or across process.
     * Across process means there is a downstream RPC call for this.
     * Typically, refType == CrossProcess means SpanObject#spanType = entry.
     * </pre>
     *
     * <code>.io.holoinsight.server.apm.grpc.trace.RefType refType = 1;</code>
     */
    public Builder setRefType(io.holoinsight.server.apm.grpc.trace.RefType value) {
      if (value == null) {
        throw new NullPointerException();
      }

      refType_ = value.getNumber();
      onChanged();
      return this;
    }

    /**
     * <pre>
     * Represent the reference type. It could be across thread or across process.
     * Across process means there is a downstream RPC call for this.
     * Typically, refType == CrossProcess means SpanObject#spanType = entry.
     * </pre>
     *
     * <code>.io.holoinsight.server.apm.grpc.trace.RefType refType = 1;</code>
     */
    public Builder clearRefType() {

      refType_ = 0;
      onChanged();
      return this;
    }

    private java.lang.Object traceId_ = "";

    /**
     * <pre>
     * A string id represents the whole trace.
     * </pre>
     *
     * <code>string traceId = 2;</code>
     */
    public java.lang.String getTraceId() {
      java.lang.Object ref = traceId_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        traceId_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }

    /**
     * <pre>
     * A string id represents the whole trace.
     * </pre>
     *
     * <code>string traceId = 2;</code>
     */
    public com.google.protobuf.ByteString getTraceIdBytes() {
      java.lang.Object ref = traceId_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        traceId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    /**
     * <pre>
     * A string id represents the whole trace.
     * </pre>
     *
     * <code>string traceId = 2;</code>
     */
    public Builder setTraceId(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }

      traceId_ = value;
      onChanged();
      return this;
    }

    /**
     * <pre>
     * A string id represents the whole trace.
     * </pre>
     *
     * <code>string traceId = 2;</code>
     */
    public Builder clearTraceId() {

      traceId_ = getDefaultInstance().getTraceId();
      onChanged();
      return this;
    }

    /**
     * <pre>
     * A string id represents the whole trace.
     * </pre>
     *
     * <code>string traceId = 2;</code>
     */
    public Builder setTraceIdBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);

      traceId_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object parentTraceSegmentId_ = "";

    /**
     * <pre>
     * Another segment id as the parent.
     * </pre>
     *
     * <code>string parentTraceSegmentId = 3;</code>
     */
    public java.lang.String getParentTraceSegmentId() {
      java.lang.Object ref = parentTraceSegmentId_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        parentTraceSegmentId_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }

    /**
     * <pre>
     * Another segment id as the parent.
     * </pre>
     *
     * <code>string parentTraceSegmentId = 3;</code>
     */
    public com.google.protobuf.ByteString getParentTraceSegmentIdBytes() {
      java.lang.Object ref = parentTraceSegmentId_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        parentTraceSegmentId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    /**
     * <pre>
     * Another segment id as the parent.
     * </pre>
     *
     * <code>string parentTraceSegmentId = 3;</code>
     */
    public Builder setParentTraceSegmentId(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }

      parentTraceSegmentId_ = value;
      onChanged();
      return this;
    }

    /**
     * <pre>
     * Another segment id as the parent.
     * </pre>
     *
     * <code>string parentTraceSegmentId = 3;</code>
     */
    public Builder clearParentTraceSegmentId() {

      parentTraceSegmentId_ = getDefaultInstance().getParentTraceSegmentId();
      onChanged();
      return this;
    }

    /**
     * <pre>
     * Another segment id as the parent.
     * </pre>
     *
     * <code>string parentTraceSegmentId = 3;</code>
     */
    public Builder setParentTraceSegmentIdBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);

      parentTraceSegmentId_ = value;
      onChanged();
      return this;
    }

    private int parentSpanId_;

    /**
     * <pre>
     * The span id in the parent trace segment.
     * </pre>
     *
     * <code>int32 parentSpanId = 4;</code>
     */
    public int getParentSpanId() {
      return parentSpanId_;
    }

    /**
     * <pre>
     * The span id in the parent trace segment.
     * </pre>
     *
     * <code>int32 parentSpanId = 4;</code>
     */
    public Builder setParentSpanId(int value) {

      parentSpanId_ = value;
      onChanged();
      return this;
    }

    /**
     * <pre>
     * The span id in the parent trace segment.
     * </pre>
     *
     * <code>int32 parentSpanId = 4;</code>
     */
    public Builder clearParentSpanId() {

      parentSpanId_ = 0;
      onChanged();
      return this;
    }

    private java.lang.Object parentService_ = "";

    /**
     * <pre>
     * The service logic name of the parent segment.
     * If refType == CrossThread, this name is as same as the trace segment.
     * </pre>
     *
     * <code>string parentService = 5;</code>
     */
    public java.lang.String getParentService() {
      java.lang.Object ref = parentService_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        parentService_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }

    /**
     * <pre>
     * The service logic name of the parent segment.
     * If refType == CrossThread, this name is as same as the trace segment.
     * </pre>
     *
     * <code>string parentService = 5;</code>
     */
    public com.google.protobuf.ByteString getParentServiceBytes() {
      java.lang.Object ref = parentService_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        parentService_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    /**
     * <pre>
     * The service logic name of the parent segment.
     * If refType == CrossThread, this name is as same as the trace segment.
     * </pre>
     *
     * <code>string parentService = 5;</code>
     */
    public Builder setParentService(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }

      parentService_ = value;
      onChanged();
      return this;
    }

    /**
     * <pre>
     * The service logic name of the parent segment.
     * If refType == CrossThread, this name is as same as the trace segment.
     * </pre>
     *
     * <code>string parentService = 5;</code>
     */
    public Builder clearParentService() {

      parentService_ = getDefaultInstance().getParentService();
      onChanged();
      return this;
    }

    /**
     * <pre>
     * The service logic name of the parent segment.
     * If refType == CrossThread, this name is as same as the trace segment.
     * </pre>
     *
     * <code>string parentService = 5;</code>
     */
    public Builder setParentServiceBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);

      parentService_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object parentServiceInstance_ = "";

    /**
     * <pre>
     * The service logic name instance of the parent segment.
     * If refType == CrossThread, this name is as same as the trace segment.
     * </pre>
     *
     * <code>string parentServiceInstance = 6;</code>
     */
    public java.lang.String getParentServiceInstance() {
      java.lang.Object ref = parentServiceInstance_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        parentServiceInstance_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }

    /**
     * <pre>
     * The service logic name instance of the parent segment.
     * If refType == CrossThread, this name is as same as the trace segment.
     * </pre>
     *
     * <code>string parentServiceInstance = 6;</code>
     */
    public com.google.protobuf.ByteString getParentServiceInstanceBytes() {
      java.lang.Object ref = parentServiceInstance_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        parentServiceInstance_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    /**
     * <pre>
     * The service logic name instance of the parent segment.
     * If refType == CrossThread, this name is as same as the trace segment.
     * </pre>
     *
     * <code>string parentServiceInstance = 6;</code>
     */
    public Builder setParentServiceInstance(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }

      parentServiceInstance_ = value;
      onChanged();
      return this;
    }

    /**
     * <pre>
     * The service logic name instance of the parent segment.
     * If refType == CrossThread, this name is as same as the trace segment.
     * </pre>
     *
     * <code>string parentServiceInstance = 6;</code>
     */
    public Builder clearParentServiceInstance() {

      parentServiceInstance_ = getDefaultInstance().getParentServiceInstance();
      onChanged();
      return this;
    }

    /**
     * <pre>
     * The service logic name instance of the parent segment.
     * If refType == CrossThread, this name is as same as the trace segment.
     * </pre>
     *
     * <code>string parentServiceInstance = 6;</code>
     */
    public Builder setParentServiceInstanceBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);

      parentServiceInstance_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object parentEndpoint_ = "";

    /**
     * <pre>
     * The endpoint name of the parent segment.
     * **Endpoint**. A path in a service for incoming requests, such as an HTTP URI path or a gRPC service class + method signature.
     * In a trace segment, the endpoint name is the name of first entry span.
     * </pre>
     *
     * <code>string parentEndpoint = 7;</code>
     */
    public java.lang.String getParentEndpoint() {
      java.lang.Object ref = parentEndpoint_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        parentEndpoint_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }

    /**
     * <pre>
     * The endpoint name of the parent segment.
     * **Endpoint**. A path in a service for incoming requests, such as an HTTP URI path or a gRPC service class + method signature.
     * In a trace segment, the endpoint name is the name of first entry span.
     * </pre>
     *
     * <code>string parentEndpoint = 7;</code>
     */
    public com.google.protobuf.ByteString getParentEndpointBytes() {
      java.lang.Object ref = parentEndpoint_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        parentEndpoint_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    /**
     * <pre>
     * The endpoint name of the parent segment.
     * **Endpoint**. A path in a service for incoming requests, such as an HTTP URI path or a gRPC service class + method signature.
     * In a trace segment, the endpoint name is the name of first entry span.
     * </pre>
     *
     * <code>string parentEndpoint = 7;</code>
     */
    public Builder setParentEndpoint(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }

      parentEndpoint_ = value;
      onChanged();
      return this;
    }

    /**
     * <pre>
     * The endpoint name of the parent segment.
     * **Endpoint**. A path in a service for incoming requests, such as an HTTP URI path or a gRPC service class + method signature.
     * In a trace segment, the endpoint name is the name of first entry span.
     * </pre>
     *
     * <code>string parentEndpoint = 7;</code>
     */
    public Builder clearParentEndpoint() {

      parentEndpoint_ = getDefaultInstance().getParentEndpoint();
      onChanged();
      return this;
    }

    /**
     * <pre>
     * The endpoint name of the parent segment.
     * **Endpoint**. A path in a service for incoming requests, such as an HTTP URI path or a gRPC service class + method signature.
     * In a trace segment, the endpoint name is the name of first entry span.
     * </pre>
     *
     * <code>string parentEndpoint = 7;</code>
     */
    public Builder setParentEndpointBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);

      parentEndpoint_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object networkAddressUsedAtPeer_ = "";

    /**
     * <pre>
     * The network address, including ip/hostname and port, which is used in the client side.
     * Such as Client --&gt; use 127.0.11.8:913 -&gt; Server
     * then, in the reference of entry span reported by Server, the value of this field is 127.0.11.8:913.
     * This plays the important role in the SkyWalking STAM(Streaming Topology Analysis Method)
     * For more details, read https://wu-sheng.github.io/STAM/
     * </pre>
     *
     * <code>string networkAddressUsedAtPeer = 8;</code>
     */
    public java.lang.String getNetworkAddressUsedAtPeer() {
      java.lang.Object ref = networkAddressUsedAtPeer_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        networkAddressUsedAtPeer_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }

    /**
     * <pre>
     * The network address, including ip/hostname and port, which is used in the client side.
     * Such as Client --&gt; use 127.0.11.8:913 -&gt; Server
     * then, in the reference of entry span reported by Server, the value of this field is 127.0.11.8:913.
     * This plays the important role in the SkyWalking STAM(Streaming Topology Analysis Method)
     * For more details, read https://wu-sheng.github.io/STAM/
     * </pre>
     *
     * <code>string networkAddressUsedAtPeer = 8;</code>
     */
    public com.google.protobuf.ByteString getNetworkAddressUsedAtPeerBytes() {
      java.lang.Object ref = networkAddressUsedAtPeer_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        networkAddressUsedAtPeer_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    /**
     * <pre>
     * The network address, including ip/hostname and port, which is used in the client side.
     * Such as Client --&gt; use 127.0.11.8:913 -&gt; Server
     * then, in the reference of entry span reported by Server, the value of this field is 127.0.11.8:913.
     * This plays the important role in the SkyWalking STAM(Streaming Topology Analysis Method)
     * For more details, read https://wu-sheng.github.io/STAM/
     * </pre>
     *
     * <code>string networkAddressUsedAtPeer = 8;</code>
     */
    public Builder setNetworkAddressUsedAtPeer(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }

      networkAddressUsedAtPeer_ = value;
      onChanged();
      return this;
    }

    /**
     * <pre>
     * The network address, including ip/hostname and port, which is used in the client side.
     * Such as Client --&gt; use 127.0.11.8:913 -&gt; Server
     * then, in the reference of entry span reported by Server, the value of this field is 127.0.11.8:913.
     * This plays the important role in the SkyWalking STAM(Streaming Topology Analysis Method)
     * For more details, read https://wu-sheng.github.io/STAM/
     * </pre>
     *
     * <code>string networkAddressUsedAtPeer = 8;</code>
     */
    public Builder clearNetworkAddressUsedAtPeer() {

      networkAddressUsedAtPeer_ = getDefaultInstance().getNetworkAddressUsedAtPeer();
      onChanged();
      return this;
    }

    /**
     * <pre>
     * The network address, including ip/hostname and port, which is used in the client side.
     * Such as Client --&gt; use 127.0.11.8:913 -&gt; Server
     * then, in the reference of entry span reported by Server, the value of this field is 127.0.11.8:913.
     * This plays the important role in the SkyWalking STAM(Streaming Topology Analysis Method)
     * For more details, read https://wu-sheng.github.io/STAM/
     * </pre>
     *
     * <code>string networkAddressUsedAtPeer = 8;</code>
     */
    public Builder setNetworkAddressUsedAtPeerBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);

      networkAddressUsedAtPeer_ = value;
      onChanged();
      return this;
    }

    @java.lang.Override
    public final Builder setUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:io.holoinsight.server.apm.grpc.trace.SegmentReference)
  }

  // @@protoc_insertion_point(class_scope:io.holoinsight.server.apm.grpc.trace.SegmentReference)
  private static final io.holoinsight.server.apm.grpc.trace.SegmentReference DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.holoinsight.server.apm.grpc.trace.SegmentReference();
  }

  public static io.holoinsight.server.apm.grpc.trace.SegmentReference getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<SegmentReference> PARSER =
      new com.google.protobuf.AbstractParser<SegmentReference>() {
        @java.lang.Override
        public SegmentReference parsePartialFrom(com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new SegmentReference(input, extensionRegistry);
        }
      };

  public static com.google.protobuf.Parser<SegmentReference> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<SegmentReference> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.holoinsight.server.apm.grpc.trace.SegmentReference getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

