/*
 * Copyright 2022 Holoinsight Project Authors. Licensed under Apache-2.0.
 */
// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: trace/Tracing.proto

package io.holoinsight.server.apm.grpc.trace;

/**
 * <pre>
 * Type of the reference
 * </pre>
 *
 * Protobuf enum {@code io.holoinsight.server.apm.grpc.trace.RefType}
 */
public enum RefType implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * Map to the reference targeting the segment in another OS process.
   * </pre>
   *
   * <code>CrossProcess = 0;</code>
   */
  CrossProcess(0),
  /**
   * <pre>
   * Map to the reference targeting the segment in the same process of the current one, just across thread.
   * This is only used when the coding language has the thread concept.
   * </pre>
   *
   * <code>CrossThread = 1;</code>
   */
  CrossThread(1), UNRECOGNIZED(-1),;

  /**
   * <pre>
   * Map to the reference targeting the segment in another OS process.
   * </pre>
   *
   * <code>CrossProcess = 0;</code>
   */
  public static final int CrossProcess_VALUE = 0;
  /**
   * <pre>
   * Map to the reference targeting the segment in the same process of the current one, just across thread.
   * This is only used when the coding language has the thread concept.
   * </pre>
   *
   * <code>CrossThread = 1;</code>
   */
  public static final int CrossThread_VALUE = 1;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static RefType valueOf(int value) {
    return forNumber(value);
  }

  public static RefType forNumber(int value) {
    switch (value) {
      case 0:
        return CrossProcess;
      case 1:
        return CrossThread;
      default:
        return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<RefType> internalGetValueMap() {
    return internalValueMap;
  }

  private static final com.google.protobuf.Internal.EnumLiteMap<RefType> internalValueMap =
      new com.google.protobuf.Internal.EnumLiteMap<RefType>() {
        public RefType findValueByNumber(int number) {
          return RefType.forNumber(number);
        }
      };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }

  public final com.google.protobuf.Descriptors.EnumDescriptor getDescriptorForType() {
    return getDescriptor();
  }

  public static final com.google.protobuf.Descriptors.EnumDescriptor getDescriptor() {
    return io.holoinsight.server.apm.grpc.trace.Tracing.getDescriptor().getEnumTypes().get(1);
  }

  private static final RefType[] VALUES = values();

  public static RefType valueOf(com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException("EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private RefType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:io.holoinsight.server.apm.grpc.trace.RefType)
}

