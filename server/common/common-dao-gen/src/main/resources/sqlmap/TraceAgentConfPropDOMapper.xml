<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.holoinsight.server.common.dao.mapper.TraceAgentConfPropDOMapper">
  <resultMap id="BaseResultMap" type="io.holoinsight.server.common.dao.entity.TraceAgentConfPropDO">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="type" jdbcType="VARCHAR" property="type" />
    <result column="language" jdbcType="VARCHAR" property="language" />
    <result column="prop_key" jdbcType="VARCHAR" property="propKey" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="c_name" jdbcType="VARCHAR" property="cName" />
    <result column="check_expression" jdbcType="VARCHAR" property="checkExpression" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="io.holoinsight.server.common.dao.entity.TraceAgentConfPropDO">
    <result column="description" jdbcType="LONGVARCHAR" property="description" />
    <result column="c_description" jdbcType="LONGVARCHAR" property="cDescription" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, `type`, `language`, prop_key, `name`, c_name, check_expression
  </sql>
  <sql id="Blob_Column_List">
    description, c_description
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="io.holoinsight.server.common.dao.entity.TraceAgentConfPropDOExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from trace_agent_configuration_properties
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="rows != null">
      <if test="offset != null">
        limit ${offset}, ${rows}
      </if>
      <if test="offset == null">
        limit ${rows}
      </if>
    </if>
  </select>
  <select id="selectByExample" parameterType="io.holoinsight.server.common.dao.entity.TraceAgentConfPropDOExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from trace_agent_configuration_properties
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="rows != null">
      <if test="offset != null">
        limit ${offset}, ${rows}
      </if>
      <if test="offset == null">
        limit ${rows}
      </if>
    </if>
  </select>
  <select id="selectByExampleSelective" parameterType="map" resultMap="ResultMapWithBLOBs">
    select
    <if test="example != null and example.distinct">
      distinct
    </if>
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.aliasedEscapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <include refid="Base_Column_List" />
        ,
        <include refid="Blob_Column_List" />
      </otherwise>
    </choose>
    from trace_agent_configuration_properties
    <if test="example != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
    <if test="example != null and example.orderByClause != null">
      order by ${example.orderByClause}
    </if>
    <if test="example != null and example.rows != null">
      <if test="example.offset != null">
        limit ${example.offset}, ${example.rows}
      </if>
      <if test="example.offset == null">
        limit ${example.rows}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from trace_agent_configuration_properties
    where id = #{id,jdbcType=BIGINT}
  </select>
  <select id="selectByPrimaryKeySelective" parameterType="map" resultMap="ResultMapWithBLOBs">
    select
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.aliasedEscapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <include refid="Base_Column_List" />
        ,
        <include refid="Blob_Column_List" />
      </otherwise>
    </choose>
    from trace_agent_configuration_properties
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from trace_agent_configuration_properties
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="io.holoinsight.server.common.dao.entity.TraceAgentConfPropDOExample">
    delete from trace_agent_configuration_properties
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="io.holoinsight.server.common.dao.entity.TraceAgentConfPropDO">
    insert into trace_agent_configuration_properties (id, `type`, `language`, 
      prop_key, `name`, c_name, 
      check_expression, description, c_description
      )
    values (#{id,jdbcType=BIGINT}, #{type,jdbcType=VARCHAR}, #{language,jdbcType=VARCHAR}, 
      #{propKey,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, #{cName,jdbcType=VARCHAR}, 
      #{checkExpression,jdbcType=VARCHAR}, #{description,jdbcType=LONGVARCHAR}, #{cDescription,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="map">
    insert into trace_agent_configuration_properties
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          ${column.escapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.id != null">
            id,
          </if>
          <if test="record.type != null">
            `type`,
          </if>
          <if test="record.language != null">
            `language`,
          </if>
          <if test="record.propKey != null">
            prop_key,
          </if>
          <if test="record.name != null">
            `name`,
          </if>
          <if test="record.cName != null">
            c_name,
          </if>
          <if test="record.checkExpression != null">
            check_expression,
          </if>
          <if test="record.description != null">
            description,
          </if>
          <if test="record.cDescription != null">
            c_description,
          </if>
        </trim>
        <trim prefix="(" suffix=")" suffixOverrides="," />
      </otherwise>
    </choose>
    values
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.id != null">
            #{record.id,jdbcType=BIGINT},
          </if>
          <if test="record.type != null">
            #{record.type,jdbcType=VARCHAR},
          </if>
          <if test="record.language != null">
            #{record.language,jdbcType=VARCHAR},
          </if>
          <if test="record.propKey != null">
            #{record.propKey,jdbcType=VARCHAR},
          </if>
          <if test="record.name != null">
            #{record.name,jdbcType=VARCHAR},
          </if>
          <if test="record.cName != null">
            #{record.cName,jdbcType=VARCHAR},
          </if>
          <if test="record.checkExpression != null">
            #{record.checkExpression,jdbcType=VARCHAR},
          </if>
          <if test="record.description != null">
            #{record.description,jdbcType=LONGVARCHAR},
          </if>
          <if test="record.cDescription != null">
            #{record.cDescription,jdbcType=LONGVARCHAR},
          </if>
        </trim>
      </otherwise>
    </choose>
  </insert>
  <select id="countByExample" parameterType="io.holoinsight.server.common.dao.entity.TraceAgentConfPropDOExample" resultType="java.lang.Long">
    select count(*) from trace_agent_configuration_properties
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update trace_agent_configuration_properties
    SET
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.id != null">
            id = #{record.id,jdbcType=BIGINT},
          </if>
          <if test="record.type != null">
            `type` = #{record.type,jdbcType=VARCHAR},
          </if>
          <if test="record.language != null">
            `language` = #{record.language,jdbcType=VARCHAR},
          </if>
          <if test="record.propKey != null">
            prop_key = #{record.propKey,jdbcType=VARCHAR},
          </if>
          <if test="record.name != null">
            `name` = #{record.name,jdbcType=VARCHAR},
          </if>
          <if test="record.cName != null">
            c_name = #{record.cName,jdbcType=VARCHAR},
          </if>
          <if test="record.checkExpression != null">
            check_expression = #{record.checkExpression,jdbcType=VARCHAR},
          </if>
          <if test="record.description != null">
            description = #{record.description,jdbcType=LONGVARCHAR},
          </if>
          <if test="record.cDescription != null">
            c_description = #{record.cDescription,jdbcType=LONGVARCHAR},
          </if>
        </trim>
      </otherwise>
    </choose>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update trace_agent_configuration_properties
    set id = #{record.id,jdbcType=BIGINT},
      `type` = #{record.type,jdbcType=VARCHAR},
      `language` = #{record.language,jdbcType=VARCHAR},
      prop_key = #{record.propKey,jdbcType=VARCHAR},
      `name` = #{record.name,jdbcType=VARCHAR},
      c_name = #{record.cName,jdbcType=VARCHAR},
      check_expression = #{record.checkExpression,jdbcType=VARCHAR},
      description = #{record.description,jdbcType=LONGVARCHAR},
      c_description = #{record.cDescription,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update trace_agent_configuration_properties
    set id = #{record.id,jdbcType=BIGINT},
      `type` = #{record.type,jdbcType=VARCHAR},
      `language` = #{record.language,jdbcType=VARCHAR},
      prop_key = #{record.propKey,jdbcType=VARCHAR},
      `name` = #{record.name,jdbcType=VARCHAR},
      c_name = #{record.cName,jdbcType=VARCHAR},
      check_expression = #{record.checkExpression,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="map">
    update trace_agent_configuration_properties
    SET
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.type != null">
            `type` = #{record.type,jdbcType=VARCHAR},
          </if>
          <if test="record.language != null">
            `language` = #{record.language,jdbcType=VARCHAR},
          </if>
          <if test="record.propKey != null">
            prop_key = #{record.propKey,jdbcType=VARCHAR},
          </if>
          <if test="record.name != null">
            `name` = #{record.name,jdbcType=VARCHAR},
          </if>
          <if test="record.cName != null">
            c_name = #{record.cName,jdbcType=VARCHAR},
          </if>
          <if test="record.checkExpression != null">
            check_expression = #{record.checkExpression,jdbcType=VARCHAR},
          </if>
          <if test="record.description != null">
            description = #{record.description,jdbcType=LONGVARCHAR},
          </if>
          <if test="record.cDescription != null">
            c_description = #{record.cDescription,jdbcType=LONGVARCHAR},
          </if>
        </trim>
      </otherwise>
    </choose>
    where id = #{record.id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="io.holoinsight.server.common.dao.entity.TraceAgentConfPropDO">
    update trace_agent_configuration_properties
    set `type` = #{type,jdbcType=VARCHAR},
      `language` = #{language,jdbcType=VARCHAR},
      prop_key = #{propKey,jdbcType=VARCHAR},
      `name` = #{name,jdbcType=VARCHAR},
      c_name = #{cName,jdbcType=VARCHAR},
      check_expression = #{checkExpression,jdbcType=VARCHAR},
      description = #{description,jdbcType=LONGVARCHAR},
      c_description = #{cDescription,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="io.holoinsight.server.common.dao.entity.TraceAgentConfPropDO">
    update trace_agent_configuration_properties
    set `type` = #{type,jdbcType=VARCHAR},
      `language` = #{language,jdbcType=VARCHAR},
      prop_key = #{propKey,jdbcType=VARCHAR},
      `name` = #{name,jdbcType=VARCHAR},
      c_name = #{cName,jdbcType=VARCHAR},
      check_expression = #{checkExpression,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <select id="selectOneByExample" parameterType="io.holoinsight.server.common.dao.entity.TraceAgentConfPropDOExample" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from trace_agent_configuration_properties
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    limit 1
  </select>
  <select id="selectOneByExampleWithBLOBs" parameterType="io.holoinsight.server.common.dao.entity.TraceAgentConfPropDOExample" resultMap="ResultMapWithBLOBs">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from trace_agent_configuration_properties
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    limit 1
  </select>
  <select id="selectOneByExampleSelective" parameterType="map" resultMap="ResultMapWithBLOBs">
    select
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.aliasedEscapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <include refid="Base_Column_List" />
        ,
        <include refid="Blob_Column_List" />
      </otherwise>
    </choose>
    from trace_agent_configuration_properties
    <if test="example != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
    <if test="example != null and example.orderByClause != null">
      order by ${example.orderByClause}
    </if>
    limit 1
  </select>
  <insert id="batchInsert" parameterType="map">
    insert into trace_agent_configuration_properties
    (id, `type`, `language`, prop_key, `name`, c_name, check_expression, description, 
      c_description)
    values
    <foreach collection="list" item="item" separator=",">
      (#{item.id,jdbcType=BIGINT}, #{item.type,jdbcType=VARCHAR}, #{item.language,jdbcType=VARCHAR}, 
        #{item.propKey,jdbcType=VARCHAR}, #{item.name,jdbcType=VARCHAR}, #{item.cName,jdbcType=VARCHAR}, 
        #{item.checkExpression,jdbcType=VARCHAR}, #{item.description,jdbcType=LONGVARCHAR}, 
        #{item.cDescription,jdbcType=LONGVARCHAR})
    </foreach>
  </insert>
  <insert id="batchInsertSelective" parameterType="map">
    insert into trace_agent_configuration_properties (
    <foreach collection="selective" item="column" separator=",">
      ${column.escapedColumnName}
    </foreach>
    )
    values
    <foreach collection="list" item="item" separator=",">
      (
      <foreach collection="selective" item="column" separator=",">
        <if test="'id'.toString() == column.value">
          #{item.id,jdbcType=BIGINT}
        </if>
        <if test="'type'.toString() == column.value">
          #{item.type,jdbcType=VARCHAR}
        </if>
        <if test="'language'.toString() == column.value">
          #{item.language,jdbcType=VARCHAR}
        </if>
        <if test="'prop_key'.toString() == column.value">
          #{item.propKey,jdbcType=VARCHAR}
        </if>
        <if test="'name'.toString() == column.value">
          #{item.name,jdbcType=VARCHAR}
        </if>
        <if test="'c_name'.toString() == column.value">
          #{item.cName,jdbcType=VARCHAR}
        </if>
        <if test="'check_expression'.toString() == column.value">
          #{item.checkExpression,jdbcType=VARCHAR}
        </if>
        <if test="'description'.toString() == column.value">
          #{item.description,jdbcType=LONGVARCHAR}
        </if>
        <if test="'c_description'.toString() == column.value">
          #{item.cDescription,jdbcType=LONGVARCHAR}
        </if>
      </foreach>
      )
    </foreach>
  </insert>
  <insert id="upsertSelective" parameterType="map">
    insert into trace_agent_configuration_properties
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          ${column.escapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.id != null">
            id,
          </if>
          <if test="record.type != null">
            `type`,
          </if>
          <if test="record.language != null">
            `language`,
          </if>
          <if test="record.propKey != null">
            prop_key,
          </if>
          <if test="record.name != null">
            `name`,
          </if>
          <if test="record.cName != null">
            c_name,
          </if>
          <if test="record.checkExpression != null">
            check_expression,
          </if>
          <if test="record.description != null">
            description,
          </if>
          <if test="record.cDescription != null">
            c_description,
          </if>
        </trim>
        <trim prefix="(" suffix=")" suffixOverrides="," />
      </otherwise>
    </choose>
    values
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.id != null">
            #{record.id,jdbcType=BIGINT},
          </if>
          <if test="record.type != null">
            #{record.type,jdbcType=VARCHAR},
          </if>
          <if test="record.language != null">
            #{record.language,jdbcType=VARCHAR},
          </if>
          <if test="record.propKey != null">
            #{record.propKey,jdbcType=VARCHAR},
          </if>
          <if test="record.name != null">
            #{record.name,jdbcType=VARCHAR},
          </if>
          <if test="record.cName != null">
            #{record.cName,jdbcType=VARCHAR},
          </if>
          <if test="record.checkExpression != null">
            #{record.checkExpression,jdbcType=VARCHAR},
          </if>
          <if test="record.description != null">
            #{record.description,jdbcType=LONGVARCHAR},
          </if>
          <if test="record.cDescription != null">
            #{record.cDescription,jdbcType=LONGVARCHAR},
          </if>
        </trim>
      </otherwise>
    </choose>
    on duplicate key update 
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.id != null">
            id = #{record.id,jdbcType=BIGINT},
          </if>
          <if test="record.type != null">
            `type` = #{record.type,jdbcType=VARCHAR},
          </if>
          <if test="record.language != null">
            `language` = #{record.language,jdbcType=VARCHAR},
          </if>
          <if test="record.propKey != null">
            prop_key = #{record.propKey,jdbcType=VARCHAR},
          </if>
          <if test="record.name != null">
            `name` = #{record.name,jdbcType=VARCHAR},
          </if>
          <if test="record.cName != null">
            c_name = #{record.cName,jdbcType=VARCHAR},
          </if>
          <if test="record.checkExpression != null">
            check_expression = #{record.checkExpression,jdbcType=VARCHAR},
          </if>
          <if test="record.description != null">
            description = #{record.description,jdbcType=LONGVARCHAR},
          </if>
          <if test="record.cDescription != null">
            c_description = #{record.cDescription,jdbcType=LONGVARCHAR},
          </if>
        </trim>
      </otherwise>
    </choose>
  </insert>
  <insert id="upsert" parameterType="io.holoinsight.server.common.dao.entity.TraceAgentConfPropDO">
    insert into trace_agent_configuration_properties
    (id, `type`, `language`, prop_key, `name`, c_name, check_expression)
    values
    (#{id,jdbcType=BIGINT}, #{type,jdbcType=VARCHAR}, #{language,jdbcType=VARCHAR}, #{propKey,jdbcType=VARCHAR}, 
      #{name,jdbcType=VARCHAR}, #{cName,jdbcType=VARCHAR}, #{checkExpression,jdbcType=VARCHAR}
      )
    on duplicate key update 
    id = #{id,jdbcType=BIGINT}, 
    `type` = #{type,jdbcType=VARCHAR}, 
    `language` = #{language,jdbcType=VARCHAR}, 
    prop_key = #{propKey,jdbcType=VARCHAR}, 
    `name` = #{name,jdbcType=VARCHAR}, 
    c_name = #{cName,jdbcType=VARCHAR}, 
    check_expression = #{checkExpression,jdbcType=VARCHAR}
  </insert>
  <insert id="upsertWithBLOBs" parameterType="io.holoinsight.server.common.dao.entity.TraceAgentConfPropDO">
    insert into trace_agent_configuration_properties
    (id, `type`, `language`, prop_key, `name`, c_name, check_expression, description, 
      c_description)
    values
    (#{id,jdbcType=BIGINT}, #{type,jdbcType=VARCHAR}, #{language,jdbcType=VARCHAR}, #{propKey,jdbcType=VARCHAR}, 
      #{name,jdbcType=VARCHAR}, #{cName,jdbcType=VARCHAR}, #{checkExpression,jdbcType=VARCHAR}, 
      #{description,jdbcType=LONGVARCHAR}, #{cDescription,jdbcType=LONGVARCHAR})
    on duplicate key update 
    id = #{id,jdbcType=BIGINT}, 
    `type` = #{type,jdbcType=VARCHAR}, 
    `language` = #{language,jdbcType=VARCHAR}, 
    prop_key = #{propKey,jdbcType=VARCHAR}, 
    `name` = #{name,jdbcType=VARCHAR}, 
    c_name = #{cName,jdbcType=VARCHAR}, 
    check_expression = #{checkExpression,jdbcType=VARCHAR}, 
    description = #{description,jdbcType=LONGVARCHAR}, 
    c_description = #{cDescription,jdbcType=LONGVARCHAR}
  </insert>
</mapper>